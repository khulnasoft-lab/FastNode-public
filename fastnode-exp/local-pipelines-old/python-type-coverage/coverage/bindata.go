// Code generated by go-bindata.
// sources:
// templates/file.html
// templates/toplevel.html
// templates/trace.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFileHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xc1\x72\xda\x30\x10\xbd\xf7\x2b\x54\x37\x07\x38\x20\x87\x90\xb4\x89\x6b\x38\xe4\x90\x5b\x67\x3a\xd3\xe9\x07\x08\x69\xc1\x02\x59\x52\xa5\x35\xe0\x32\xfc\x7b\x25\x0b\x0c\xa4\xd3\x4c\x73\x81\xf5\x7a\xf7\xbd\xb7\xd2\x3e\x97\x1f\x85\xe1\xd8\x5a\x20\x15\xd6\x6a\xf6\xa1\x4c\x7f\x84\x94\x15\x30\x11\x83\x10\xa2\x44\x05\xb3\xfd\x9e\x3e\x33\x0f\x9a\xd5\x70\x38\x94\x79\x4a\xa6\x02\xcf\x9d\xb4\x48\x22\xce\x34\x43\xd8\x61\xbe\x62\x1b\x96\xb2\x19\xf1\x8e\x4f\xb3\x0a\xd1\xfa\x22\xcf\xb9\x11\x40\x57\xbf\x1a\x70\x2d\xe5\xa6\xce\x53\x38\xba\xa3\x63\x7a\x4f\x6b\xa9\xe9\xca\x67\xb3\x32\x4f\xbd\xef\x87\xaf\xd9\x8e\x0b\x4d\xe7\xc6\xa0\x47\xc7\x6c\x7c\x88\x34\x7d\x22\x9f\xd0\x09\x7d\xc8\x57\xfe\x9c\xfa\x17\xad\x92\x7a\x4d\x1c\xa8\x69\xe6\xb1\x55\xe0\x2b\x80\x40\x77\xa1\x82\x7b\x9f\x91\xca\xc1\xe2\xfd\xfc\xa1\xf5\x95\x80\x08\x16\x14\x44\xd2\xd3\xd8\x91\x35\xc5\x73\x23\x5a\xb2\xef\x42\x42\x2c\x13\x42\xea\x65\x41\xee\x6e\xed\xee\x6b\x97\x3c\x74\xbf\xf1\x6c\xfb\x2a\x64\xf3\x91\x97\xbf\xa1\x20\xf7\x97\x35\x28\xfa\x8a\x85\xd1\x38\x5a\xb0\x5a\xaa\xb6\x20\xb5\xd1\xc6\x5b\xc6\xe1\xb2\x38\x48\x6f\x34\x5e\x37\x6c\x41\x2e\x2b\x2c\x82\x24\x25\xae\x6a\xd1\x18\x85\xd2\x8e\xa4\xd6\xe0\xfa\x9e\x70\x20\xa3\xad\x14\x58\x15\xe4\xf1\xb6\xd7\x1b\x27\x72\x02\x5c\x98\xc1\xee\xc8\xb6\x92\x08\xc4\x1b\x25\xaf\x11\x1d\x84\xdc\x06\xce\x8a\xe7\x8c\xaf\x97\x2e\x68\x12\x05\xf9\xf4\xf0\xf8\xfc\xe5\xf3\xf8\x35\xde\x38\xe0\xfd\x8d\xd4\xe8\xb7\xb1\x5e\x5e\x9e\xc6\x4f\xff\x87\x15\x96\xe4\x7c\x2f\x6f\xaf\x66\xaa\xb9\x19\x04\x8b\x35\x35\x68\x1c\x86\x89\x98\x68\x07\x8b\x46\x73\x94\x46\x0f\x86\xbd\x9a\x9b\x41\x46\x99\xc7\x6c\x78\x3a\xc6\xc1\xf0\x48\x3a\x3c\xb1\xf6\xab\x59\xe6\xc9\x9b\x31\x8c\x8b\x71\x94\x22\xe4\x86\x70\xc5\xbc\x9f\x66\x3c\x5c\x14\x93\xe1\x1a\x8e\x12\xa2\x9d\x27\xd1\xc0\xdf\x19\x56\xd1\xbc\xe1\xe9\xf4\xc2\xba\xce\xda\xdf\x98\x5b\x83\xf8\x69\x7f\x98\xc6\xf1\xce\xe0\xf1\xc5\x91\x3b\x40\x27\xe2\x44\x17\xfa\xbb\xaf\xc4\x9f\x00\x00\x00\xff\xff\x64\x87\x16\x7d\x3d\x04\x00\x00")

func templatesFileHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFileHtml,
		"templates/file.html",
	)
}

func templatesFileHtml() (*asset, error) {
	bytes, err := templatesFileHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/file.html", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1478835483, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesToplevelHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x41\x73\x9b\x3a\x10\xbe\xbf\x5f\xa1\xc7\xcb\xf1\x05\x1a\xa7\xbd\xa4\x98\x99\xb4\xd3\x9c\xd2\x4e\xa6\xf1\x4c\xcf\xb2\x24\x07\xb9\x80\xa8\x24\x67\xe2\xa1\xfe\xef\x5d\x49\xc6\x60\xc0\x0e\xa2\xc9\x21\xb1\x56\x7c\xdf\xee\x7e\x2b\xeb\x63\x12\xff\x4b\x05\xd1\xdb\x92\xa1\x54\xe7\x59\xf2\x4f\xec\xfe\x20\xf8\x89\x53\x86\xa9\xfb\x08\x0b\xcd\x75\xc6\x92\x7b\x41\x70\x86\x1e\x35\xd6\x9c\xa0\xdb\x02\x67\x5b\xc5\x55\x1c\xb9\xcd\xfa\x51\x45\x24\x2f\x35\x32\xac\xf3\x40\xb3\x17\x1d\xad\xf1\x33\x76\xd1\x00\x29\x49\xe6\x41\xaa\x75\xa9\x6e\xa2\x88\x08\xca\xc2\xf5\xaf\x0d\x93\xdb\x90\x88\x3c\x72\x1f\x2f\x67\xe1\x55\xf8\x3e\xcc\x79\x11\xae\x55\x90\xc4\x91\xc3\x4e\x49\x90\xe3\x17\x42\x8b\x70\x29\x84\x56\x5a\xe2\xd2\x2c\x4c\xa2\x43\x20\xba\x0e\xaf\xc3\x0f\xd1\x5a\x35\xa1\xd3\x89\x33\x5e\xfc\x44\x92\x65\xf3\x40\xe9\x6d\xc6\x54\xca\x18\x24\x6c\xd5\x41\x94\x0a\x50\x2a\xd9\xca\xbf\x02\x80\x76\x4a\x30\x64\x50\x83\x49\xda\xb4\x6e\xf2\xd6\x2b\x84\x96\x82\x6e\x51\x75\x58\x22\x54\x62\x4a\x79\xf1\x74\x83\x66\xef\xca\x97\x8f\x87\x8d\x5d\x8d\x8f\x5a\x04\x71\xd4\x4c\x38\x36\x4c\x0d\x6f\x9c\x5e\x25\x9f\x37\xf9\x26\x83\x41\x3f\x33\x3b\x70\x18\x33\x04\x9b\x27\x34\x5e\x66\x0c\x91\x0c\x2b\x05\xcd\xdb\x85\xfd\x7d\x09\x0d\xf0\x92\xd1\x20\x69\x95\x65\x9e\x3f\xce\xd0\xc4\x65\x3f\xe8\x36\xd2\x24\x5e\x26\xdf\x36\x39\xfa\x84\x15\x53\xe8\x3b\x53\x22\x7b\x66\x34\x8e\x96\xa0\x0a\xec\x9e\x83\x3d\x10\x3d\x05\x66\xb2\x7d\x65\xf9\x92\x49\x85\xee\xc4\xa6\x18\x9f\xcc\x1f\x65\x72\xdd\x6a\xfd\x3a\x06\xa2\x03\x1a\x9d\x11\x8e\x26\x55\x15\xd6\x7d\x3b\x15\x7e\x23\x38\x73\x39\xde\xed\x80\x8c\x9e\xc5\x41\x33\x5d\x68\x29\x99\xd6\x5b\xd8\x18\x01\xdf\xeb\x50\x53\xf8\x25\xee\x83\x7d\x52\x3b\x31\x5f\x49\xe8\x2d\xa6\x9b\xb0\x14\x84\x29\x05\xdf\x2c\xb4\xe0\x39\x1b\x3d\xdf\x3b\x0e\xb7\x04\x5a\x08\x81\xee\xb1\x7c\xf2\xc5\xfd\xe0\x3a\x45\x0f\x58\x2a\x86\xbe\x48\x29\xa4\xf2\xc4\xdf\x52\xea\x71\xee\x17\x42\xc3\xdd\xfe\xb0\xd5\xa9\x28\x1c\xc1\x5b\x1f\x49\x7b\x8d\x84\x8d\x96\x46\xca\xc3\x8c\xcd\x62\xc4\x90\x1d\x07\x28\x6a\x05\xf5\x38\x5e\xfb\xe4\x46\x4d\x27\xa6\x37\xd6\xca\xe9\x8d\x72\xa3\xf0\x3e\x95\x10\xe9\x5c\xc9\x91\xbd\x5e\x8f\xef\xe8\x47\x46\x34\x17\xc5\x5f\xde\xcd\x55\x25\x71\x01\x62\x5e\xf0\xff\x2f\x4a\x29\xd6\x40\x8a\x6e\xe6\xc8\x4c\xca\x7c\x56\xbb\xdd\xe0\xa8\x4d\x9b\x31\xde\xdb\xdd\x7f\x55\x75\xc1\x77\xbb\x00\x1a\xaf\x39\x40\x6c\x9d\x9a\x8e\x71\x62\xbb\xee\x37\x59\x55\xac\xa0\x2d\xf6\x5e\x8f\x9e\x95\xc5\xe9\x0c\x71\x3a\x0f\xce\xd4\x92\xce\xba\xbe\xe4\xa7\x95\xc3\x0c\x7b\x59\x2d\xcc\xe0\x86\xdb\x9c\xe4\x69\x2d\xa8\xaf\xaf\x75\xb2\x7a\xb8\x54\x27\xe9\x34\xe4\x68\x8f\xb3\x98\xc1\x4b\xc5\xb1\x9d\x15\x95\xb6\x07\xed\xed\x7b\x03\x1c\x53\x3d\x70\x80\x6a\x82\x1f\x0e\x17\x34\xd1\x1b\x07\xc8\x46\xf9\xa4\xc5\x4d\x1d\x88\xbf\x67\xb6\x70\xde\xbe\x39\x88\xf5\xf4\xce\x41\x8e\x11\xfe\xd9\xc1\xf9\x78\xa8\x85\xbe\xc9\x91\x1f\xe1\xab\x7e\x54\x3e\xf6\x7a\xba\x1e\x3f\xab\x3d\xc9\x33\xda\x76\x4f\x32\x8c\xb2\x60\x8b\x1e\x7e\xad\xe9\x5a\xf1\x3e\x78\x6c\x55\x36\x98\x5e\x37\x8e\x08\x5c\x98\xb0\xa8\xe7\x41\x41\xb2\x30\x1b\xce\x16\x01\xd0\x63\xd8\x9f\x9b\xde\xd6\x04\xa7\x3a\xf8\xa7\x5a\x19\xdf\x6c\x74\x11\x1b\x49\xac\x26\x4a\x48\x6d\x13\x9e\x38\x23\x3d\xa3\x8f\x56\xf0\x74\xbf\x2b\x13\x51\xab\x43\x8b\xed\xd5\x99\x17\x00\x57\xe3\xf1\x4b\xc0\xa0\xba\xed\x87\xe0\x2b\x65\xc7\x01\x12\xd9\x7f\x56\xfc\x09\x00\x00\xff\xff\x76\xdd\x56\x25\xc4\x10\x00\x00")

func templatesToplevelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesToplevelHtml,
		"templates/toplevel.html",
	)
}

func templatesToplevelHtml() (*asset, error) {
	bytes, err := templatesToplevelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/toplevel.html", size: 4292, mode: os.FileMode(420), modTime: time.Unix(1479843929, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTraceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x4e\xc3\x30\x10\x45\xf7\x9c\x62\xf0\x1e\x1b\x5a\xd8\x14\x27\xa7\xe0\x02\xae\x3d\x10\x87\x24\x36\x9e\xa1\x6a\x54\xf5\xee\xd8\x71\x28\x08\x89\x45\x57\xf9\xf3\xa3\xff\xfe\x44\x13\x7d\xeb\x82\xe5\x39\x22\x74\x3c\x0e\xed\x8d\xae\x0f\x00\xdd\xa1\x71\x45\x64\xc9\x9e\x07\x6c\x5f\x92\xb1\xa8\x55\x1d\xea\x0b\xb2\xc9\x47\x86\x92\x6f\x04\xe3\x91\x55\x6f\x0e\xa6\xba\x02\x28\xd9\x46\x74\xcc\x91\x76\x4a\xd9\xe0\x50\xf6\x1f\x9f\x98\x66\x69\xc3\xa8\xaa\xbc\xdb\xc8\x07\xf9\x28\x47\x3f\xc9\x9e\x44\xab\x55\xcd\x5e\x8f\x1f\xcd\xd1\xba\x49\xee\x43\x60\xe2\x64\x62\x19\x4a\xcd\xc5\x50\x5b\xb9\x95\x4f\xaa\xa7\x1f\xeb\xbf\xda\xc1\x4f\xef\x90\x70\x68\x04\xf1\x3c\x20\x75\x88\xb9\xee\xd7\x16\x96\x48\x40\x97\xf0\xf5\xfa\xfe\x1c\xfd\xb3\x40\x81\xe5\x0d\x4a\xe9\xf7\x67\x97\xd6\xaa\xf7\xc1\xcd\x70\x5a\x24\x40\x34\xce\xf9\xe9\x6d\x07\x9b\xfb\x78\x7c\x5e\xcc\x73\x4d\xa8\x4b\x44\xab\x7a\xb7\x22\x4b\x78\x45\x3a\x7f\x00\x3b\x18\xa2\x46\xd8\x30\xb1\xf1\x13\x26\xd1\xae\x5c\x1d\x13\xb6\xa7\x93\x5c\x0e\x7c\x3e\x6b\x55\xe6\x15\x9c\x83\x15\x5b\x61\x19\xbf\xfc\x1f\x5f\x01\x00\x00\xff\xff\x3b\x62\xa3\x9b\x37\x02\x00\x00")

func templatesTraceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTraceHtml,
		"templates/trace.html",
	)
}

func templatesTraceHtml() (*asset, error) {
	bytes, err := templatesTraceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/trace.html", size: 567, mode: os.FileMode(420), modTime: time.Unix(1479842320, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/file.html": templatesFileHtml,
	"templates/toplevel.html": templatesToplevelHtml,
	"templates/trace.html": templatesTraceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"file.html": &bintree{templatesFileHtml, map[string]*bintree{
		}},
		"toplevel.html": &bintree{templatesToplevelHtml, map[string]*bintree{
		}},
		"trace.html": &bintree{templatesTraceHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

