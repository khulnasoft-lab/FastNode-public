// Code generated by go-bindata.
// sources:
// templates/root.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x88\x02\xb1\x91\x98\xdc\x22\x59\xa0\xb0\x25\x03\xed\x76\x8b\x2e\xb0\x48\x17\xc9\xe6\xd0\x23\x4d\x8e\x2d\x62\x29\x52\x20\xc7\x5f\x10\xf4\xdf\x0b\xfa\x73\x25\x6b\x1b\xb4\xba\x48\x1c\xbe\x79\x6f\xe6\x0d\x25\x65\xef\x7e\xff\xeb\xee\xf9\xef\xa7\x7b\x28\xa8\xb4\xb3\x41\x96\x6e\x60\xa5\x5b\xe6\x0c\x1d\x4b\x01\x94\x7a\x36\x00\x00\xc8\x4a\x24\x09\xaa\x90\x21\x22\xe5\xec\xfb\xf3\x1f\xe3\x5f\xd8\x71\xcb\x1a\xf7\x02\x01\x6d\xce\x22\xed\x2c\xc6\x02\x91\x18\xd0\xae\xc2\x9c\x11\x6e\x49\xa8\x18\x19\x14\x01\x17\x39\x2b\x88\xaa\x38\x11\xa2\x94\x5b\xa5\x1d\x9f\x7b\x4f\x91\x82\xac\xd2\x42\xf9\x52\x9c\x03\xe2\x13\xff\xc4\x6f\x53\xea\x25\xc6\x4b\xe3\x78\x22\x9b\x65\x22\x89\x1e\xf5\xc9\x90\xc5\xd9\xfd\x56\x96\x95\x45\x18\x43\x5d\xf3\x47\xaf\x24\xf9\xc0\xff\x94\xb1\x68\x9a\x76\xec\x6e\x15\xa2\x0f\x4d\x93\x89\x43\xe2\x20\x13\x87\x3e\xb3\xb9\xd7\xbb\xd9\x20\xd3\x66\x0d\xca\xca\x18\x73\xa6\xbc\x23\x69\x1c\x86\xf1\xc2\xae\x8c\x3e\x75\xfc\x0a\x11\xfc\xe6\x18\xed\xee\x28\x6f\xc7\xa5\x3e\xdb\x74\x86\x54\x01\xdb\x91\x74\xd5\x35\xff\xe6\x57\x41\x61\xd3\xb4\xd1\xa2\x05\xcf\x84\x36\xeb\x7f\x95\xfb\xdc\x95\x4b\x10\xa3\x73\x16\x2b\xa9\x30\x24\xeb\x5a\x14\x7b\x4c\x71\x3b\xab\xeb\x64\xcc\x83\xde\x36\x0d\x88\x54\xce\x9d\x5f\x39\x6a\x1a\x48\x16\x4e\x7a\x3c\x3d\xd8\x38\xe9\x77\xb6\xb8\xed\x28\x90\x9c\x5b\x3c\x95\xba\x5f\xb0\x6b\x13\x32\xba\x1c\xb8\x76\x3c\x5c\x07\x8f\x09\xb3\x3b\x9f\xc6\x4e\xc6\xbb\x4c\x50\xf1\x36\xee\x29\xf8\x79\x3f\x22\x13\x7d\xfc\x09\xfb\x46\x35\x87\x73\xd2\x8d\xd7\x75\x90\x6e\x89\xf0\x93\xf2\x65\x05\x93\x1c\xf8\xa5\xb4\xd8\x19\xeb\x0f\xba\xd2\xb3\xba\xde\xd3\xf0\x2f\xb2\xc4\xfd\x51\xed\x29\xa4\x8b\x4d\x1d\xbe\x85\xed\xef\xb1\xae\xd1\xe9\xbe\xd2\x44\x4f\x8f\x99\xd8\xcf\xad\xf7\x30\x1e\x1f\x4f\xb7\xa8\x82\xa9\xe8\xb0\xb5\x96\x01\x34\x12\x2a\xfa\xa6\x82\xb7\x16\x72\x88\x48\x0f\x8e\x30\xac\xa5\x1d\x2e\x56\x4e\x25\x87\x86\x23\xa8\xcf\xcc\x29\x27\x12\xe4\xa0\xbd\x5a\x95\xe8\x88\x9f\x1e\xee\x2d\xee\xd7\x71\xcf\xf5\xec\xab\xe9\x39\xc9\x2c\x60\x18\x09\xde\xe5\x70\xf3\x9a\x2b\x5d\xca\xa2\x0c\x67\xc9\xd7\xd5\x8c\xa6\x2d\x60\x24\x18\xe7\xf0\xf9\xe6\xa6\x1d\x3e\x52\x67\xd7\xcc\xc7\xa4\x1c\x3a\x19\x6d\x4f\x7f\xdc\x46\x72\x85\xa6\xfd\x49\x4b\x3c\xe1\x7f\xdb\x3d\xe8\xe1\xe9\x4d\x1e\xf1\xfd\xe7\x96\x97\x32\x2c\x8d\x3b\x70\x30\x06\x1f\x52\x3d\x1f\x80\x55\x5b\x76\xe1\x3b\x94\xd3\x7c\x84\x9f\x6f\x46\xd3\xc1\xe0\x4a\x42\x6a\x7d\xbf\x46\x47\x8f\x26\x12\x3a\x0c\xc3\xf7\x2f\xb8\xd3\x7e\xe3\xde\x7f\x84\xf3\x84\xb0\xdb\x7c\xdc\x18\x52\x05\x0c\x91\xbf\xe0\xae\xcf\x19\x25\x23\x02\xfb\x35\x04\xbf\x79\xc4\x05\xb1\x49\xef\x19\xde\x18\xa7\xfd\x86\xdb\xf4\x15\x31\xde\xf1\x80\x95\x95\x0a\x87\xac\xae\xf9\x53\xc0\xf5\xf7\xaf\x8f\x4d\xc3\x3a\x93\x3a\x5d\xf3\x80\xf2\xe5\x7a\xeb\x95\xf2\x57\xb3\x2c\xfe\x8f\xf4\x17\xdc\xd2\x7f\x95\xbe\x8c\xbd\x19\x4d\x07\x99\x38\xbd\x08\x99\x38\xfe\x5b\xc4\xe1\x57\xfb\x4f\x00\x00\x00\xff\xff\xde\x66\x34\x65\x7b\x07\x00\x00")

func templatesRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRootHtml,
		"templates/root.html",
	)
}

func templatesRootHtml() (*asset, error) {
	bytes, err := templatesRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root.html", size: 1915, mode: os.FileMode(420), modTime: time.Unix(1545078886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/root.html": templatesRootHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"root.html": &bintree{templatesRootHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

