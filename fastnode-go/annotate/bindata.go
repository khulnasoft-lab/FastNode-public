package annotate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _presentation_api_ds_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x3b\x0e\xc2\x30\x10\x44\x77\x8c\x0b\x4b\x34\x2e\x29\xdd\x70\x00\x6e\x60\x45\xe1\x04\x5c\x80\x82\x2b\xd0\xfb\xe8\x24\xda\x11\xb2\x14\x52\x50\x25\x82\x79\x92\xf5\x56\x8a\x9d\x4f\xe3\xec\xd8\xcc\x30\x3c\x1f\x17\xb3\x3c\x95\xc9\xdc\x76\xb6\x8f\x24\x8e\x05\xa1\xab\xc1\x7b\x08\x21\x84\x10\x62\xdf\xc0\x95\x8e\xdb\xbe\x86\x10\x62\x87\xcc\xfb\x43\xa1\x2b\xdd\xdc\xe0\xf5\x40\xc7\x6e\x4d\xa6\x0b\x5d\xe9\xe6\x06\xe7\x05\x3a\xd2\x89\xce\x74\xa1\x2b\xdd\xdc\xdc\xb4\xc0\xf0\x01\x3e\x19\x4c\x28\x60\x0a\x41\xa1\xeb\x97\x1f\x2d\xc4\x9f\x70\x70\xe5\xf9\xff\x7f\xb5\xd5\xfc\x2f\x84\xf8\x61\x10\xc7\xdb\x38\xd8\x3b\x10\x2c\x27\x4c\xe3\xde\xd5\xcd\xd6\x9b\x80\xe0\x87\x85\xa7\x6e\x6d\xa1\x2b\xdd\xdc\x6a\x04\x84\xd8\x8a\x57\x00\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func presentation_api_ds_store_bytes() ([]byte, error) {
	return bindata_read(
		_presentation_api_ds_store,
		"presentation_api/.DS_Store",
	)
}

func presentation_api_ds_store() (*asset, error) {
	bytes, err := presentation_api_ds_store_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "presentation_api/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1440721812, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _presentation_api_readme = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8c\x41\x0e\x02\x31\x0c\x03\xef\xbc\xc2\x0f\x40\xfc\x81\x23\x37\x0e\x7c\xa0\xdb\x1a\x6d\xa4\x6d\x82\x92\x02\xcb\xef\x89\x0a\x47\x8f\xed\xb9\xad\x44\xb5\x46\x88\x62\xac\x12\x68\xe2\xac\xc3\xfc\x83\x0c\x23\xdb\xf3\xf5\x82\x52\x2b\x23\x64\xd9\x88\xbb\x5b\xcf\x71\x48\xfb\x1f\xb9\x97\xfe\xd8\x18\x47\x84\xfd\x14\x13\x1f\xfc\xa9\x81\xb7\x24\xd1\xe9\x89\xa2\x6d\xb1\x1d\xd4\x97\xb8\x69\xa7\x8e\xd3\x37\x00\x00\xff\xff\x0e\x9b\x9d\x1c\x7e\x00\x00\x00")

func presentation_api_readme_bytes() ([]byte, error) {
	return bindata_read(
		_presentation_api_readme,
		"presentation_api/README",
	)
}

func presentation_api_readme() (*asset, error) {
	bytes, err := presentation_api_readme_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "presentation_api/README", size: 126, mode: os.FileMode(420), modTime: time.Unix(1437782308, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _presentation_api_bash_fastnode_sh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xe2\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xc8\xce\x2c\x49\x8d\x2f\x2f\x4a\x2c\x50\xa8\xe6\xe2\x4c\x4d\xce\xc8\x57\x50\x8a\x8e\xf6\xf6\x0c\x71\x8d\x8e\x56\x31\x8c\x8d\x05\xb1\x62\x63\x95\xb8\x6a\xd1\xb5\x14\x67\xe4\x97\xc7\x17\xa5\xa6\x03\x05\xe2\x53\x52\x73\x32\x73\x81\x82\x45\x20\x33\x10\x06\xaa\x07\x7b\xf8\x87\x2b\x54\x2b\x41\x54\x29\x59\x29\x28\xa9\xab\xb8\xf9\xfb\xab\x2b\xe9\x28\x28\x95\x54\x16\xa4\x82\x44\xa0\x72\xb5\xea\x98\x36\xe4\x64\xe6\xa5\xa2\x1a\xa8\xe4\xe3\xe9\xe7\xaa\xa0\x62\x08\x72\x0e\x20\x00\x00\xff\xff\xef\xca\xf2\x95\xd6\x00\x00\x00")

func presentation_api_bash_fastnode_sh_bytes() ([]byte, error) {
	return bindata_read(
		_presentation_api_bash_fastnode_sh,
		"presentation_api/bash/fastnode.sh",
	)
}

func presentation_api_bash_fastnode_sh() (*asset, error) {
	bytes, err := presentation_api_bash_fastnode_sh_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "presentation_api/bash/fastnode.sh", size: 214, mode: os.FileMode(420), modTime: time.Unix(1451425283, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _presentation_api_python_entrypoint_py = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x5f\x6b\xeb\xc6\x13\x7d\x96\x3e\xc5\xa0\x70\x41\x06\x47\x90\xd7\x0b\x7e\xf8\x71\xc9\x0f\x42\xdb\xdb\x92\xa4\x4f\xc6\x88\xb5\x34\x8a\xb7\x91\x76\xd5\xdd\x95\x1d\xf5\xd3\xf7\xcc\xae\xe4\x98\xdb\x0b\xc6\x92\x76\xfe\x9c\x99\x33\x67\x56\x0f\xa3\x75\x81\xac\xcf\x97\x37\xe5\xc3\xfa\xea\xe7\xeb\x29\x1e\x79\x7e\x47\xaf\x27\xed\xa9\xd3\x3d\x13\x9e\xe1\xc4\xc4\x26\xb8\x79\xb4\xda\x04\x7c\xaa\xe5\x0f\x36\xfe\xe0\x66\x0a\xdc\xd2\xe5\xc4\x86\xdc\x64\x8c\x36\x6f\xa4\xa8\xb1\x2d\x82\x3e\xd4\x30\x22\x87\x35\x31\x47\x33\x39\x15\xb4\x35\xc8\xef\xd9\x9d\xd9\x55\xc0\xf9\x3c\xa6\xa3\x6a\xde\xd9\xb4\x34\x2a\xef\x39\xc1\x1a\x35\x20\xbc\x8b\xef\xb1\x9c\xc6\x9a\xa0\x74\x04\x89\x29\x6f\x61\x74\x84\x41\xf6\x97\xdf\xff\x7c\xfe\xf6\x88\x9a\xcf\xda\x59\x33\xa0\x76\x3a\x2b\xa7\xd5\xb1\xe7\xea\xa6\x35\x54\xeb\x53\x23\xf1\xf3\x72\x8a\x87\xdc\x58\xd7\x4a\x7e\x7c\x37\x27\xf2\x76\x72\x0d\x53\xaf\x0d\x4a\x1a\x9d\x6d\xa7\x06\xdd\x02\x24\x99\x8f\x73\xc0\x39\x2a\xf4\x41\x99\x56\xb9\x96\xec\x14\xc6\x29\x2c\x38\xf8\xa9\xe6\xa4\xf9\x8c\x98\xe3\xfc\x15\x61\x44\xf7\x68\xd0\x79\x41\x58\xea\x04\xa9\x96\x94\xa1\xff\xbd\xbc\x2e\x0e\x89\x55\x71\x61\x84\x47\xf0\x88\x91\x6a\x99\x62\x70\x21\x4e\xc5\x9a\xd1\x21\x49\x62\xde\x8f\xdc\x68\xd5\xa7\xa0\x96\x7b\x3d\x68\x0e\xec\x28\x58\x90\x4b\x47\x0e\x17\xc6\x33\xe6\x6d\x54\xdf\xe3\x3c\xc2\xe5\x79\xde\x72\x47\x03\xc8\x2d\x37\x5f\xf3\x6c\x54\xe1\x44\x3b\xe8\xa5\x5a\x68\xac\xde\x38\x94\x45\x2a\xb9\xd8\xd2\x77\x6b\x78\x93\x67\xba\xa3\xe8\x89\x46\xe5\x04\x81\x59\xac\xa5\x2c\x9e\xf9\xef\x49\x3b\xf4\xfd\xb3\x31\xac\xad\x1b\x0b\xf5\x71\x28\x90\x29\x83\x0a\x2b\xfe\xd0\xa1\x7c\xd8\xe4\x79\x76\x47\xcf\xac\xda\xa5\xe5\x3c\xbb\x68\x80\xd8\x91\x4d\x29\x70\x1b\xa8\x97\x3a\x01\xf3\xae\x41\x95\x5d\xe5\xe0\x5c\xa6\xb8\x3f\xc0\x2e\x47\x32\xb3\xe0\x98\x61\x86\xd4\x2b\xe1\x9c\x4b\xb8\x6f\x63\xc1\xc9\xf5\x1b\xc2\x02\xaf\x74\x43\x82\x37\xb5\x56\xf4\x62\x87\x45\x61\x83\x9a\x21\x8c\x7e\x16\x25\xaf\x1a\xd7\xc6\x6b\x98\x14\x0c\x60\x7b\x80\x30\x7a\x96\x9c\x90\x01\x58\x8e\xb3\x90\x46\x41\x6f\xa7\x71\xa4\x83\xe7\xbe\xa3\xb3\x56\xb2\x6e\x55\xf2\xf7\xfb\xba\x16\x89\xd7\xf5\xe1\x47\x38\x48\x46\xa6\x25\x19\x4f\x90\x95\x9c\xb7\x69\x56\x98\x6f\xa0\x35\x8e\x76\x3b\x2a\xea\x5a\xc6\x56\xd7\x05\x95\x5c\xbd\x55\x34\xab\xa1\xc7\xe8\x11\x83\x32\x36\x55\x9e\x89\xaf\x1f\x55\x23\x64\x60\xc3\x2b\xc3\x97\x3a\x55\x50\x7e\x06\x0b\x25\xb7\xa5\xc1\xf2\xae\x03\x30\x8a\x03\xc2\x7e\xb0\x2c\x31\x87\xff\x84\xac\x06\x84\x5c\x51\x23\xd7\x4f\x10\xa1\x90\x6d\xb1\xf8\x49\x7e\x58\x99\xc0\x51\x16\x69\x73\xe9\x68\xdb\x79\xdd\xf6\xdb\xcd\xce\xb3\xce\x3a\xb8\x0f\xc9\x13\x43\xad\xc4\x55\xe6\x7f\x47\xff\x17\x76\x25\xa2\xc7\x98\x93\xea\xd7\x74\xbd\x6d\xde\xe1\x23\x86\x78\xbe\x03\xb3\x1f\x25\x74\xac\x42\x70\xa5\x01\xc2\x96\x0a\xb1\x18\x0b\x45\x3f\x6c\x48\x60\xe4\x58\x32\x88\x68\x2e\xaa\x7f\x2f\x05\x77\x23\xe4\x44\x4d\xc6\x5b\x32\xc2\x49\x46\x33\x0d\x47\xb4\x53\xfe\xc3\xce\xde\x1f\x95\xe7\x76\xb3\x6e\x00\x15\xfb\xfd\x2f\x4f\xaf\x8f\xfb\xfd\xaf\x4f\xdf\x1f\xe9\x4b\x7b\x38\xc8\xe7\xe1\x50\xd0\x17\x2a\xaf\x35\xdd\xd3\xc3\x92\x7b\x11\xa3\x5a\xb4\x94\x6e\xa6\xe5\xbe\xf3\xf4\xd7\xe4\x05\x17\x7b\x76\xa5\x0d\x51\x70\x5d\xf4\xdd\xd8\x71\xae\xd1\x70\xbc\x4a\x4b\x39\xf9\x2d\x0d\x78\x2f\xf5\x1f\x36\xdb\xc8\xdf\x0a\x65\x87\x51\x47\x88\xb8\x28\xa2\x2b\xb9\xc8\x84\x73\xd8\x23\xf5\x3b\x40\x47\xa7\x12\x18\x69\x67\xb6\xcb\x9d\xb3\x24\x79\x4c\x57\xff\xe7\xb4\x16\xda\x3f\xc7\x9e\x65\xe2\x7f\x35\x5e\x0d\x55\x5d\xb7\xba\x09\x75\x8d\x4b\x07\x17\xc8\xcf\xb5\x8c\xe9\xa6\xcb\x28\xff\x37\x00\x00\xff\xff\xbe\xfa\xfe\x5f\xbb\x06\x00\x00")

func presentation_api_python_entrypoint_py_bytes() ([]byte, error) {
	return bindata_read(
		_presentation_api_python_entrypoint_py,
		"presentation_api/python/entrypoint.py",
	)
}

func presentation_api_python_entrypoint_py() (*asset, error) {
	bytes, err := presentation_api_python_entrypoint_py_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "presentation_api/python/entrypoint.py", size: 1723, mode: os.FileMode(420), modTime: time.Unix(1453872326, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _presentation_api_python_fastnode_py = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x5d\x6f\xdb\x36\x17\xbe\xb6\x7f\x05\xa1\xa2\x6f\xa4\x36\x55\x1b\xa0\xe8\x45\x01\xbf\xd8\xc5\x8a\xb5\x28\xb0\x0e\x49\x87\x0e\xf0\x0c\x81\x96\x28\x99\x8d\x44\x12\x24\x55\xc7\x2b\xfa\xdf\x77\xce\x21\x25\xcb\x1f\x69\x8a\x01\x9b\x2f\x62\xea\xe8\x39\xcf\xf9\x3e\x8c\x65\x67\xb4\xf5\x4c\xbb\x79\x3c\x39\xcf\xfd\x70\xe6\x6e\x3c\xba\xdd\x88\x80\xaf\xe1\xf8\xd9\x69\x35\x9c\xd7\xdc\x89\x57\x2f\x87\xa7\x4e\x76\xc2\xef\x8c\x70\xf3\xf9\xbc\x6c\xb9\x73\xec\x56\x7a\x91\xea\xf5\x67\x51\xfa\xec\xf5\x7c\x56\x38\x6f\x05\xef\xd8\x82\xfd\xaa\x95\x98\xcf\x67\x3f\x11\x0c\xb4\x36\xba\x9a\xcf\x2a\x51\x33\xb7\xd1\xdb\xb4\x6c\xdd\x25\x7b\xf2\xe4\x76\xcb\x6d\xe3\x50\x71\x06\xae\xe4\xce\x57\xba\xf7\xf9\xd6\x22\x69\xb2\x5c\xbe\x7f\xf7\xf1\xcd\x72\x79\xf3\xf6\xc3\x27\xf6\xd8\xad\x56\xf8\xb8\x5a\xfd\xa9\x12\xf6\x98\x7c\xcc\xab\xbe\x33\x2e\x8d\x24\xd9\xbd\xd6\x0a\xd3\x72\xa9\xbc\xb8\xf3\xe8\x5e\xb0\xfd\x85\xb7\xbd\xb8\x64\xe2\xce\x58\xe1\x9c\xd4\x6a\x91\x24\xe4\x07\x06\x94\x93\x8f\x18\xe8\x22\x19\x75\x93\x03\xf4\xfe\x18\xb9\x16\x48\x4d\xa7\x1f\xf2\xe4\x47\xbd\x38\xf2\xdd\x0a\x33\x58\x99\xaa\x9d\xb7\x58\x6b\xdb\x71\x5f\x18\x61\x3b\x49\x30\x17\xac\x76\xba\x12\x64\xa5\xe3\xee\xd6\x41\xad\x52\x38\xcf\x52\xec\x91\xfc\xa6\x78\x77\xfd\xfb\xcd\xf5\x25\xbb\xb0\x17\x60\x62\x14\x7e\x0a\xc2\xed\x81\xf0\x8f\x20\xbc\x03\xe1\x21\xc3\x2f\xd7\xbf\x9d\x32\x04\xe1\x11\x43\x10\x9e\x32\x7c\xf8\xf8\xf6\x94\x21\x08\x8f\x18\x82\x10\x18\x90\x00\x13\x31\xc3\x80\x31\xac\x65\xf2\x2c\x59\x3d\xb9\x7a\x01\x22\x59\xb3\x41\xe1\xe6\xe7\x77\xd7\xe9\x98\x82\x00\x5e\xbe\x58\x01\xfe\xa2\xba\x00\x09\x64\x8d\x49\x30\xb0\x96\xfe\x92\x95\x9b\x8c\x49\xc5\x84\xea\x3b\x61\x39\x74\x25\xa5\x2c\x68\x02\xe7\x5a\xeb\x96\xb8\xd8\xff\x18\xe0\x83\x3c\x52\xca\xa7\x57\x48\x5a\x6e\xd0\x25\x2b\x7c\x6f\x15\xbb\xb8\xc8\x3f\x6b\xa9\x52\x42\x9c\x2f\x9a\xde\x2a\x61\x0b\xc5\x3b\x11\x8a\xd5\xcb\x8a\x68\xe3\x04\x9a\x2d\xe0\x66\xde\xee\xc8\x54\x0f\x06\x40\x92\x37\xc2\x9b\x2d\x20\x53\x44\x43\x30\xf0\x4e\xdc\x95\xc2\x78\xf6\x5e\xec\xde\x58\xab\x2d\x74\xcb\xa8\x01\x69\xd9\xbb\xd4\x33\x88\x17\x25\xe7\x9c\x69\xac\xee\xcd\xc4\x99\xe6\xd0\x99\xc6\x9a\x89\x33\x0d\x50\x83\x04\x9d\x69\x2c\x20\xd3\xe6\x21\x67\x9a\x63\x67\x9a\xef\x39\x53\x49\x5b\x08\x05\xd6\x8a\x8a\x7b\x1e\x1c\x32\xdc\x6f\xa0\x4a\xba\x75\x8b\xe5\x2a\xb8\xa6\x6a\x0d\xb4\x1a\xb7\x09\xf7\x29\x02\xb2\xbd\x81\xaf\x68\x36\x71\xf2\x2f\x91\xbc\x66\xcf\xae\xd8\x71\x5f\xa0\x36\x28\x16\xd4\x1f\x4c\xb4\x4e\xb0\x41\x84\x4a\xd4\xa4\xc9\x64\xa0\x80\x85\x46\xf5\xcc\xa8\x1d\x50\x05\x45\x38\xca\x5a\x8a\x0a\xb4\x60\xa6\xf7\x08\x0f\x6b\x35\x42\x4a\x58\x9f\xfe\x04\x51\x4e\x10\xbc\x2c\x61\xe8\x4f\x20\x7c\x02\xa1\x1e\x92\xc7\x08\xec\x8d\xc9\xfb\xc1\xf5\x49\xc3\x9d\x22\xa9\x01\x4e\x98\x9a\xc3\xf7\x03\xd3\xa4\x5b\xa6\x48\x00\x7e\xbb\x7f\x23\x62\x55\x3d\x5f\xb7\x62\x5f\xd0\x45\x92\xc3\xb2\x2d\xb9\xf1\xb8\x11\xf1\x22\x89\x25\xc6\x23\x15\xb9\xd4\xb0\x12\x95\x77\xa1\xd0\xad\x84\x8b\x43\xda\x58\x6b\x78\xfd\x88\x01\x3d\xef\x5b\x8f\x6a\x7d\xa7\x1c\x4b\xbd\xd6\xac\xd5\xaa\x61\x5e\x33\x67\x44\x29\xeb\x1d\x5c\x84\x23\x0e\x6f\x10\x1c\x74\x27\x9b\x2c\xac\x0b\xa5\x49\xdb\x51\xa3\xe2\x81\x16\x0a\x75\xce\x25\x3b\x68\x01\x78\x0c\x09\x85\x43\xc8\xc7\x0a\x9d\x00\x8f\xe0\x52\xd4\x76\x87\x8a\xab\xb8\x58\xa8\x7f\xd1\xd0\x10\x01\xd1\x63\x3f\x03\xea\x6b\x82\xb9\x83\x6c\x12\xea\xdb\xf0\x26\xef\x4d\x85\xab\x87\x72\x7c\x34\x04\x10\x3d\x46\x1d\xb7\x0a\x0d\x03\xbd\xcd\x42\xc6\x32\x5a\x8a\xa3\x27\x39\x37\x46\xa8\x2a\x45\x55\x4a\xd4\xf1\x65\x07\x48\xaa\x45\x12\x0b\x11\xc7\x2b\x56\x22\x7e\xc7\x62\xe0\x9f\x60\x4d\x0a\xb7\x18\x6d\x7c\xe7\xf2\xa3\x52\x5b\xf1\x40\xa5\xdd\xad\x34\xfb\x4a\x9f\xf3\x10\x28\x1e\x70\x70\xf0\x8a\xb4\x11\x53\xd4\x6d\x5c\x06\xc1\xc0\x3d\x77\xf4\x1e\x3a\xd9\x2e\x84\x9f\x6c\xbd\x5a\xc1\xa8\xc3\x5a\x87\xc4\xea\x02\xda\xa4\x80\xc8\x7b\x0b\x9b\x22\xd6\x19\x77\x0a\xa8\x30\xe9\xa8\x89\x30\x94\x50\xe5\x13\x74\x6a\x70\x01\x19\xdc\x54\xd6\xbb\xad\xf4\x9b\x34\x79\x9e\xc4\xbd\x83\xc6\x9f\xc2\xe3\x53\x93\xe1\x4d\xce\x0c\xf5\x27\x10\x53\x77\xc5\x08\x81\xa5\x92\xa5\x4f\xb3\xd8\x5f\x56\x6b\xb8\xb5\x20\x49\xe0\x7d\x2d\x5b\x41\x4d\x0d\x4d\xb2\xe5\xed\x6d\x98\x0f\x74\x85\xc1\x07\xd1\x35\xbe\x25\xd8\x20\xc5\x0f\x36\x61\x18\xac\x7d\x6b\x05\xde\x3a\x9b\xc0\xe2\x8c\x70\xb5\x4b\x63\x46\xf2\xf8\x9d\x22\x03\x65\x2f\x7a\xce\x3d\x1a\x3a\x8c\x3f\x9b\x9a\xc4\x4f\x8c\x68\x89\xca\x78\x71\x8e\xff\x6b\xe6\x4d\x0f\x0b\xaf\xc0\x33\x31\xd3\x9d\x12\x95\xbd\x06\xbe\x4e\x7f\x19\x93\x3f\x84\x56\x91\x45\xc8\xc3\x8f\x45\x56\xfd\x97\x91\x25\x30\x86\xad\x2c\x39\xf6\xea\xf3\xbb\x67\xe3\xe8\x24\x13\x3d\x6c\x81\x63\x9e\x31\xd8\x71\x8e\xb3\xe3\x88\x47\xc8\x54\x17\xd3\x90\x07\x71\x50\x89\x97\x61\xf4\xeb\xfe\x81\x95\x1d\x6f\x44\x81\xb9\x3a\xb8\x6d\xf7\x53\x56\xc2\x85\xa6\x9a\x38\xb8\xb8\x55\xf6\x83\xfb\x88\x85\x71\x71\xb0\x5b\xf1\x12\x75\x12\xfe\x4b\xaa\x7b\x55\xa2\xae\xc3\x35\xcc\xbf\x68\x59\x31\xa3\xdb\xb6\xf7\x12\x37\xf3\x46\xb0\xb5\xd5\xbc\x12\x16\x36\x0c\xa0\xc5\x1d\xef\x4c\x2b\x22\x19\xb8\x02\x25\x81\x3c\xf3\xc0\xb0\xd5\xf6\x96\xad\x77\x0c\x7f\x2d\xa0\x3a\x57\x11\x84\xd4\xd4\xd5\x97\x48\xa9\x28\x94\x00\x20\xa6\x3d\x07\xbc\x86\xfa\x39\xbe\x73\x2c\x41\x10\x3c\xc3\xcc\x06\x92\x8d\xb0\x22\x09\xc3\x4c\xdb\x19\x5e\x8c\x83\x8c\x83\xca\x34\x54\x20\x4c\x14\xde\x23\x75\xf8\xcf\x2f\x2e\xf2\xf0\xa3\x29\x5f\xbf\x7a\x49\x29\x12\x69\x0d\xe9\xe7\x55\x4a\xeb\x78\xa8\xec\xbd\xe0\xb0\x9d\x4f\x57\x1f\x39\xf6\xe0\xe2\x8b\x25\x19\x0e\xb1\x2c\xc3\xc6\xbf\xa7\xd0\x98\xad\xb3\x25\xfe\x17\x6b\xfa\x8f\x32\x3b\x24\x32\xe8\xb7\x00\xa4\xc8\xd8\xff\xd9\xd5\x0b\xf8\x4c\xf3\x8a\x5f\xcb\xd7\x24\x5e\x9d\xc9\x26\x86\xfc\x40\x32\x29\xf8\xf3\xe5\xf9\x4e\x2e\xad\x68\x40\xbb\xa8\x44\x2b\x3b\xb0\x19\x7f\x6f\x06\xe9\xd9\x2b\x2d\xbc\x4a\x06\xcc\x22\x42\xe7\x7f\x07\x00\x00\xff\xff\x16\x58\xd1\x86\xc5\x0f\x00\x00")

func presentation_api_python_fastnode_py_bytes() ([]byte, error) {
	return bindata_read(
		_presentation_api_python_fastnode_py,
		"presentation_api/python/fastnode.py",
	)
}

func presentation_api_python_fastnode_py() (*asset, error) {
	bytes, err := presentation_api_python_fastnode_py_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "presentation_api/python/fastnode.py", size: 4037, mode: os.FileMode(420), modTime: time.Unix(1453872043, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"presentation_api/.DS_Store": presentation_api_ds_store,
	"presentation_api/README": presentation_api_readme,
	"presentation_api/bash/fastnode.sh": presentation_api_bash_fastnode_sh,
	"presentation_api/python/entrypoint.py": presentation_api_python_entrypoint_py,
	"presentation_api/python/fastnode.py": presentation_api_python_fastnode_py,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"presentation_api": &_bintree_t{nil, map[string]*_bintree_t{
		".DS_Store": &_bintree_t{presentation_api_ds_store, map[string]*_bintree_t{
		}},
		"README": &_bintree_t{presentation_api_readme, map[string]*_bintree_t{
		}},
		"bash": &_bintree_t{nil, map[string]*_bintree_t{
			"fastnode.sh": &_bintree_t{presentation_api_bash_fastnode_sh, map[string]*_bintree_t{
			}},
		}},
		"python": &_bintree_t{nil, map[string]*_bintree_t{
			"entrypoint.py": &_bintree_t{presentation_api_python_entrypoint_py, map[string]*_bintree_t{
			}},
			"fastnode.py": &_bintree_t{presentation_api_python_fastnode_py, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

