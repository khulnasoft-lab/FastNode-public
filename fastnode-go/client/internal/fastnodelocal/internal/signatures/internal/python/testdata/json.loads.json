{"language":"python","callee":{"id":"python;json.loads","kind":"function","repr":"json.loads","type":"function","type_id":"python;","synopsis":"Deserialize s (a str or unicode instance containing a JSON\ndocument) to a Python object using this conversion table.\nIf s is a str instance and is encoded with an ASCII based encoding\nother than UTF-8 (e.g. latin-1), then an appropriate encoding name must be\nspecified.  Encodings that are not ASCII based (such as UCS-2) are not\nallowed and should be decoded to unicode first.\nThe other arguments have the same meaning as in load().","detail":{"parameters":[{"name":"s","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"encoding","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"cls","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"object_hook","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_float","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_int","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_constant","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"object_pairs_hook","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"kwarg":{"name":"kw","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},"kwarg_parameters":[{"name":"strict","default_value":null,"inferred_value":[{"id":"python;","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"return_value":null,"return_annotation":null,"signatures":[{"args":[{"name":"s","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'{}'\"","\"\"{}\"\"","\"'utf-8'\""]},{"id":"python;__builtin__.property","name":"property","examples":null}]}],"kwargs":null,"language_details":{"python":{"kwargs":null}}}],"language_details":{"python":{"kwarg":{"name":"kw","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},"kwarg_parameters":[{"name":"strict","default_value":null,"inferred_value":[{"id":"python;","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"return_annotation":null}}},"details":{"function":{"parameters":[{"name":"s","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"encoding","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"cls","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"object_hook","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_float","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_int","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"parse_constant","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},{"name":"object_pairs_hook","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"kwarg":{"name":"kw","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},"kwarg_parameters":[{"name":"strict","default_value":null,"inferred_value":[{"id":"python;","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"return_value":null,"return_annotation":null,"signatures":[{"args":[{"name":"s","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'{}'\"","\"\"{}\"\"","\"'utf-8'\""]},{"id":"python;__builtin__.property","name":"property","examples":null}]}],"kwargs":null,"language_details":{"python":{"kwargs":null}}}],"language_details":{"python":{"kwarg":{"name":"kw","default_value":null,"inferred_value":null,"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}},"kwarg_parameters":[{"name":"strict","default_value":null,"inferred_value":[{"id":"python;","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false,"synopsis":"","language_details":{"python":null}}],"return_annotation":null}}},"type":null,"instance":null,"module":null}},"report":{"definition":{"filename":"","line":293},"description_text":"Deserialize s (a str or unicode instance containing a JSON\ndocument) to a Python object using this conversion table.\nIf s is a str instance and is encoded with an ASCII based encoding\nother than UTF-8 (e.g. latin-1), then an appropriate encoding name must be\nspecified.  Encodings that are not ASCII based (such as UCS-2) are not\nallowed and should be decoded to unicode first.\nThe other arguments have the same meaning as in load().","description_html":"\u003cbody\u003e\u003cp\u003eDeserialize \u003cem\u003es\u003c/em\u003e (a \u003ca\u003e\u003ccode\u003estr\u003c/code\u003e\u003c/a\u003e or \u003ca\u003e\u003ccode\u003eunicode\u003c/code\u003e\u003c/a\u003e instance containing a JSON\ndocument) to a Python object using this \u003ca\u003e\u003cem\u003econversion table\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cem\u003es\u003c/em\u003e is a \u003ca\u003e\u003ccode\u003estr\u003c/code\u003e\u003c/a\u003e instance and is encoded with an ASCII based encoding\nother than UTF-8 (e.g. latin-1), then an appropriate \u003cem\u003eencoding\u003c/em\u003e name must be\nspecified.  Encodings that are not ASCII based (such as UCS-2) are not\nallowed and should be decoded to \u003ca\u003e\u003ccode\u003eunicode\u003c/code\u003e\u003c/a\u003e first.\u003c/p\u003e\u003cp\u003eThe other arguments have the same meaning as in \u003ca class=\"internal_link\" href=\"#json.load\"\u003e\u003ccode\u003eload()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003c/body\u003e","examples":[{"id":324,"title":"Decode a JSON formatted string to a dictionary"},{"id":4782,"title":"Check if a string is valid JSON"},{"id":334,"title":"Decode a JSON string into a list"},{"id":335,"title":"Decode JSON strings into Python primitives"},{"id":4766,"title":"Decode JSON data into a custom data structure"},{"id":4781,"title":"Escape the double-quotes when encoding an object as a JSON string"},{"id":344,"title":"Decode a JSON string of a custom object using an extended JSONDecoder"}],"usages":[{"code":"json.loads()","filename":"/home/jansorg/self-employment/customers/khulnasoft.com/source/python-test/TestModule/test.py","line":8,"begin_bytes":57,"begin_runes":57},{"code":"json.loads()","filename":"/home/jansorg/self-employment/customers/khulnasoft.com/source/python-test/TestModule/test3.py","line":2,"begin_bytes":12,"begin_runes":12}],"total_usages":2,"links":[{"title":"Parsing values from a JSON file?","url":"https://stackoverflow.com/questions/2835559","stackoverflow":{"score":552}},{"title":"How to get string objects instead of Unicode ones from JSON in Python?","url":"https://stackoverflow.com/questions/956867","stackoverflow":{"score":181}},{"title":"Saving utf-8 texts in json.dumps as UTF8, not as \\u escape sequence","url":"https://stackoverflow.com/questions/18337407","stackoverflow":{"score":139}},{"title":"Python 3, let json object accept bytes or let urlopen output strings","url":"https://stackoverflow.com/questions/6862770","stackoverflow":{"score":94}},{"title":"Reading a JSON file using Python","url":"https://stackoverflow.com/questions/20199126","stackoverflow":{"score":79}},{"title":"TransactionManagementError \"You can't execute queries until the end of the 'atomic' block\" while using signals, but only during Unit Testing","url":"https://stackoverflow.com/questions/21458387","stackoverflow":{"score":79}},{"title":"Displaying better error message than \"No JSON object could be decoded\"","url":"https://stackoverflow.com/questions/14899506","stackoverflow":{"score":75}},{"title":"Parse JSON in Python","url":"https://stackoverflow.com/questions/7771011","stackoverflow":{"score":63}},{"title":"How I can I lazily read multiple JSON objects from a file/stream in Python?","url":"https://stackoverflow.com/questions/6886283","stackoverflow":{"score":51}},{"title":"python: single vs double quotes in JSON","url":"https://stackoverflow.com/questions/4162642","stackoverflow":{"score":47}},{"title":"UnicodeDecodeError: 'utf8' codec can't decode bytes in position 3-6: invalid data","url":"https://stackoverflow.com/questions/6180521","stackoverflow":{"score":45}},{"title":"Python: json.loads returns items prefixing with 'u'","url":"https://stackoverflow.com/questions/13940272","stackoverflow":{"score":44}},{"title":"Converting JSON String to Dictionary Not List","url":"https://stackoverflow.com/questions/19483351","stackoverflow":{"score":42}},{"title":"Handling lazy JSON in Python - 'Expecting property name'","url":"https://stackoverflow.com/questions/4033633","stackoverflow":{"score":42}},{"title":"How to get JSON from webpage into Python script","url":"https://stackoverflow.com/questions/12965203","stackoverflow":{"score":41}},{"title":"Python JSON decoding performance","url":"https://stackoverflow.com/questions/706101","stackoverflow":{"score":37}},{"title":"Django Rest Framework and JSONField","url":"https://stackoverflow.com/questions/22434869","stackoverflow":{"score":32}},{"title":"Pylint showing invalid variable name in output","url":"https://stackoverflow.com/questions/10815549","stackoverflow":{"score":31}},{"title":"JSON to pandas DataFrame","url":"https://stackoverflow.com/questions/21104592","stackoverflow":{"score":28}},{"title":"JSONDecodeError: Expecting value: line 1 column 1 (char 0)","url":"https://stackoverflow.com/questions/16573332","stackoverflow":{"score":28}}],"total_links":50},"signatures":[{"args":[{"name":"s","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'{}'\"","\"\"{}\"\"","\"'utf-8'\""]},{"id":"python;__builtin__.property","name":"property","examples":null}]}],"kwargs":null,"language_details":{"python":{"kwargs":null}}}]}
