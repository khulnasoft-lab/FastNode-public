// Code generated by go-bindata.
// sources:
// templates/provision.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesProvisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x7d\x73\x1b\x37\xce\xff\x7f\x3f\x05\x1e\xd9\x69\xfa\x12\xee\x5a\x89\x5f\x12\xb7\xea\x33\x3e\x5b\xf5\x79\xe2\x46\xae\x64\x37\xd3\xbb\xce\x6c\x28\x12\x92\x78\xde\x25\xf7\x48\xae\x65\xc5\xf1\x77\xbf\x01\x77\xb5\xd2\xca\x2f\x69\x93\x19\x4b\x04\x40\x00\x04\xc1\x1f\x00\x6d\xfd\x5f\x32\x56\x3a\x19\x73\x37\x8b\x22\x87\x1e\x18\x46\x11\x8a\x99\x81\xce\xb1\xd1\x13\x35\x2d\xad\xd2\x53\x98\x18\x0b\x16\xa7\xca\x68\xb8\xbb\x8b\xcf\x8d\xe0\x5e\x19\x7d\x7f\x0f\x16\x33\xe4\x0e\x89\x3a\xac\xbe\xde\xdf\x77\xa2\x48\x70\x0f\x3f\xfd\x04\x2f\xfb\x83\x5f\x5e\xc2\xcf\x90\xa0\x17\x89\x5b\x38\xe1\xb3\x58\x26\xfb\x3b\xec\x5a\x79\x8c\x85\xd1\x93\x68\xe2\xe2\x89\xca\x90\xe5\xfc\x16\x7a\xd0\xdd\xd9\x7d\xbb\x77\xb0\x4f\x54\x6d\x53\x53\xa0\x5e\x23\x6a\xf4\xb1\x9e\xa4\xc2\x68\xed\x2d\x17\xd7\x69\x7b\x0f\xb1\x55\x71\xb3\x1b\x7b\x51\xa4\x39\xe6\xd0\x83\x83\xb7\xfb\xbb\x6f\x5e\x43\x77\xff\xdd\x41\x77\xef\x35\x74\xdf\xed\xee\x1d\xbc\x7e\xdb\x96\xb4\x95\xe8\xee\xce\xbb\xfd\xea\x4f\x77\xff\xe0\xe0\xe0\x75\x77\x43\xe1\xfc\xeb\x62\xaa\x48\x33\x23\x78\x96\x16\xc6\xfa\xd4\x72\x3d\xc5\xe0\xde\xeb\x5d\xd8\xdf\xdb\x7b\xb3\x57\x1d\x00\xfd\x44\x65\x1e\x6d\xfb\x28\x64\xc2\xab\x1c\x4d\xe9\xc3\x67\x3a\xe7\xca\x87\xdd\x7f\x75\x17\x3a\xcf\xc7\x99\x72\x33\x94\xd0\x83\xfd\x9d\x9d\xb6\xff\x2e\x33\xf3\xd4\x79\x6e\x7d\xca\x27\x1e\x6d\xaa\x64\x46\xee\x6d\x88\xf9\x79\x6a\x51\x2c\xc4\x93\xbc\xd2\xad\x38\xc2\x58\x8c\x9d\xc9\xf9\x2d\xb9\x44\x56\xc3\x31\xfb\x83\x5f\xa2\x68\x0b\x46\xe8\xcb\x02\xa4\xb2\x28\xbc\xb1\x0a\x1d\x28\x0d\x89\xc4\x9b\xc4\xc9\x31\x7c\x3b\x9f\x29\x31\x03\xe5\x80\x97\xde\xe4\xdc\x2b\xc1\xb3\x6c\x01\xb9\x29\xb5\x47\xf9\x5d\x94\x5f\x4b\x65\x21\xc9\xb5\x4f\x28\x5b\xa2\x4c\x03\x73\xab\x35\x24\x37\xdc\x56\x1c\x31\x33\x73\x0d\x6c\x08\xe5\xb8\xd4\xbe\x3c\xac\x3e\xd6\xb6\x3e\x25\xd0\x68\xa8\x6c\xb1\x62\xb5\x27\xc9\xcc\x74\x6d\x55\xa7\xf9\x9a\xfd\xc4\xbd\x11\x5c\xcc\x70\x8d\x22\xd0\xfa\x75\x09\x9f\x17\x14\x87\x33\xed\x3c\xcf\x32\x90\x58\xa0\x96\xa8\x85\x42\x47\x74\x89\x3c\x83\xb9\xf2\x33\xe8\xee\xc6\x3b\xbb\xe0\x0a\x14\x6a\xa2\x04\xf0\xc2\xb3\x29\x7a\x50\xce\x95\x18\xb9\x52\x9a\x86\x24\x32\xe4\xba\x22\xe5\x37\xd5\x01\x32\x35\x4e\x78\xe1\x93\x4c\x39\xb2\x4e\x46\x2b\x7e\x73\xa6\x07\x52\x49\xc1\xad\x57\x3c\x7b\x4c\x77\xb4\x05\x05\x9f\xa2\x95\xa5\x5f\x44\x73\xa2\xb3\x01\x30\x98\x79\x5f\x1c\x26\x49\xc1\xc5\x35\x9f\xa2\x8b\x1b\x99\x58\x98\x3c\x39\xbd\x38\x65\xef\xfb\x7f\xb0\x86\x0a\x5f\x82\xda\x6b\x5c\x00\x97\x12\x58\x0d\x29\x12\xc7\x5f\xd1\x54\x48\x3e\x45\xed\x41\xe2\x38\xe9\xc0\xcf\x01\x38\xc8\x6f\x67\x4a\x2b\xd0\xc5\xe4\x7f\x2c\x97\x62\x61\x49\x2e\x3b\x93\x23\x3d\x04\x07\x7e\x86\x70\x93\x3b\x90\x46\xbf\xf4\x40\xfe\x53\xec\x89\x5a\xdf\x7a\x61\x55\xce\xed\x02\x2c\x16\xc6\xa9\x3a\x33\xe7\x33\xd4\x50\x58\x73\xa3\x9c\x32\x5a\xe9\xe9\x2b\x70\x06\xe6\x08\x39\xd7\x25\xe5\x65\xb4\x15\x0e\xe2\x67\x98\xc3\x0c\x2d\x82\x37\x90\xf3\x6b\x04\x57\xd2\x62\x86\x4d\x18\xe7\xc6\x5e\xbb\x3a\xb2\x52\x32\x22\x37\xa6\x16\x90\x73\xa5\x9f\x64\x96\x5a\xdd\xa0\x75\xf8\xa4\x80\x45\xe7\xad\x12\x1e\xe5\xd3\x06\xca\xcc\xd7\x5a\xda\xd7\xcb\x16\x50\x16\x92\x7b\x6c\xc7\x0b\x6f\x50\x57\x59\x18\x0e\xf1\x40\xe1\xab\xb5\x74\x84\x52\xf3\x71\x16\xce\x3e\x51\x3a\x44\x03\x96\xf7\xb8\x0c\xd8\x7f\x4a\xe7\xa3\x2d\xb8\x46\x2c\xc0\xdb\x05\x15\x8f\x52\x7b\x95\x81\xf2\x20\x0d\xba\xa8\x5a\x6d\xba\xa6\xea\x47\x32\xf3\xa6\x80\x65\x12\xd4\x9f\x4c\x69\x8f\x53\x1b\x4a\x8e\x83\x62\xe1\x67\x46\xb3\x42\x15\x91\x34\x11\xc0\xb3\x91\x7e\x9a\xdd\xc4\xfa\x69\x91\xb5\x68\x3f\x63\x66\x15\x6f\x78\x70\xaa\x3a\xe0\xd2\x68\x5c\x47\x82\x4c\x8d\x3d\x6a\x67\xec\x24\x33\xf3\x48\x94\x36\x03\x76\x0e\x1d\x7a\x19\xee\x30\x49\xdc\x1b\x56\x3a\x36\x47\xe7\x59\x37\xe6\x39\xff\x6c\x34\x9f\xbb\xf0\x3c\x08\x57\x98\xe4\x9e\x27\x2b\x05\x49\x4b\x1d\x13\x45\xc9\x32\xa5\xcb\x5b\x76\xfb\x76\x3f\xdd\xdf\x65\xdd\xf8\x5d\xbc\x13\x7b\x6e\xe3\xe9\xe7\x0e\x7c\xa9\x9c\xf4\xdc\x02\x3b\x86\xa4\x74\x36\x09\x45\x0b\xd8\xed\xe7\x2a\x61\x32\x29\x42\xe5\x0f\x50\xa0\x8a\xa8\x50\x45\x73\x3d\xee\x8d\xc8\x65\x0d\xee\x70\xf4\x71\x04\xc2\xa2\x44\x4d\x60\xe2\x42\x93\x50\x09\xe0\x2d\x95\x40\x12\x48\x8f\x8e\x8f\xfb\xa3\x51\xfa\xbe\xff\x47\x7a\x76\xd2\xeb\xdc\xdd\xc5\x47\x1f\x47\x67\x27\xd4\x25\xac\x49\x8d\xfa\xc7\xc3\xfe\xe5\x9a\xf0\x52\xf2\x3d\x2e\x36\x44\x87\xfd\xd3\xb3\xc1\x87\x25\x7f\x18\x9a\x92\xd0\x73\x6c\xc1\x29\xa1\xd8\xba\x43\xd6\xe4\xb4\x27\x3a\x1e\x7c\xf8\xe5\xec\xb4\xe7\xde\x1c\x26\x55\x08\x1d\x0a\x8b\xde\x25\xd5\x49\x13\xfe\xb9\xb4\xc8\x5a\x9d\x4d\xec\x66\x51\x38\x4c\xc0\x90\xed\x4a\xc3\xaa\x64\xd4\x3b\x49\x4a\xcc\x72\x23\xe1\x87\xdb\x47\x99\x15\x6e\x3d\xca\xaa\x1d\x1e\x9e\x8c\x80\x2a\x07\x41\x3f\xf7\xe8\xd6\xac\x3e\xf4\xd7\xb9\x2c\xb1\xd2\x31\x61\xf2\xb1\xd2\x28\x99\xe0\x6c\x5c\x6a\x99\x61\x5c\x60\xbe\x6e\x86\x6a\xd1\x33\xa2\x4b\xeb\x63\xa5\xb9\x5d\x44\xc3\xfe\x79\xff\x68\xd4\x4f\x4f\xce\x86\xbd\x95\x92\x65\xd5\x4b\xd6\xbb\xbb\x55\xb1\xdc\x5e\xdb\xf5\xa8\xd7\x12\x8b\xcc\x2c\xda\xdb\x69\x71\x61\x8d\x40\xe7\xee\xef\x5b\x2a\x5a\x9c\x55\x54\x9f\x16\x69\x7a\x8c\xcc\x4c\xa7\x04\x34\xde\x40\xc1\x0b\xb4\xde\x72\x95\x3d\xda\x83\x66\x66\x9a\x52\xbb\xe9\xe2\x45\x9e\x45\xe1\xdb\x61\x04\xc0\xea\x22\x69\xa6\x89\xcc\xd1\x4d\xdb\x24\xb7\x70\x99\x59\xa3\x2d\xfb\x83\xa4\x74\x68\x99\x36\x12\xe3\x67\xf8\x79\x79\x1b\xd8\x12\x9d\x57\x3a\x64\x17\x99\x9c\x19\xe7\x0f\xe1\xe2\xe8\xa2\x3f\xbc\x1c\x1e\x9d\x9d\xa7\xff\x1c\x8c\x2e\x23\x00\xca\xf3\x16\xfd\x62\x30\x0c\x74\x6b\xbc\x11\x26\x3b\x04\x9f\xb9\xd0\x62\x39\x94\xc0\x14\x30\x84\x8e\xfb\xb2\xa1\xe8\xcb\xf6\x26\xa1\xf3\x58\x00\x9e\x52\x41\x36\x5b\x2a\x02\xe1\x51\x15\x75\x1e\x59\xcc\x8d\xc7\xb4\x0a\xd5\xeb\x3a\xad\x02\x22\xcc\xb9\x17\x33\xba\x9d\xcc\x4c\x5d\x74\x75\x79\x76\x3e\xda\x48\xb3\xd2\xab\xcc\xad\xa5\x55\x23\xf3\x68\x52\x05\xe9\xa4\x6d\xaf\xbd\x4c\x03\xfc\xa5\x3c\x97\xfb\xbb\x35\xee\xad\x2b\x15\x72\x7d\x45\x40\x78\xfb\x79\xd2\x3e\xc0\xf7\xf5\x36\x92\x6d\x31\x22\x51\xb4\x09\x6b\x08\x4a\x83\x14\x85\xe3\xa8\x28\xb2\x05\x54\xd3\x0e\xa5\xa4\x28\xad\xa5\x6a\xe6\xd0\x51\x73\x11\xd5\x1c\xc6\xdc\xc2\xf9\xea\x25\x5e\x85\x3a\x01\x34\xcf\x84\x99\x27\x84\x37\x44\x6f\x73\x73\x99\xa9\x5c\x79\x60\xba\x19\x7b\xc8\xa2\x94\x14\x5d\x6b\x3c\x69\xa9\xd1\xbb\x95\xfe\x4b\xd4\x47\x04\xc6\x9b\x6b\xac\x36\x54\x73\x58\xd4\x4e\xdd\xf5\x87\x46\xe9\x0b\x77\x11\x00\x40\xae\x9c\x53\x7a\x6a\xae\xc3\xca\xa9\xcf\x08\xdd\xd3\xf0\xbd\x36\xbe\x17\x16\xc2\xe4\x85\x45\xe7\xea\x45\xb1\xf0\xb6\xd4\x84\x6e\xb0\x05\x7e\xa6\x1c\xf5\x12\x1a\x51\xa2\x0c\x87\xa4\x77\x42\xcf\x28\x44\xcb\x68\xaf\x74\x89\x30\xb7\xca\xd7\x8f\x9a\xfa\x0c\xc7\x73\x0c\x71\x89\xee\x97\x03\x06\x1d\x5b\x58\xa3\x3d\x1f\x07\x35\xcd\x89\xea\x6e\x73\x07\xbe\xaf\xff\x57\x75\xad\x89\xd0\x23\xe7\xef\x10\x42\x34\x11\xc8\x17\xa4\x37\x5a\x2a\x7f\xc0\xd8\xc4\x16\x5b\x6a\x42\xf4\xd6\x30\xbd\x05\xa3\x0a\xfb\x45\x3d\x47\x73\xe5\xe9\xf6\x9f\x2d\x08\x35\x4c\xae\x66\x81\x66\x33\xe1\xc6\xb2\x0c\xd2\x83\xfe\x70\xf4\x6b\xbf\xb7\xfd\x2d\xc1\x88\xe6\x39\x7e\xb7\xe4\xd5\xe5\xb1\x55\xcb\x56\xbc\x80\xa4\xbd\x16\x9c\xd7\xbc\x8b\xe1\xe0\xf7\xb3\x93\xfe\xb0\xd7\x09\xc5\xb0\x29\xb9\xe7\x67\xff\x18\x1e\x5d\x0e\xd2\xd1\xe0\x6a\x78\xdc\x6f\xeb\x8d\x5b\x59\xb2\xd2\xfa\xc1\x9c\x18\x4f\xa4\xed\xa5\xa7\x8d\xb6\xc1\xf1\xd1\x79\xfa\x71\x30\x7c\xdf\x1f\xa6\x97\x47\xa7\x8f\xba\xd2\x12\x1a\xf6\x7f\xbb\xea\x8f\x2e\xd3\xdf\xae\xfa\x57\xfd\x5e\x78\x68\x8c\x6b\x9e\x2d\x9c\x72\xcc\xe2\x7f\x4b\x6a\x93\x56\x5a\x7e\x3d\xd9\x7b\x52\xd1\xe8\x62\xf0\x61\xd4\x7f\x4a\x93\x2b\x8c\x76\xf8\x94\xaa\xb5\xce\xa3\xdd\x78\x34\x02\xff\xba\x1a\xf6\xd3\x47\xa3\x4f\xa9\x40\x83\xf7\x06\x94\xb4\x71\x84\xb1\xea\xaa\x29\xc5\x7b\x0f\x71\x16\x18\x93\x38\x2e\xa7\x2c\x33\x53\x26\x26\xd3\x5e\x53\x9d\x5a\x6a\x42\xa5\x89\xb6\xe0\xa4\xcc\x0b\x08\x50\xe1\xea\xdf\x5d\x1a\xe4\xe0\xad\x4c\x0f\x65\x2a\x70\xc2\xd6\x25\x36\x3d\x14\xaa\x7f\xbd\xa9\xf5\x0f\x4b\x4d\x4f\x0e\x6f\xd0\xc6\x30\xc4\x10\x81\x50\x7d\xa7\x68\x21\x0c\x80\x6a\x02\xe1\x49\xcf\xb9\x0b\x8d\x34\xb7\xd4\x47\x57\xcd\xff\xa7\xaf\xb4\x18\xed\x1e\xe1\x9b\x9f\x37\x7d\xd9\x04\xa7\x4f\x3f\x42\x18\x05\x00\xaa\x87\x8f\xb7\xca\xa3\xac\xa6\x1a\x8b\xbe\xb4\x1a\x04\xf9\xb2\xfd\xff\x3f\x2e\x7d\x21\x64\x69\x59\x89\xe3\xb8\x13\x05\x1d\x5b\x70\x49\x93\x91\xe7\x79\x01\x5c\x4b\x70\xfc\xa6\x9a\xf0\x96\x58\x5c\x15\x7b\x80\x93\xa3\xcb\x7e\xef\x53\x40\xee\x1f\x3a\x2f\x72\xf6\x42\xb2\x17\x7f\xb0\x17\x97\x9d\x4f\x15\x56\xde\x7c\xc5\xed\xe7\xd8\xdb\xa4\xbc\x8a\x76\xe5\xd3\x47\xab\x3c\x82\x29\x7d\x85\x86\x9e\x8b\x6b\xf0\x96\x0b\xac\xba\xdc\xe0\x9f\xe5\x6e\x06\x4a\x7b\x03\x1c\x1c\x16\xdc\x92\x6b\x21\xb9\x68\x32\x23\xfc\x27\xec\x1d\x2f\xa0\x74\x01\x59\xb9\xa0\x4b\xb3\xc8\xab\x51\x8e\x24\x95\x86\x70\xab\x0e\x5f\x85\x19\x8f\xe4\x28\x08\x85\x55\x3a\x04\xad\x2c\x96\x88\x9c\x71\xe7\x61\x1a\x70\x95\x6e\xdd\x94\xbe\x28\x7d\xad\xda\xa1\x7c\x45\x42\x4b\x6d\x44\x53\x1e\xf8\xb4\x1a\xca\x20\xd8\xfe\x2b\xc7\xa7\xca\x45\x4d\x8a\x86\x97\xdd\x57\xc9\x9f\xff\xae\x7e\x84\xec\x25\x05\xd5\x34\x52\xb2\x99\x1b\x21\x08\xec\xf9\x58\x8e\x90\x86\x57\xb3\xf6\x43\x07\xd1\xef\xee\x28\x69\xe3\x33\x77\x61\x8d\x2c\x05\x3d\x5e\xb8\xbf\x0f\xac\x42\x32\x47\x7b\xfe\x0c\x2b\x00\x76\x0d\xdb\x17\xa7\xe9\xa8\x3f\xfc\xfd\xec\xb8\x4f\xf3\xca\x8a\xe5\xc1\x5b\x15\x22\xd2\x90\x24\x74\xb6\xdb\x38\x0a\xdc\x43\x03\x8e\x20\x15\x85\x6b\x95\x99\x9d\xd5\x56\x05\x9d\xbf\x07\xb9\xa4\x2b\x7d\x54\xd5\x04\x3a\x75\xf4\x5a\x1a\x37\x25\x82\xba\x16\x2e\xb7\x25\x8a\xca\x7a\x6f\xdd\x91\xb6\xc4\xb2\x26\xf5\x9a\x13\xb6\xf9\xd4\x08\x52\xe9\xa2\xbc\x63\x02\xba\x3b\xf4\xef\x6f\x5c\xe3\x77\x9d\xe5\x7d\xd1\x9d\xd4\x57\xe4\x32\xc4\x02\xba\x3b\xd5\xb0\x1d\x3a\x84\x66\x84\xa8\xcb\xb3\x36\xb3\xb2\x80\x38\xa9\x96\xf0\xcd\x66\xea\x84\x4e\x55\x56\x20\x0a\xdf\x44\xff\x0b\x00\x00\xff\xff\x51\x5f\x46\x87\x1b\x17\x00\x00")

func templatesProvisionShBytes() ([]byte, error) {
	return bindataRead(
		_templatesProvisionSh,
		"templates/provision.sh",
	)
}

func templatesProvisionSh() (*asset, error) {
	bytes, err := templatesProvisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provision.sh", size: 5915, mode: os.FileMode(420), modTime: time.Unix(1548550970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/provision.sh": templatesProvisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"provision.sh": &bintree{templatesProvisionSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

