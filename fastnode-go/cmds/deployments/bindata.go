// Code generated by go-bindata.
// sources:
// templates/common-userdata.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommonUserdataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x59\xff\x77\xdb\xb6\xae\xff\x5d\x7f\x05\xae\x93\x6e\x77\x5b\x25\xd9\xf9\xd6\xce\xab\xfb\x5e\xd6\xb8\x59\xce\xda\x26\xd7\x4e\xb7\xb3\xd7\xec\xb8\xb4\x08\xcb\x7c\x91\x48\x8d\xa4\x62\xbb\x75\xfe\xf7\x7b\x40\x4a\xb6\xec\x7c\x69\x9b\x9e\x53\x9b\x24\x08\x02\x20\xf0\x21\x00\xef\xfc\x2b\x1e\x0b\x19\x8f\x99\x99\x06\x81\x41\x0b\x21\x06\x41\xc2\x2c\xbc\x78\x01\xdf\xf7\xcf\x5f\x7f\x0f\x2f\x21\x46\x9b\xc4\x66\x61\x12\x9b\x45\x3c\x3e\x6a\x87\xd7\xc2\x62\x94\x28\x39\x09\x26\x26\x9a\x88\x0c\xc3\x9c\xcd\xa1\x07\x9d\xf6\xc1\xf3\xc3\x67\x47\x34\x2b\xf5\x48\x15\x28\x1b\x93\x12\x6d\x24\x27\xa3\x44\x49\x69\x35\x4b\xae\x47\x9b\x7b\x68\x59\x14\x37\x07\x91\x4d\x8a\x51\x8e\x39\xf4\xe0\xd9\xf3\xa3\x83\xfd\x3d\xe8\x1c\xfd\xfc\xac\x73\xb8\x07\x9d\x9f\x0f\x0e\x9f\xed\x3d\xdf\xa4\xd4\x9e\xf4\xa0\xfd\xf3\x91\xff\xaf\x73\xf4\xec\xd9\xb3\xbd\xce\x16\xc3\xd9\x97\xc9\x44\x31\xca\x54\xc2\xb2\x51\xa1\xb4\x1d\x69\x26\x53\x74\xe2\xed\x1d\xc0\xd1\xe1\xe1\xfe\xa1\x57\x00\xed\x44\x64\x16\xf5\xa6\x2a\x74\x84\x15\x39\xaa\xd2\xba\xcf\xd1\x8c\x09\xeb\x76\x7f\xed\x2e\x34\x96\x8d\x33\x61\xa6\xc8\xa1\x07\x47\xed\xf6\xa6\xfc\x26\x53\xb3\x91\xb1\x4c\xdb\x11\x9b\x58\xd4\x23\xc1\x33\x12\x6f\x8b\xcc\xce\x46\x1a\x93\x45\xf2\xe0\x5a\x69\xd6\x2b\x89\xd2\x18\x19\x95\xb3\x39\x89\x44\xa7\x3a\x35\xfb\xe7\xaf\x83\x60\x07\x5e\x2b\x9d\x33\x0b\x4c\x72\x30\x68\xcb\x02\xec\x14\x41\x48\x63\x99\x4c\x10\x8c\x55\x1a\x03\x31\x81\x7f\xc1\xc7\x89\x90\x3c\x97\x16\x42\x2d\x15\x0c\xcf\xdf\x0f\x5e\xf5\x21\xe6\x78\x13\xcf\x6f\xf8\x98\xdc\x87\xbe\xcb\x32\xcb\x3e\xfe\x42\x4c\x64\x00\x00\x20\x26\xf0\xe1\x03\x84\xd8\xa0\xfc\xfb\xef\xc6\x3a\xfd\xe5\xd7\x13\x03\xa1\x05\x9c\xdb\x83\x35\xdd\x7a\x59\x95\x74\x2a\x6b\xd0\x73\xa1\x21\xce\xa5\x8d\xc9\x43\xdd\xfc\x44\x04\x13\x41\xfa\x9c\xa2\x85\x82\xa5\xa8\x79\x69\x17\x51\x14\xec\xc0\x2c\x25\x77\x3f\x87\x10\xa6\xd6\x16\xdd\x38\x2e\x58\x72\xcd\x52\x34\xd1\x9a\x2e\x51\x79\x7c\x7a\x71\x1a\xfe\xde\xff\x2b\x5c\xcd\xc2\x12\x58\x61\xc3\x6b\x5c\x00\xe3\x1c\xc2\x60\x07\x30\x99\x2a\x68\x71\x1c\x7f\x81\x57\xc1\x59\x8a\xd2\x02\xc7\x71\xdc\x82\x97\x2e\xb2\x58\x61\x63\xa3\x4a\x9d\xa0\x89\x32\x61\x6c\xc4\x6b\x32\x37\x24\xe1\xcf\xc8\xee\x59\x06\x46\xe5\x08\x76\x2a\x64\x6a\x02\x12\xc1\x69\xb0\x80\xb2\xe0\xcc\x62\x73\x46\x54\x1b\xa6\x56\x15\x50\x2c\xec\x54\xc9\xb0\x10\x05\xec\x40\x2d\x41\xf5\x19\x0a\x69\x31\xd5\xcc\x0a\x25\x4d\x40\x24\xf5\x56\xb3\x9f\xe4\xbc\x79\x78\x26\xc6\x16\xa5\x51\x7a\x92\xa9\x59\x90\x94\x3a\x83\xf0\x0d\xb4\x48\x61\xd3\x8d\x63\xb3\x1f\x96\x26\x9c\xa1\xb1\x61\x27\x62\x39\xfb\xa4\x24\x9b\x19\xa7\x35\xdd\x46\xc8\x99\x65\xf1\x9a\x41\xbc\xc1\x2e\x4c\x8a\x32\xcc\x84\x2c\xe7\xe1\xfc\xf9\xd1\xe8\xe8\x20\xec\x44\x9d\xc3\xa8\x1d\x59\xa6\xa3\xf4\x53\x0b\x96\x60\x4a\xae\xc0\x32\x0d\xe1\x2b\x88\x4b\xa3\x63\x17\xad\x10\xce\x3f\x05\x6e\x29\xe3\x84\x48\x22\x25\x91\x87\xce\x63\xb9\xd0\x98\x58\xa5\x05\x9a\x20\x93\x10\x9a\xb5\x6f\x40\x7c\xc3\xb4\xf7\x12\xef\x35\x61\xb1\x5e\x8c\x33\x95\x36\x46\x1a\x33\x64\x06\x1b\xbb\x63\xb3\x9f\xb0\x64\x8a\x8d\x99\x04\xb5\x6d\x52\xd8\xbc\xa8\xbd\x6e\x70\x32\x04\x5a\x16\x13\x91\x30\x8b\x26\x70\x96\x05\xba\x29\xb3\xdf\x8d\xbd\x75\x0c\x26\x1a\xad\x89\x8d\xc9\x62\xcd\x4d\x98\xa8\x7c\x2c\x24\xf2\x30\x61\xe1\xb8\x94\x3c\xc3\xa8\xc0\x7c\x2d\xb6\x3f\xf0\x11\xd2\xfa\xf4\xb1\x90\x4c\x2f\x82\x41\xff\x4d\xff\x78\xd8\x1f\x9d\x9c\x0d\x7a\x6b\x26\xb5\x6a\xf1\xe7\xcf\xd1\xc0\x7f\xff\x55\xc8\xdb\xdb\xb5\x51\x76\x1b\x1b\xef\x15\x9c\x63\x91\xa9\xc5\x1d\x0e\x34\xbe\xd0\x2a\x41\x63\x6e\x6f\x37\xb8\x6c\xac\x04\xc9\x34\x57\x1c\x7e\x9a\x3f\x42\x52\x29\xe2\x6f\xb7\xf4\xae\x1a\xbc\x3a\x7f\xf7\xfa\xec\xb4\x77\xd7\x80\x9e\xcc\x8b\x93\x0a\x25\x6f\x6f\x23\x33\x6d\x48\xbe\xeb\x77\x36\x2d\xe9\x76\x10\xd5\x4a\x98\xfb\x16\x83\x1d\xb8\x40\x9d\x0b\x63\x5c\xa8\x24\x53\x35\x93\x10\x0e\xa0\x1c\x97\xd2\x96\x5d\xff\xd1\x40\x9f\x87\x08\x56\x8e\x17\xf8\xa0\xbf\xff\xb0\xfb\x9e\x60\xcb\x43\x17\xb3\x35\x1d\x8f\x0f\xdb\xed\xd0\xa0\xbe\x41\x9d\xa9\xd4\xf8\x27\xf9\x85\x67\xfb\x32\x00\xf8\x5f\xbb\x28\x10\x2c\x13\x59\x00\x50\x30\x3b\x6d\x9c\x95\xa9\x34\x2e\x0d\xea\x30\x2f\xe7\x51\xa6\x52\xa2\x50\x66\x44\xaf\xb9\xa7\x22\x82\xd5\x89\x4d\xca\xa8\x50\x26\x00\xb0\x2c\x85\x2d\x06\x2f\x0a\xa6\x8d\x3b\xb9\x3e\x5b\x2a\x49\x38\xfc\x22\xae\x56\x5e\xc4\xb5\x74\xdf\x2c\xa7\x54\x1c\xbf\x52\xd0\x9a\x74\x5b\xd2\x06\x8b\x6f\x13\xd5\xbf\xde\x9b\x4c\xd6\x82\xa7\x1a\x0b\xda\x89\xf3\x24\x2b\x79\xc5\x94\x5e\x87\x1c\x8d\x61\x29\x06\x6e\x62\x07\x5a\x06\x9d\xf3\x40\xa6\xd2\x14\x39\xa8\xd2\xb6\xba\xf0\x4a\xe5\x79\x29\x85\x5d\x00\x6a\xad\x34\xcc\xa6\x28\xdd\x49\x20\x4c\x83\xb2\xe6\x81\x79\x61\x17\x60\xd5\x35\x4a\x20\x48\x6d\x75\x61\x80\xff\x94\x68\x2c\x70\x85\x06\xa4\xb2\x20\xa4\x13\xa4\x41\xb5\x25\x41\xab\x0b\xc3\x4a\x16\x3e\x86\x4c\xa9\xeb\xb2\x30\x50\x30\x6d\xa1\x53\x93\x92\x08\x26\x4a\x55\x77\x7f\x7f\xff\x11\xfa\xbd\x9a\xfe\x86\x65\x25\x1d\xa9\x20\x53\x32\x85\x89\xd2\xe0\xac\x93\x4c\x99\x66\x09\x99\xef\x86\xe9\x85\x90\x69\xab\x0b\xef\x65\x92\x21\x73\xba\x6a\xf7\xa0\x19\x52\x36\x51\xb9\xa0\x9d\x5a\xe5\x35\xd3\x0f\xa7\xfd\xcb\xe5\xc5\xf9\xf0\xf2\xef\x9f\xe0\xc3\xd5\x90\xfe\xdf\x5b\xb6\xff\x6e\x75\xe1\x58\x2e\x00\x25\x2f\x94\x90\x16\xec\x94\x59\xd0\x68\x0a\x25\xb9\x81\x99\xb0\x53\xd8\x9b\xcf\xe1\xdf\x4a\x43\xfb\x87\x9a\x57\xcc\x0a\x11\xb3\x24\xa1\xb4\x21\x66\x25\xa5\x1a\xd6\x21\x32\x6f\x75\xe1\x2c\x95\x4a\x63\xc5\xc3\xa0\x13\x02\x36\x88\x56\xa7\xd5\xfc\x26\x68\x13\x7a\x8a\xc1\x90\x7d\x5e\xd7\x23\xff\x2c\x09\xc9\x71\xee\x4c\xef\x59\x99\xfd\x0d\x31\xc6\xe5\x64\x82\xba\xd5\x85\x5f\xdd\x97\x15\xef\xa7\xee\xfe\x12\x56\xa6\x53\x0b\xe3\x05\x28\x3b\x45\xed\x72\x0a\xd0\x98\xe2\x1c\x8c\xa0\xf4\x4b\x38\x38\xb4\x4c\x48\x03\xb3\xa9\xb0\x68\x0a\x96\xe0\xca\x45\x9c\x1f\x31\xce\x9d\x35\x45\x86\x5d\x70\x3e\xed\x1d\xac\xd5\x85\x0b\x97\x10\xc0\xb8\x14\x19\x47\xdd\x5c\x5c\xe9\xa6\x4a\xc9\x21\x2f\x33\x2b\x8a\x0c\x21\x67\x95\x72\x5c\x18\xab\xc5\xb8\x74\xe9\x82\xbb\x63\x0a\xd7\x56\xb7\xca\x31\x34\xfa\x98\x89\x2e\x98\x9d\x0e\x17\xf9\x58\x65\x9b\x7c\x2f\xa7\x08\xa6\xc0\x44\x4c\x04\x72\x17\x23\x2b\xa7\xc5\xb9\x30\x14\x0f\xc3\x7d\x78\xa5\xa4\xa5\x1c\xc5\x65\x99\x0e\xfc\x37\x98\x78\xfd\x52\xb4\x76\xa5\xa0\xb3\xa4\xd7\xe6\x0e\xf9\x69\xff\x12\x36\xee\xde\x05\xd7\x41\xbb\xe3\x42\x87\xb2\x7d\xe3\xe3\xed\x6e\xb0\xad\xb6\xfa\xca\x20\x51\x1c\x29\x0b\xb7\xa5\x81\xc3\x76\xbb\xd5\x85\x37\xee\xb2\x69\x1e\xfc\x7c\xbd\x73\xcc\x92\x6b\x93\x31\x33\x75\xba\x4d\x54\x96\xa9\x19\x72\xba\x52\x89\xb3\x4c\x48\xa4\x6b\x60\xda\x90\x06\x1b\xd2\x92\xb3\x83\x13\x31\xae\x4e\x3a\x68\x1f\x90\x59\xfc\xa0\x2c\x32\xc5\x78\x4d\x2c\xb2\x0c\x53\x12\xa0\x8e\xb1\x87\xb8\xd2\xad\x91\x6f\x0a\x8b\x9a\x65\x4e\x26\x4b\x8f\x99\xac\xdc\xff\xde\x4d\x35\xf7\xf7\x76\x12\x3e\x07\x94\x89\xe2\x3e\x7c\xef\xa5\x5e\xe3\x45\x67\x6f\x03\xd6\xf8\x18\xfe\x29\x51\x2f\x6a\xc2\x54\x59\x28\x25\xce\x0b\x4c\x28\xac\x08\x24\xe8\xfe\xfa\x5c\x58\xa5\x81\x9e\x33\x91\xa0\xf9\x8a\x2b\xf0\x86\xb9\x73\x05\x20\x8c\x29\x37\x83\xc1\xc9\xd5\x69\x3f\xef\x02\x2b\x8a\x55\x18\x6c\x21\xaf\xd9\xf4\x2f\x42\x28\x49\x5a\x96\x05\xf8\x6c\x4f\x48\x28\x4a\xfb\xa7\x26\x23\x92\xc4\x6f\x29\x17\xa8\x3c\x90\x16\xb9\x30\xd7\x8e\x72\x6d\x75\x27\x0f\xc9\xd6\x25\x69\x9f\x82\xae\xa0\x5a\x70\x62\x70\xa1\xd1\x81\x88\x4b\x4c\x92\xca\xe9\x27\x4c\x64\xa5\xae\x0c\x50\x30\x6b\x51\x4b\x88\xef\x3e\x1d\xcb\xed\x97\x60\xb9\x42\xf7\xa5\xbb\x8b\xab\x0a\xbc\x97\x5f\x8d\xcc\xcb\x07\xe0\x76\x79\x45\x37\x70\x55\x07\xd0\xd5\x26\x7a\x2e\x1b\x40\x58\x53\x7a\x7c\x5b\x3e\x8e\x44\xcb\x6f\x43\x99\xe5\x97\xc0\x63\x79\x0f\x30\x2c\xc9\x7f\xb6\xc5\xaf\x01\xa0\xb9\x78\x6f\x84\x2f\xbf\x18\xc6\xce\x5a\xe0\x59\x5e\x35\x22\x76\x79\x27\x34\x97\x8f\xc6\xe0\xf2\xfe\x60\x6b\xde\x64\x67\x6f\x79\x5f\xe8\x3c\xae\x04\x89\xe2\xbd\xfb\xea\x6e\x0c\x2c\xbf\xca\xd3\x97\x8f\xba\x71\xec\x72\xa6\x55\xea\xf3\x22\xf6\xb9\x52\x23\x6b\xfa\xf1\xc7\x75\xaa\x84\xc9\xde\x28\x47\xcb\x5c\x4e\x42\x3b\x35\x26\x4a\x73\x9f\x32\xd5\xdd\x85\x91\xe0\x00\xb0\xfb\xb9\x31\xbe\xdd\x24\x70\xbc\x1a\x04\x34\xf6\x24\xec\x13\x34\xfe\x76\x3f\xb3\x1b\x26\x32\x36\x16\x99\xb0\x8b\xd1\x27\x25\x2b\xb2\x42\x8b\x1b\x66\x71\x24\x0a\x4f\xb6\x1e\xdf\x3a\x7d\x6a\xb1\x9a\xea\x38\xf7\x7c\x28\x07\xbc\x16\x12\x8d\xa0\xb4\x54\xe3\x54\x19\x82\x00\x8e\x99\xb8\x41\xbd\x18\x19\xab\x91\xe5\x23\xc9\x72\x04\x9f\xad\x87\x94\xae\x07\x40\x6f\x3a\x05\x75\x69\x42\x64\x54\x37\x3b\x93\x08\xf9\xff\x98\x58\x6f\x12\xd7\x4c\x22\x4f\xa7\x2f\xc6\xb2\xbc\x58\x4f\xbb\x73\xbd\x53\xad\x27\x27\xbe\x6d\xf3\xe4\xaf\xf0\x49\x1e\x3e\xe1\x97\x4f\x7e\xeb\x3e\x79\xdb\x7d\x32\xfc\x3f\xa7\x56\xcd\xfa\x45\xec\x94\x79\xe9\x9a\x3d\x15\xe2\x42\x9d\x43\x53\x12\x64\x99\x76\x8d\x87\xe3\xa2\xc8\x16\xe0\x7b\x7f\x60\x15\x24\xa5\xd6\xee\x65\xf6\x48\x13\x54\x2b\x61\x68\x16\xc6\xfa\xa2\xf3\xbd\x6b\x46\x40\xce\xe6\xe0\x3a\x80\x14\x86\x3e\x88\xb7\x37\x97\x99\xc8\x85\x85\x50\xae\x9a\x80\x74\x22\xe7\x04\x72\x5a\x59\xe2\x52\x95\xf4\x1b\xd5\x50\xdd\x0a\x40\x84\x90\xf9\xca\x68\xb5\xc1\x97\x40\xc1\x66\xf9\xd0\xac\x26\xe9\xd6\xe0\xb3\xb3\x57\xee\xe1\x5b\x5d\xbb\x91\x11\x9f\x10\x3a\xa7\xee\x7b\x75\xf8\xa1\x1b\x24\x2a\x2f\x34\x1a\x53\x0d\x8a\x85\xd5\xa5\x24\xe0\x83\x9d\x55\xe6\x2a\x11\x39\x72\xa7\x24\xf9\x07\xb9\x87\xb3\x96\x92\x56\xc8\x12\x61\xa6\x85\x83\x24\xab\x5c\x1b\xcd\x90\x27\x90\x5d\x82\xdb\xba\xdd\x46\x6a\x27\x9a\x72\xba\xb1\x63\xb3\xd2\x28\xf0\xad\xa5\x36\xfc\x58\xfd\xf3\xcd\x8e\x95\x85\xee\xd1\xbf\x45\x05\xe3\xca\x02\xf9\x82\xf8\x06\x35\xf3\x3b\x0b\xdb\xa5\xa6\x2e\x25\x55\xa0\x1b\x8d\xe1\x1d\x18\xfa\x5a\x75\x55\x84\x0b\x4b\xb7\xff\x48\x01\xbb\x03\x55\x3b\xa0\x86\xec\x64\xab\x82\xc7\x39\xa5\x5e\xf0\xdb\xf9\xf0\xf2\xdd\xf1\xdb\x7e\x6f\xf7\xdf\x53\x65\x2c\x05\xc9\x0f\xf5\xda\xa0\x7f\x7a\x76\xfe\xae\xd7\xa8\xe5\xd7\x2b\xae\x59\xd0\x5b\x77\x1d\xd6\x6b\x17\x83\xf3\x3f\xce\x4e\xfa\x83\x5e\x8b\xcd\x4c\xab\x9e\x3d\xfe\x73\x38\x7a\x98\xdf\x9b\xb3\x5f\x07\xc7\x97\xe7\x23\xdf\xbe\x6c\x52\x44\x1b\xde\xb3\x3e\xef\x9d\x3a\x51\x96\xa6\x76\x6b\x0d\x56\xbc\xce\x5f\x1d\xbf\x19\xfd\x79\x3e\xf8\xbd\x3f\x18\x5d\x1e\x9f\xde\x2b\xe4\x06\xd1\xa0\xff\x9f\xf7\xfd\xe1\xe5\xe8\x3f\xef\xfb\xef\xfb\x3d\x07\xe2\x21\x93\x2c\x5b\x18\x61\xc2\x0a\x6b\xc3\x35\x97\xb7\x27\x87\x0f\x32\x1a\x5e\x9c\xbf\x1b\xf6\x1f\xe2\xe4\x8b\x9b\x3b\xac\x82\x1d\x38\x29\xf3\x02\x5c\x3c\x9a\xaa\xd5\xbf\x0a\x4f\xb6\xe1\x4e\xae\x1e\x77\x2b\xae\x92\xae\x01\xe0\x2e\x51\xf5\x83\x01\x11\xad\x64\x3d\x19\x39\x43\x0f\xfe\x1a\x5d\x1c\x5f\xfe\xd6\x5b\xb7\xf1\xe2\x4c\x8c\x5d\xa3\x47\x41\x27\xea\xec\xd1\x03\xcb\x71\xc2\xca\xcc\x52\x40\x19\x38\x3d\x3f\xe9\xff\xfa\xfe\xb4\xf7\xf6\xf8\xe4\x8f\xd7\x83\x7e\x9f\xaa\x9e\x64\x0a\x39\x5b\x80\x76\x29\x3c\x4c\x45\x4a\xa5\xd2\x60\x38\x8c\x5c\x03\x10\xa1\x6e\x4c\xa6\x2a\x63\x32\x8d\x94\x4e\x63\xae\x92\x38\x55\x74\xc2\x8e\x2e\x25\x01\x66\x2d\x5a\x7d\x40\x2b\x67\xfc\x86\x2b\x69\x29\xa4\x7b\x9d\x96\x73\xe4\x52\x52\x4c\xe2\x0d\xea\xa8\xaa\x18\x28\x92\x5d\x67\x17\x5c\x43\x58\x4c\xc0\xc5\xfc\x8c\x99\x1a\x3d\x91\x07\x74\x42\x06\x1f\xbf\xdc\x6e\xdb\x6c\x96\x7d\xf7\x72\xdb\x94\xdb\x00\xf6\xf1\x17\xe0\xca\xe1\x91\x07\x07\x9c\x0b\x4a\x07\x5c\xdd\xab\xd1\x96\x5a\xfa\x7c\x78\xf7\x7f\x7e\xa9\xc5\x21\xf4\xd9\x38\x25\x8a\xa2\x56\xdd\x98\xb8\xac\x1f\x17\xdf\xee\x67\x37\xe8\x60\xaa\xc6\x6b\xdf\x31\x01\x38\x39\xbe\xec\xf7\x3e\x3a\x74\xff\xa9\xe5\x9e\x97\x90\xde\x99\xcb\xd6\x47\x8f\xa7\x37\x5f\x10\xfb\xb1\xe5\x5d\x62\xee\x9d\xc5\xcb\xe4\x92\x0f\xca\x73\x3d\x62\x5a\x96\x5c\x83\xd5\x2c\xa9\x4a\x73\x27\x9f\xa6\xc4\x4c\x48\xab\x80\x81\xc1\x82\x69\x12\x8d\x0e\x0a\x61\x86\x40\x6f\x04\xe1\xf3\x78\x01\xa5\xcb\xd3\x2d\x4b\xe8\xde\x34\x32\xee\xf6\x13\xa5\x90\xe0\x2e\xd6\xe0\x53\x98\x08\xe9\x12\x55\x32\x42\xa1\x85\xb4\x55\x4e\x54\xa1\x76\xc6\x8c\x85\x54\xf9\x14\x5c\x93\x68\x45\x69\x2b\xd6\x06\xf9\x53\xf7\xe3\x45\xc5\x8d\xe6\x84\x05\x96\x32\xe1\x7f\xcf\xa0\xb3\xbf\x46\x7d\x7a\xdd\x90\xd3\x9b\xf8\x7d\xe7\x69\x7c\xf5\xc1\x67\x08\xbd\xb8\xa0\x77\x8f\x98\x6c\xfb\x86\x33\x42\xf8\xb8\x2d\x87\x28\xf9\xca\x63\xc9\x61\xdd\xfc\xe7\xcf\xe4\xb7\xd1\x99\xb9\xd0\x8a\x97\x09\x81\x32\xdc\xde\x56\x5b\x0a\x1e\x1a\xda\x75\x55\x8d\x01\xc2\x6b\xd8\xbd\x38\x1d\x0d\xfb\x83\x3f\xce\x5e\xf5\x47\xbf\xf7\xff\x6a\x2e\x5a\xb0\x5a\x38\xbb\x34\x26\x39\xb4\x76\x37\x91\x15\x98\x85\x15\x60\x02\x17\x64\xb6\xb5\x87\xb6\x9a\x9b\x05\xb4\xbe\x05\x86\x89\xd7\xe8\x01\x56\x13\x68\x55\x76\x6c\x70\xbc\x4b\xe1\x18\x6e\xa0\xf5\x36\x4d\xe1\x25\xe8\x35\x85\xd9\xa6\xa9\x5f\xb1\xde\x4a\xcf\x6d\x0a\x4a\xfe\xe8\xb9\x23\x3f\x0c\x13\xe8\xb4\xe9\xef\x1b\xae\xf5\x87\x56\x7d\x7f\x74\x43\xd5\x95\x99\x0c\xb1\x80\x4e\x3b\xe0\x4a\xa2\xcf\x2a\x56\xed\xec\xea\x49\x97\x6a\x5a\x16\x10\xc5\x7e\x08\xdf\x6d\xbb\xd2\x8c\x72\x42\xae\x52\xe7\x87\xdf\x05\xff\x0d\x00\x00\xff\xff\x81\x38\x88\x8a\x1b\x1e\x00\x00")

func templatesCommonUserdataShBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommonUserdataSh,
		"templates/common-userdata.sh",
	)
}

func templatesCommonUserdataSh() (*asset, error) {
	bytes, err := templatesCommonUserdataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/common-userdata.sh", size: 7707, mode: os.FileMode(420), modTime: time.Unix(1589972838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/common-userdata.sh": templatesCommonUserdataSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"common-userdata.sh": &bintree{templatesCommonUserdataSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

