// Code generated by go-bindata.
// sources:
// templates/root.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xeb\x57\xec\x20\x33\x3d\x99\x44\xed\xb8\x4a\x46\xa5\x94\x26\x3e\xf4\x52\xf7\xe2\xf6\x07\x2c\x81\x95\x08\x05\x04\x58\x60\x29\x9b\xd5\xe8\xbf\x77\x60\x52\x9f\xfe\xa8\x95\x04\x07\x9a\x06\xdf\xbe\xf7\x76\x17\x5c\xaa\xa8\xb8\xb6\xb3\x51\x51\x11\xea\xd9\x08\x00\xa0\x88\x2a\x98\x86\x81\xbb\x86\xa6\x82\xe9\x81\xe5\x12\x57\xd8\xef\x0a\x88\x41\x4d\x45\xc5\xdc\xc4\x89\x94\xca\x6b\xca\x97\xff\xb4\x14\xba\x5c\xf9\x5a\xf6\xb7\xd9\x55\x7e\x99\x5f\xe7\xb5\x71\xf9\x32\x8a\x59\x21\xfb\xd8\xf3\xe9\x6b\x7c\x50\xda\xe5\xa5\xf7\x1c\x39\x60\x93\xfe\x49\x32\xbb\x0d\xf9\x3e\x7f\x9f\xff\x22\x97\x71\xbf\xf5\x3f\xb2\xc7\xf6\x75\x82\x6a\xb2\x66\x15\x72\x47\x2c\x17\x95\xfc\x59\xb1\x2f\x91\xa5\xef\xff\x66\x25\xa1\x33\x94\x2f\xe3\x6f\x16\x99\x22\x4b\x6d\xe2\x93\xa7\x2f\x68\x5a\xe3\xbe\x42\x20\x3b\x15\x91\x3b\x4b\xb1\x22\x62\x71\x98\xb9\x8a\x51\x40\x15\x68\x7e\x7e\xce\x2a\x9e\x26\x9d\xc8\x66\x85\x4c\xa2\xb3\xd1\x90\x74\x92\xed\xcd\xa4\x95\x34\x31\x10\xbe\x4b\x7d\x83\xf5\x6e\x3f\xad\xb9\x77\x5c\x1b\xdb\x4d\xe0\x96\x9c\xf5\x17\x70\xeb\x1d\x2a\x7f\x01\x37\xde\x45\x6f\x31\x5e\x80\xb8\xf1\x6d\x30\x14\xe0\x4f\xba\x17\x17\x50\x7b\xe7\x63\x83\x8a\x7e\xdd\x11\x6d\xf6\x52\x3a\x6f\x82\x6f\x32\x87\xf5\xa9\x92\xf2\xd6\x87\x09\xbc\x1b\x8f\xc7\xcf\x46\x62\x69\x9f\x33\x97\x45\xf3\x2f\x4d\xe0\xf2\xba\x79\x38\x0d\x2b\xe4\x41\xa2\x05\x1b\xb6\x34\xbb\xe3\x60\x1a\x02\xe3\x98\x16\x01\xd9\x78\x07\xa9\x7d\x85\xec\x1f\x8f\x0a\xd9\x1f\xf9\xa2\xf4\xba\x9b\x8d\x0a\x6d\x56\xa0\x2c\xc6\x38\x15\xca\x3b\x46\xe3\x28\x64\x73\xdb\x1a\x2d\xb6\xd5\xac\xae\xb7\xac\x89\xe9\x91\x3a\xcc\x51\x51\x21\xab\xeb\x41\xfb\x80\xa5\x41\x47\x16\x1e\xaf\x99\x71\x73\x2f\xf6\x7d\x78\x02\xcb\x92\x17\xe3\x16\x07\x98\xb4\x6e\xda\x10\xc8\x31\xb4\x91\xc2\x3e\x58\x6a\xb3\x7a\x8d\x2b\x25\x74\x42\x54\x34\xbb\xdc\x30\xe8\x2c\x9d\x03\x31\x5b\xaf\xf3\x41\xe0\xef\x48\x61\xb3\x29\x64\x73\x12\x85\xc3\xd9\x94\x91\x2c\xa9\x47\xd8\xa7\xe4\x65\x9a\x2e\x9f\xc5\x96\xb3\x64\x07\x25\xbb\xac\x09\xa6\xc6\xd0\x89\xd9\x1f\x7e\x01\xc6\x01\x46\x48\x21\xf0\xb9\x90\x78\x0e\xf3\x97\x37\x33\x7f\x39\x93\xf9\x8e\x5b\x4d\x8e\xdf\xc2\x3f\x40\x8f\x04\x0e\x4a\x3f\xdc\x8e\x76\x6d\xdf\xa3\x7e\xf7\xc0\x1e\x54\x45\xea\xab\x6f\x79\x52\x94\xe1\x80\x61\x67\xef\x9e\x4a\x89\x4a\xf9\xd6\xb1\xdc\x62\x65\x64\x0c\xfc\x29\xb6\x65\x3f\x46\x8c\x77\xd3\xda\x3b\xae\x6c\xf7\xb2\xe5\xbb\x1e\x5d\x52\x52\x1d\xd0\xd0\x58\x74\xc7\xd6\xcf\x16\xee\x08\xc3\x9b\x75\x7b\xf0\xb1\xec\xb6\x44\xbb\x0a\x1d\x17\x06\xee\x0d\x57\x80\xf0\x57\x30\x68\x7f\x50\x95\x7e\xe2\x44\x96\xe9\xb6\x7f\xe3\xa7\x57\xf5\x37\xd4\xad\x37\x76\x05\xb5\x71\xf0\xc8\xf7\x9d\x85\x7c\xc1\xdb\xe5\xf8\x63\xf5\xcd\xee\x3e\x80\xc6\x2e\xfe\x10\x7b\x7d\xeb\x4e\xdd\x8d\x3f\x5c\xbd\xd5\xdd\x41\xef\x87\xd2\x7d\x7c\xce\xdd\xe9\x71\x00\xa3\xa7\x42\x9b\x55\x46\x21\xf8\x90\xbe\x5c\xbb\xb7\x68\xbd\x36\x73\x70\x04\xf9\x2d\xc5\x88\x0b\x02\x21\x36\x9b\x97\x27\xde\x30\x64\xef\x31\xb8\xa7\x33\xf4\x95\x59\x3b\xb0\x9f\x0c\xd4\x57\x86\xea\x60\x39\x36\x16\xbb\xad\xed\xa3\xb8\xde\xfc\xd6\xf6\x81\xe7\xe7\x06\xf7\x61\xbe\xe4\xf4\x66\x33\x1a\xb6\x0a\x39\x7c\x93\x64\xff\xe3\x2c\xad\xff\x02\x00\x00\xff\xff\xad\xf7\xdc\xd4\xa8\x09\x00\x00")

func templatesRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRootHtml,
		"templates/root.html",
	)
}

func templatesRootHtml() (*asset, error) {
	bytes, err := templatesRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root.html", size: 2472, mode: os.FileMode(420), modTime: time.Unix(1596728331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/root.html": templatesRootHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"root.html": &bintree{templatesRootHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

