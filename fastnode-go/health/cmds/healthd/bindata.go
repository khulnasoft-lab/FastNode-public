// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\xb8\x08\x03\xda\x02\x95\x34\x77\x2b\xd6\x05\x92\x01\x37\x33\xd6\x6c\x59\xda\x25\x2d\xb6\xa1\xe8\x03\x2d\x9e\x2d\xba\x14\xa9\x90\x94\x53\xc3\xc8\x7f\xdf\x51\xb2\x62\x45\x91\x33\x63\x79\x88\x7d\xe4\xc7\xe3\xdd\xf1\xbb\xfb\xbc\xdd\xc2\x77\xef\x7f\x87\xd3\x14\xc6\x70\x77\x37\xf2\xe6\xa7\xcb\xab\xd9\xf4\xec\xdd\xf4\xed\xc5\xcc\xaf\xbf\xf2\xeb\xa3\xe4\xe4\x97\xf7\x67\x1f\xff\xf9\x30\x83\xdc\x15\x72\x32\x4a\xfc\x07\x48\xa6\x96\x69\x80\x2a\x98\x8c\x80\xfe\x92\x1c\x19\x6f\xbe\xd6\x66\x81\x8e\x41\x96\x33\x63\xd1\xa5\x41\xe5\x16\xe1\x9b\xa0\xbf\x9d\x3b\x57\x86\x78\x53\x89\x75\x1a\xfc\x1d\x7e\x9a\x86\x67\xba\x28\x99\x13\x73\x89\x01\x64\x5a\x39\x54\x74\xf6\x7c\x96\x22\x5f\xe2\xa3\xd3\x8a\x15\x98\x06\x6b\x81\xb7\xa5\x36\xae\x73\xe0\x56\x70\x97\xa7\x1c\xd7\x22\xc3\xb0\x36\x5e\x82\x50\xc2\x09\x26\x43\x9b\x31\x89\xe9\xb8\xeb\xcc\x09\x27\x71\x42\xe1\x4b\x97\xf3\x24\x6e\xcc\xd1\x7e\xff\x24\x0c\xe1\xad\xd6\xce\x3a\xc3\x4a\x08\xc3\xce\x51\x29\xd4\x57\xc8\x0d\x2e\xd2\x20\x8e\x15\x3a\xae\x58\x34\x6f\xa1\x19\x57\x51\xa6\x8b\xf8\x7e\x21\xfe\x21\x1a\x47\xe3\x38\xb3\x76\xbf\x16\x15\x82\x50\xd6\x06\x60\x50\xa6\x81\x75\x1b\x89\x36\x47\x74\xdd\x08\x7d\x04\xef\x3e\xfe\x71\xf1\x1a\xae\x73\x51\x00\x53\x1c\xae\xd0\x96\x5a\xf1\x68\x65\xe1\x7c\xf6\x06\x6c\x55\xfa\x22\x80\x5e\xec\x80\x28\xb1\xa0\x62\xd8\x1a\x5c\x20\x17\x0c\x6e\x2a\x34\x02\xed\xc3\x0c\xbc\xeb\xbf\xa6\x57\x97\xe7\x97\xbf\x9e\x76\x9d\x72\x8d\x56\x3d\x73\x70\xab\xcd\x57\x10\x0b\xd8\xe8\x0a\x7c\xa9\xc1\xe5\x08\x25\x5b\x22\x59\x0c\x16\x42\xe2\x69\x1c\x3f\x72\xf9\x99\x4e\x48\x47\x91\xc1\xcf\x5f\xf6\x3b\xf5\xae\xcd\x8c\x28\x1d\x58\x93\xa5\x81\x7f\x7f\x4b\xe7\xb5\xb5\x51\xc1\xbe\xb5\x05\x93\x62\x6e\x63\xcf\xb1\xd7\x36\x17\x6b\xaa\xda\x4f\xd1\xf7\x7b\x9b\xa2\x0b\x26\x49\xdc\xf8\xf9\x9f\xce\xcd\x7d\xa2\xf1\x38\xfa\x31\x7a\x75\xbf\xe0\x5f\x63\xd8\x7f\x72\xf2\x19\x15\x17\x8b\x2f\x6d\xae\x49\xbc\x67\x7c\x32\xd7\x7c\xd3\xc1\x2a\xb6\x86\x4c\x32\x6b\xd3\x80\xbe\xce\x99\x81\xe6\x23\x14\x6a\x8d\xd4\x11\xad\x69\x1d\xb1\x3d\x0b\x9d\x2e\xe9\xfd\x35\x11\xd3\xc3\xc5\x92\x16\xb5\x0a\x7a\xb9\x71\x71\xef\xd3\x33\x9d\x09\x85\x26\x5c\xc8\x4a\xf0\x1e\xb2\x8f\xde\xdd\xe5\xa3\x45\x33\x80\xad\xf1\xac\x87\x9e\x1b\x22\x4e\xd0\x72\x3b\xd8\xb7\x07\x1b\xb8\x2c\xa6\xdb\x7a\xd1\x3e\x5c\x4a\x62\x72\xdb\xed\xa9\xa1\x64\xfa\x09\x3b\x46\x73\xa0\x45\x35\x46\xfd\x9f\xaa\x46\x4f\x83\x7c\x67\xcd\xb5\xa1\xbc\x70\xb0\x0a\xce\x1c\x48\xd7\xe5\x93\x6b\xaa\x7d\x65\xa9\xdf\xf3\xc3\x98\x4b\x1a\x31\x4f\x23\x66\x8a\x97\x5a\x28\xf7\x34\xea\x82\x59\x07\x1f\xb4\x94\xc8\x8f\x00\xce\x8c\xd1\xe6\x69\xdc\x54\xa2\x71\x87\x9c\xd1\xea\x40\xde\xdb\x2d\x3d\x29\xf5\x6d\x44\x23\xfd\xf1\x9e\xef\x71\xbc\x81\xa8\xa9\xca\x99\xe6\x58\x6b\xc3\x00\xb6\x09\xc1\xb4\x0f\x63\xab\x2c\x43\x9a\x5f\x43\x17\xd2\x14\x22\xae\x0f\x78\xee\xca\xcc\x7f\x5f\xc1\x7d\xdc\x43\xcc\x6d\x6f\x38\xec\x62\xf8\x0c\x8d\x44\xaf\x6b\xc3\x67\xf8\x64\xbb\xdd\x05\x7b\x77\x47\xa5\xe4\x87\x5e\xa1\x06\x7a\x86\x1c\x01\x6b\x69\x72\x04\xd4\x53\xa0\xa1\xca\x91\xe0\x9a\x2e\x47\x60\x77\x9c\x39\x84\x3c\xc4\x1a\xaa\x56\xaf\xbe\x84\xf4\x9d\xd7\x6d\xef\xba\xdb\x1f\xaa\xca\xea\x4f\xd2\x9b\x0d\x3c\x57\xe8\xf9\xc1\xe8\xeb\x42\x9b\xbd\x90\x3e\xb3\xf0\x1b\x5b\xb3\xeb\x66\x62\x97\xb2\x5a\x0a\x65\x5f\x3c\x54\x92\xa1\x71\xce\x56\xec\x5b\xb4\xd4\x7a\x29\x91\x95\xc2\xd6\x33\xdd\xaf\x35\x83\x7d\xe5\x45\x6e\x43\x43\x7d\x3c\x26\xcd\x68\xac\xa7\x86\x7a\xf7\x86\xe3\x15\x7c\xd5\x17\xf0\x43\x92\x41\x65\x38\x57\x99\xac\x88\xf3\x4c\x4a\xfa\x85\x52\x94\xa4\x98\xbc\x4d\x17\x9e\xcf\x51\xea\xdb\x17\x2f\x81\x2a\x23\x76\x40\x41\x2a\xb3\x16\xbc\x62\xb2\x96\x57\x52\x70\x0b\x0a\x91\xd3\xb1\xbd\xf4\x34\x7a\x93\xc4\xcd\x0f\xb2\x7f\x03\x00\x00\xff\xff\x5e\x3a\x99\xfc\xc9\x09\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2505, mode: os.FileMode(420), modTime: time.Unix(1447104858, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

