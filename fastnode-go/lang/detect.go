package lang

import (
	"log"
	"strings"

	"github.com/khulnasoft-lab/fastnode/fastnode-golib/fileutil"
)

const (
	modelDir = "s3://fastnode-data/var-fastnode-data/language_detection/models"
)

// Detector contains models to determine programming language from
// file contents.
type Detector struct {
	detectors map[Language]*LanguageDetector
}

// NewDetector returns a Detector
func NewDetector() *Detector {
	d := &Detector{
		detectors: make(map[Language]*LanguageDetector),
	}
	for l, tag := range LanguageTags {
		modelPath := fileutil.Join(modelDir, strings.Join([]string{tag.Ext, "model"}, "."))
		d.detectors[l] = NewLanguageDetector()
		err := d.detectors[l].Model.loadModel(modelPath)
		if err != nil {
			d.detectors[l].Model.defaultModel()
			log.Printf("using default language detector model for %s\n", tag.Name)
		}
	}
	return d
}

// FromContents detects the language type by
// 1) checking if the contents contain any language-specific syntax.
// If it does, and no ambiguities, it returns the language type.
// Otherwise, it computes the likelihood of the contents being genreated
// by each language, and returns the language that maximizes the likelihood
func (d *Detector) FromContents(contents []byte) Language {
	// Compute the probability of contents being generated by a language
	scores := make(map[Language]float64)
	for k, detector := range d.detectors {
		scores[k] = detector.logLikelihood(string(contents))
	}

	predictedLang := getMostLikelyLanguage(scores)
	return predictedLang
}
