// Code generated by go-bindata.
// sources:
// templates/beams.html
// templates/index.html
// templates/save.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBeamsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x8b\xdc\x36\x14\x7d\xef\xaf\xb8\xb8\x2d\xb4\xb0\x63\x8f\x67\x13\x52\x5c\x8f\x4b\xb3\x1b\x28\x34\x94\x90\xcd\x5b\xe9\x83\x3c\xbe\xb3\x16\x2b\x4b\x46\xd2\x7c\xd5\xf8\xbf\x17\x59\xb6\xc7\x5f\xe3\xec\x96\xb0\x2d\x49\x5e\x16\xaf\x74\xef\xb9\x57\x47\x47\xc7\xf2\x84\xa9\xce\x58\xf4\x0d\x40\xa8\xf4\x89\x21\xe8\x53\x8e\x6b\x47\xe3\x51\x7b\x1b\xa5\x1c\x33\x03\x10\x8b\xe4\x04\x45\xf5\x08\xb0\x15\x5c\x2f\xb6\x24\xa3\xec\x14\x80\x22\x5c\x2d\x14\x4a\xba\xfd\xb9\x3b\x7d\x40\x7a\x9f\xea\x00\xfc\xe5\xd2\x8e\x97\xd5\xdf\xd4\xef\xa3\x28\xfa\x37\x06\xb0\x5a\xce\xe7\x02\x64\x44\xde\x53\xbe\x88\x85\xd6\x22\x0b\xe0\xba\x8b\x49\x79\xbe\xd3\x7f\xda\xb6\xd5\x2e\xce\xa8\x76\xfe\x6a\xab\xa4\x35\xd6\xea\x65\x03\x75\xa0\x89\x4e\x03\xf0\x5f\xb6\xe0\xb1\x90\x09\xca\x00\xb8\xe0\xd8\x8e\x91\xcd\xc3\xbd\x14\x3b\x9e\x2c\x36\x82\x09\x19\xc0\xb7\x09\xb6\x4b\x6c\x86\x96\x2f\x7e\xba\xd4\x09\xdf\x65\x31\xca\x4e\x27\x75\xdd\x73\xd9\xb6\xb5\x1e\x43\x86\x78\x22\x91\x5c\x81\x2b\x76\x3a\xdf\xe9\x2b\x70\x89\xd6\xc8\x35\x15\x7c\x08\xe6\xaf\x96\x3d\xea\x02\xf0\x31\x83\x4c\x70\xa1\x72\xb2\xc1\x59\xdc\x16\x2b\x16\x47\xb3\x0f\x94\xdf\x07\x35\x15\x8b\x58\x1c\xe7\xc8\xc9\x49\x92\x54\xe1\xaf\x66\xe8\x42\x9c\xac\x3f\xde\x99\xf3\x12\x0e\x29\xd5\xb8\xa8\x5a\x0f\x20\x97\x6d\x3d\x89\x56\x27\xe7\x1e\x2c\x26\x23\x31\xb2\x16\x30\xa1\x2a\x67\xe4\x14\x40\xcc\xc4\xe6\xa1\xa5\x85\x09\xa2\x03\x60\xb8\xd5\x43\x05\x8c\xe4\xa5\x45\x1e\xc0\x8b\x5e\xd7\x24\x66\x78\x05\x2e\x1e\x35\x72\x45\x05\x57\x3d\xfd\x06\xb0\x74\x5f\x8d\x19\x6f\x58\xab\x96\x52\x11\xe5\x63\x36\x82\xfd\x77\x48\xcb\x01\x92\x0c\x52\xb1\x47\xd9\x82\x89\x9d\x66\x94\x63\x00\x3a\xa5\x1c\x94\x60\x34\xe9\xc6\x0f\x37\x7f\x48\xf9\xe2\x20\x49\xde\x4b\xd8\x32\x3c\x2e\x36\x82\x6b\x42\x79\xa7\x4e\xcb\xb6\x99\xef\x25\x28\x9a\x60\x4c\xe4\x50\xab\xab\xbe\x13\x90\x80\x51\xfe\xd0\x06\xd5\xaa\xe1\x64\x7f\xea\x47\xed\xa9\xa2\x1a\x93\xf9\xc0\xd0\xab\xbc\xab\x72\x31\x4d\x35\xc3\xe8\x16\x35\xa1\x0c\x13\x88\x91\x64\x2a\xf4\xec\xa8\x99\x37\x56\x66\x4d\x2d\x4c\x57\xd1\x8d\x48\x30\xf4\xd2\x55\x3d\x92\xd0\x3d\x6c\x18\x51\x6a\xed\x58\xa2\x9c\xa8\x28\x72\x49\xb9\xde\x82\xf3\xbd\x72\xc0\x35\x09\x65\x19\x7a\x09\xdd\x77\x51\xb2\x9c\xa1\x39\xa1\xea\x0c\xf6\x48\xb8\x36\xb3\x87\x0a\x50\x14\x74\x0b\xee\x5d\x2a\x0e\xb7\x3b\x49\x4c\x44\x59\xd6\x53\xa6\xa8\x1f\x35\xc3\xa1\x97\xfa\x51\x3b\xf3\xa8\xaa\x67\xc4\x41\x49\xe4\x49\x5b\xc5\x2c\xec\x9d\xc4\x2d\x3d\x76\xd7\xf4\x28\x7c\x9b\x36\x40\x37\x78\xaf\xed\x6e\x3c\x11\xae\xca\x1a\xa0\x59\x0e\x0c\x3d\xc0\xc8\x09\x25\x64\x24\x57\x23\x2a\x08\xa4\x12\xb7\x6b\xc7\xab\x64\xe0\x15\x85\xfb\x3b\x9e\xca\xf2\x17\x95\x8a\x43\x95\xa6\xd6\xbe\x13\xbd\xed\x00\x90\x5e\x7e\xfe\x18\x34\x27\xfa\x43\xc0\x24\x46\x51\x48\xc2\xef\x11\xdc\x37\xc7\x9c\x58\xff\x38\xd3\x9b\x77\x89\xb9\xc5\x5c\xa7\x50\x14\x6e\xf5\x60\xd6\xda\xe5\xa8\xc5\xa9\x99\xe8\x36\x95\xca\x5e\x8f\xe9\x75\xf4\x9e\x1c\xe0\x6c\x58\xa1\x97\x5e\xf7\x22\xac\xf9\xd4\x8c\x9f\xe3\x9c\x6e\x90\x09\x93\xfd\x81\x73\x17\xdf\x59\xdf\x0d\xd6\xe0\xbe\x27\x87\x37\x2d\x42\xaf\xaf\x06\x25\x19\x6c\xa6\x4d\x36\x0b\xd4\xc9\xb8\x40\x57\x7f\x35\x82\x37\x6c\xe4\xe9\x9d\xdd\x6d\x84\xc4\xe7\x69\x2f\xf4\x2a\x7a\x67\x44\x94\x5e\x47\x77\xc8\x70\x63\x4c\xed\x99\x76\xa9\xa9\xf7\x3f\xdd\xaa\x51\x7b\xff\xed\x7e\x55\xc6\xcb\x11\x7e\x60\xc8\xcd\x89\xdb\x0a\x89\x3f\xc2\x72\x70\xea\xfc\xe8\x46\x70\x73\xa9\x01\x1b\x01\xbf\x36\x97\xb4\xa1\x09\xf5\x2d\xae\xbd\xcb\x39\x97\x98\xa9\x4b\x4e\x2d\x5f\xe5\x84\x43\xf5\xaa\x5b\x3b\xa3\x2b\x57\x51\xb8\x37\xe6\xc1\x18\x52\x51\xb8\x1f\xc4\x03\x56\x06\x6f\x92\x86\xb5\x9a\xd7\xcb\x6b\x89\xe4\xa1\x2c\xc3\x58\x46\x53\x6c\x5d\xe2\xb0\xe7\xc3\x30\xd2\x78\xf7\xe5\x55\xf9\xe2\x70\x2f\xc3\x11\x40\xa3\xf8\xa9\x46\x1b\xc1\xe0\xbe\x16\x8c\x25\xe8\xad\xd9\xf9\x29\x95\x4c\xea\x6e\x08\xd6\xa8\xcf\xc2\x4e\xa2\xc0\x93\x15\x77\x99\xb3\x1a\x6d\x74\x42\xe6\xe2\x3f\x2e\x88\x99\x95\xda\xc6\xcf\x2a\xb8\xdc\x6c\xcd\x48\x25\xa2\x8a\xde\xdf\x90\x24\xd3\xbc\xd6\xc0\x33\x12\xb4\x30\x65\xe9\xd8\x6b\xdf\xda\x5f\x62\x16\x3d\x1f\x55\x5f\x9a\x48\x26\xec\x6b\xf2\x7c\x8e\xb3\xa7\x46\xba\xbe\xf7\x4e\x62\x42\x37\x7a\xce\xf8\xea\x90\x4f\xe8\x7c\x35\xe2\x57\xeb\xeb\xf3\xd2\x51\x75\xcd\xd0\x67\x2e\xeb\x47\x49\xe2\xab\xf9\x0d\x57\xf1\xa5\xc9\xe4\xd3\xb9\xdf\xf0\xff\xde\x57\x95\xf1\xbc\x9a\xd0\xfa\xaa\xee\x7f\xec\xf3\xd5\x7e\xa8\x7d\xc0\xa3\xbe\xf8\x89\x1d\x7a\xf6\x97\x88\xd0\xb3\x3f\xc0\xfe\x13\x00\x00\xff\xff\x3a\x75\x40\xea\x88\x15\x00\x00")

func templatesBeamsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBeamsHtml,
		"templates/beams.html",
	)
}

func templatesBeamsHtml() (*asset, error) {
	bytes, err := templatesBeamsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/beams.html", size: 5512, mode: os.FileMode(436), modTime: time.Unix(1602736418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xe3\x36\x12\x7e\xdf\xbf\x62\x8e\xd7\x03\x1c\x60\x2d\xc9\xb9\x2d\xb6\xd0\x4a\x06\xf6\xc7\x15\xbd\xdb\xee\x36\xb8\x04\xe8\x43\x51\x1c\x68\x69\x64\x31\xa1\x48\x95\xa4\x9c\xb8\x86\xff\xf7\x03\x49\x59\x91\x64\xc7\x9b\xfa\x82\x7b\x68\xf6\xc5\x90\xc8\xe1\x37\xdf\x7c\x33\x1a\xd1\x62\x52\x9a\x8a\xcf\x5f\x00\x24\xda\xac\x39\x82\x59\xd7\x98\x12\x83\x77\x26\xcc\xb4\x26\x76\x06\x60\x21\xf3\x35\x6c\xdc\x25\x40\x21\x85\x99\x16\xb4\x62\x7c\x1d\x83\xa6\x42\x4f\x35\x2a\x56\xbc\xe9\x4f\xdf\x22\x5b\x96\x26\x86\x59\x14\xf9\xf1\xad\xfb\x2d\x67\x43\x14\xcd\x7e\xc7\x18\xce\xa3\xe3\x6b\x01\x2a\xaa\x96\x4c\x4c\x17\xd2\x18\x59\xc5\xf0\xf7\x3e\x26\x13\x75\x63\x7e\xf1\xb4\x75\xb3\xa8\x98\x21\xbf\x76\x5e\xca\x16\xeb\xfc\xdb\x1d\xd4\x2d\xcb\x4d\x19\xc3\xec\xdb\x0e\x7c\x21\x55\x8e\x2a\x06\x21\x05\x76\x63\x34\xbb\x59\x2a\xd9\x88\x7c\x9a\x49\x2e\x55\x0c\x7f\xcd\xb1\x0b\x71\x37\x14\xbd\xfa\xee\x21\x26\xa2\xa9\x16\xa8\x7a\x4c\x5a\xbf\xaf\x3b\xb7\x1d\xb5\x81\x42\x56\x78\xaa\x90\xbe\x84\x40\x36\xa6\x6e\xcc\x4b\x08\xa8\x31\x28\x0c\x93\x62\x0c\x36\x3b\x8f\x06\xd2\xc5\x30\xc3\x0a\x2a\x29\xa4\xae\x69\x86\x47\x71\x3b\xac\x85\xbc\xb3\x79\x60\x62\x19\xb7\x52\x4c\x17\xf2\xee\x98\x38\x35\xcd\x73\x67\xfe\xfa\x88\x5c\x88\x07\xfd\xef\x65\xe6\xd5\x7d\x08\xb7\x25\x33\x38\x75\xd4\x63\xa8\x55\xe7\x4f\xa1\xaf\x93\x7b\x0e\x1e\x93\xd3\x05\xf2\x0e\x30\x67\xba\xe6\x74\x1d\xc3\x82\xcb\xec\xa6\x93\x85\x4b\x6a\x62\xe0\x58\x98\x71\x05\xec\x95\x97\x91\x75\x0c\xaf\x06\xac\xe9\x82\xe3\xa0\x64\x63\x88\x82\xd7\xfb\x22\xef\x84\x72\xec\x9d\x36\x11\x56\x03\x24\x15\x97\x72\x85\xaa\x03\x93\x8d\xe1\x4c\x60\x0c\xa6\x64\x02\xb4\xe4\x2c\xef\xdb\x8f\xb3\x34\xd6\x66\x7a\xab\x68\x3d\x58\x50\x70\xbc\x9b\x66\x52\x18\xca\x44\xcf\x4f\x27\x8b\x9d\x1f\x2c\xd0\x2c\xc7\x05\x55\xe3\xa2\x3a\x1f\x3e\xb2\x34\xe6\x4c\xdc\x74\x46\x6d\x7a\x05\x5d\xad\x87\x56\x2b\xa6\x99\xc1\xfc\xb8\x61\x12\xba\x26\xe3\xda\x8d\xed\x29\xbe\xbb\x24\x85\x54\x15\xd0\xcc\x96\x78\x4a\x42\x02\x15\x9a\x52\xe6\x29\xb9\xf8\xe9\xf2\x8a\x80\xa0\x15\xa6\xc4\xda\xb4\xdd\x08\x20\xc9\xd9\x6a\x77\x6d\x3b\x17\x72\xcc\x4c\x6b\x58\xc9\x1c\x79\x4d\x4d\x49\xee\x2d\x00\x36\x1b\x45\xc5\x12\x21\xf8\x64\xa7\x2f\xa8\x29\xf5\x76\xdb\x9b\xb7\x16\xac\x80\xe0\xd2\x41\x61\x3e\x9a\x04\x48\x64\xed\x1e\xc1\x15\xe5\x0d\xa6\x64\xb3\x09\x2c\xc8\x76\x4b\x40\xb7\x4b\xe6\xdd\x58\x12\x7a\xe3\xf9\xc8\x01\x72\x8d\x8f\x07\x7e\x04\x9e\x18\xf2\x1c\x8f\x24\xa1\xe7\xd6\xc9\x16\xf6\x74\xb3\x1a\x42\xc6\xa9\xd6\x29\x19\xd6\x4e\x4f\xb8\xbe\x51\x5b\x2f\x03\x59\x93\x7a\xc8\x29\x71\xcf\xe4\xfc\x67\x26\x72\x79\x1b\x27\xa1\xbf\x1d\x9a\xb8\x36\x09\x83\x36\x09\x15\x13\x29\x99\x91\x56\x84\xcd\xa6\x56\x4c\x98\x02\xc8\xdf\x72\x02\xc1\x7b\x29\x0a\xb6\x0c\x3c\xe8\x76\xdb\xe6\xf9\xd6\xdd\x0e\xd9\x84\xf5\x23\xc8\x5d\xc9\x1a\x3e\x3e\x31\xb7\x2b\x59\x7f\xec\x98\x19\x59\xdf\x9c\xc8\xeb\xe2\xa9\x78\x5d\xc9\xfa\xe2\x22\x33\x7d\x4e\xf5\x09\x9c\x3e\x31\xf1\xc7\x39\x45\x04\xb4\xc1\x3a\x0d\xa2\x28\x8a\x66\xfb\xfc\x82\x57\x05\x81\xe0\x13\x13\x17\x1d\xbd\x8a\x89\x53\xe8\xbd\x43\x5a\xfd\xec\xda\xd6\xd3\xa6\xb3\xc3\xed\x08\x2e\x90\x56\xae\x41\x9e\xc0\xf2\x03\xd6\x4f\xce\xd0\x61\x76\xec\x72\x7b\x77\x02\xb3\x0b\x85\x05\xbb\x83\x7f\xe3\xb2\xe1\x54\xb1\xdf\xa9\xed\x32\xff\x43\xba\x1f\x4c\xb6\x77\x34\xf4\xd3\xb1\xaf\xdd\xa4\xc2\xe5\x09\x11\x7c\xcf\x38\x7e\xa6\x15\x3e\x82\xb4\xdd\x82\x1c\x10\x55\x13\x08\x76\x28\x1d\xa5\x82\x71\xb4\x57\xc7\x18\xf9\x17\xc6\xdb\xc6\xc8\x71\x13\xde\x6f\xf3\x63\xf6\x23\x6a\xed\xbe\xb5\xf7\x06\xdb\x11\x25\x17\x0a\x73\x96\x19\x32\x0a\x2c\x1c\xcb\x71\xb2\x83\xcf\x78\x0b\x8a\x8a\x5c\x56\xa0\x69\x55\x73\xfc\xa2\x2b\x0a\xa5\xc2\x22\x25\xa1\xa6\x2b\x0c\x37\x9b\xe0\x23\xae\xed\xfb\xea\x92\xae\x10\x8c\x84\x8c\x1a\xca\xe5\x32\x09\xe9\xfc\xe8\xcb\x69\xf8\x12\x1f\xdc\x01\x24\xe5\x6c\xfe\x5e\xe6\x98\x84\xe5\x6c\xe4\xbf\xdb\x4b\xfa\x68\x32\x17\x4d\xfb\x92\x72\x37\xf3\x51\x7a\x2d\x8e\x7d\x8b\xee\x16\xee\xfb\xb1\x71\xdb\x9a\xd4\x07\xdc\xf5\x5e\x81\x7e\x53\x76\x00\xbf\x5b\x6f\xdd\x8c\x22\x69\x37\x16\xa5\xbc\xfd\xd0\xa8\xb6\xf2\x87\x1e\xca\xd9\x7c\x37\xb5\xef\xff\x51\x0c\xee\x91\x0f\xb8\x1f\x6f\x13\xac\x3f\xff\x40\x9e\x14\xad\x5f\x7a\xc0\x93\xc5\xb5\x9d\xf3\x34\x11\xdd\xca\x07\x50\x3f\xa0\xa1\x8c\x63\x0e\x0f\xc1\x77\x25\x69\xfb\xb4\xbe\xaf\x49\x30\x54\x2d\xd1\xa4\xe4\x3f\x0b\x4e\xc5\x0d\xd9\x43\x3a\x50\x0b\xc2\x96\x09\xbc\xc3\x42\x2a\x84\xb7\xbb\xff\x5e\xc7\x63\xea\xfe\xa2\x91\x71\xf2\xba\x8d\xa7\x07\xdc\xdb\xfe\xd9\xed\x6b\x4d\x05\xb8\x8d\x71\x4a\xf6\xfe\x49\x6d\x36\xc1\x7b\x7b\xd1\x6e\x08\xaf\xe4\x0d\xba\x2c\xdb\x45\x63\x5f\xbb\x5a\x7b\xa7\x90\xde\x6c\xb7\xc9\x42\xcd\xf7\xb3\x7f\xb8\x26\xf6\x9e\x47\x38\xd4\x73\xf7\x2c\xec\xd3\x68\xff\x23\x1d\x62\xe2\xe3\xfe\x86\xe3\x0a\x39\xc4\xe9\x4e\x81\x1f\x6d\x9b\x1e\x6f\xbe\x77\x58\x6a\x1f\x68\x08\xe6\xfe\xf2\xc5\x69\x0b\x7b\x10\xc5\x23\xe5\xa3\xfa\xf2\x4b\x5d\x17\xc8\x1f\x72\x72\x48\x2a\x2f\xcd\x21\x62\x0f\xd9\x7f\x39\xe3\x47\x22\xf5\xc4\xef\xd3\xfc\x30\xd9\x56\x11\x57\x25\x4e\xde\x1f\x90\xe6\x87\x75\x6d\x81\x8f\xd4\x98\x87\xb1\x0f\x8c\xdb\xe4\xa4\xb3\x08\xab\xf9\xff\x4f\xaa\xe7\x56\x24\x49\x78\xe0\xa9\x39\xd8\xf9\x76\xed\xa8\xdd\x06\x3c\x61\x3f\x6a\x11\x9f\x73\x43\x6a\x25\xf8\x93\x17\xdb\xa3\x72\xfe\xb5\x25\x8d\xa3\x78\x6e\x65\xf2\xc7\x7b\xd2\xdb\xc2\xa0\x7a\xc2\x8e\xe4\xf0\x9e\x73\x3f\x72\x02\xfc\xc9\xcb\xec\x11\xf9\xfe\xda\x8b\xc6\x51\x3c\xaf\x12\x79\x4c\x27\x1a\x7e\xca\xbe\xbf\x49\xc2\x42\xaa\xca\x1d\x30\x84\xbb\x13\x86\x44\x67\x8a\xd5\x06\xb4\xca\x52\x52\x1a\x53\xeb\x38\x0c\x33\x99\x63\x70\xfd\x5b\x83\x6a\x1d\x64\xb2\x0a\xfd\xe5\xf4\x3c\x98\x05\x51\x50\x31\x11\x5c\x6b\x32\x4f\x42\xbf\xb4\x8f\xd2\x3b\x20\xbd\xa6\x2b\xea\x47\xdb\xa6\xb6\xa2\x0a\x0a\x85\xbf\x41\x0a\xb3\x28\xea\x86\x38\x35\xa8\x0d\xa4\x30\xfa\x96\xf7\xa3\x1b\x6f\xe3\x77\x6b\xa5\xaa\x20\x85\x5c\x66\x4d\x85\xc2\x04\x4b\x34\xff\xe0\x68\x2f\xf5\xbb\xf5\x67\x5a\xe1\xc4\x9f\x83\x9c\xfd\x12\xfd\xda\x2d\xb2\x91\x7c\x61\x91\xfb\x2a\xd2\x2d\x72\xa1\xeb\x4c\x49\xce\xaf\x64\x0d\x69\x7f\xe0\x07\x77\x2c\xf7\xc2\xd9\x15\x8d\x70\x67\x32\xa0\x0d\x5d\x7f\xaf\x50\x97\x93\xb3\xdd\xf1\xce\x37\x01\xbd\xa6\x77\x93\x4d\x97\x90\x46\xf1\x18\x48\xc8\xb4\x33\x0c\xc9\xcb\x6e\xc6\x0a\x16\x03\xa9\xa5\x36\xbd\xd1\xcc\xbe\x44\x84\xb9\xf2\x93\xb4\xae\x39\xcb\xdc\x27\x8c\xf0\x5a\x4b\xf1\x06\xb2\x92\x2a\x8d\x26\x6d\x4c\x31\xfd\xae\xb7\x2e\xa7\x86\xc6\xf0\xaf\xcb\x9f\x3e\x07\xda\x28\x26\x96\xac\x58\x4f\x36\x5e\xe1\xed\xd9\xd0\xae\x05\xb7\x80\x3d\x04\xdd\x64\x19\x6a\x1d\x77\xf1\x4d\xd4\x19\x6c\x7a\xc5\xc6\x0a\x98\x28\xf8\x4b\xda\xe6\x6d\x38\x09\x2e\x49\x81\xff\xa0\x36\x39\xeb\xcd\xdc\x97\xf1\xee\x6a\x7b\xd6\x1e\x7d\xbd\xf1\x82\x5a\x60\x2e\x7d\x98\x41\xa9\xb0\x08\x98\xc8\x78\x93\xa3\x9e\x10\xda\x18\x49\xce\xce\x7a\x87\x8d\xaa\x0a\xfc\x99\x18\xa4\x40\x42\x3b\x1f\x92\x76\x52\xa3\xf9\xa7\x30\xa8\x56\x94\x4f\xba\xe4\xbc\x74\xa5\xe7\x19\x6d\x5f\xf8\xd3\xb6\xb6\x7a\x93\xd0\x9f\xf2\xff\x37\x00\x00\xff\xff\x94\x3e\xb8\x66\xed\x1f\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 8173, mode: os.FileMode(436), modTime: time.Unix(1602734099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSaveHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\xad\x83\x30\x0c\x40\xef\x7f\x0a\x2b\x03\xe0\x3b\xdf\x64\x81\xf6\xd6\x09\x5c\x70\x4b\x44\x4a\x10\xb1\x68\xa3\x88\xdd\x2b\x02\xed\xb1\x47\xdb\xef\xe9\xc9\xd4\xeb\xc3\xdb\x3f\x00\x8a\x9a\xbc\x80\xa6\x49\x1a\xa3\xf2\x52\x6c\x63\x34\xdb\x05\x80\x6b\xef\xc6\x01\x72\x19\x00\xda\xe0\xc3\x5c\xc3\xc8\x4b\xfa\x2f\xab\xf5\xa0\x16\x17\x9d\x4a\xf7\x1b\x24\x2c\xa5\xd2\xbc\x86\x2e\xed\x09\x9a\xec\x85\x17\xe9\xe0\xe9\xb4\x87\x41\x52\x0d\x39\x57\x27\x49\xeb\x4a\x38\x7d\x19\x62\xe8\x67\xb9\x35\x06\x5b\x56\xf6\xe1\x8e\x1f\xca\xd8\x9c\xab\xb3\x1b\x87\x4d\x60\x7b\x48\x84\x7b\x82\x70\xff\xf3\x1d\x00\x00\xff\xff\x24\x9f\x05\x8a\xef\x00\x00\x00")

func templatesSaveHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSaveHtml,
		"templates/save.html",
	)
}

func templatesSaveHtml() (*asset, error) {
	bytes, err := templatesSaveHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/save.html", size: 239, mode: os.FileMode(436), modTime: time.Unix(1586466680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/beams.html": templatesBeamsHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/save.html": templatesSaveHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"beams.html": &bintree{templatesBeamsHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"save.html": &bintree{templatesSaveHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

