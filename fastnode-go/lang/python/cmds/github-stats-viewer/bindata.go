// Code generated by go-bindata.
// sources:
// templates/search.html
// templates/stats.html
// templates/toplevel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xcd\x8e\xd3\x30\x10\xbe\xf3\x14\x43\xb4\xd7\xb5\x97\x5d\x90\x50\x70\x73\xe1\x84\xb4\xe2\xb0\x88\x07\x70\xe3\x69\x93\xe2\xc4\xc1\x9e\x2e\x8d\x42\xde\x1d\x3b\x6e\xfe\xda\x72\x00\x1f\x62\xcf\x37\x3f\xdf\x37\xf6\x28\xe2\xad\x32\x39\xb5\x0d\x42\x41\x95\xce\xde\x88\xb8\x81\x5f\xa2\x40\xa9\xe2\xd1\x1b\x54\x92\xc6\xec\x4b\xd5\x18\x4b\xb0\xb7\xb2\x29\x04\x8f\xd8\x18\xe1\x72\x5b\x36\x04\xa1\xd8\x26\x21\x3c\x11\x3f\xc8\x57\x19\xd1\x04\x9c\xcd\x37\x49\x41\xd4\xb8\x94\xf3\xdc\x28\x64\x87\x9f\x47\xb4\x2d\xcb\x4d\xc5\xe3\xf1\xfe\x91\xbd\x63\xef\x59\x55\xd6\xec\xe0\x92\x4c\xf0\x98\xfb\x3f\x04\x95\x3c\xe5\xaa\x66\x5b\x63\xc8\x91\x17\x1b\x8c\x40\x34\x01\xfc\x89\x3d\xb1\x0f\xfc\xe0\x66\xe8\xef\xc4\xba\xac\x7f\x80\x45\xbd\x49\x1c\xb5\x1a\x5d\x81\xe8\x09\x17\x3a\x72\xe7\x12\x28\x2c\xee\xfe\x5d\x81\x4f\xbd\x90\x10\x8a\x79\x0d\x81\x74\x6e\x3d\xf0\x8e\xd6\xd6\xa8\x16\xba\xb3\x01\xd0\x48\xa5\xca\x7a\x9f\xc2\xe3\x43\x73\xfa\x34\xc1\xbf\x4a\x45\x45\x0a\x1f\x1f\x16\x68\x7f\xde\x49\x2d\xf2\x77\xa6\xa6\xfb\x9d\xac\x4a\xdd\xa6\x50\x99\xda\xb8\x46\xe6\x78\x99\xe2\x2f\x65\xd6\x20\xf8\x3c\x1b\x22\xc8\x99\x84\xaa\xf2\x15\x72\x2d\x9d\xf3\x37\x23\xb7\x1a\x93\x6c\xe2\x11\x03\xb0\xf2\xc2\xf0\xbd\xf7\xbd\x97\x0d\xaa\x45\x6c\x88\x5e\x8e\xdf\x88\xd9\x35\x10\x20\x95\x7d\x95\x15\xfa\x61\x54\xb7\x7c\x9f\xcd\xb1\xa6\x6b\xa7\x47\x56\xa5\xbc\x7d\x49\x27\x68\xd9\x58\x5c\x5d\x67\x65\xbd\x47\xb8\xb3\x90\x6e\x80\xbd\xa0\x3b\x6a\x72\x7d\x7f\x45\x7c\xa5\x33\xaa\x11\xf2\x3c\x25\x5d\x77\x67\xd9\x37\x92\xe4\xe0\x37\xb8\xb0\x7f\x7f\x79\xee\xfb\x24\x1b\x1c\xcf\x72\x8b\xba\xef\x05\x97\xd9\xad\xbe\x62\xad\xb9\x04\x1b\x9a\xf4\x85\xfc\x7c\x55\x32\xe4\xdd\xb8\x0b\x7e\xa9\xa9\xeb\xb0\x56\x2b\xe9\x3e\x66\xdd\xb2\x07\xc2\xfb\x4c\x8f\xcb\xfd\xeb\x8e\x03\x30\x46\x9e\x41\x3f\x11\xc3\x8f\xe3\x4f\x00\x00\x00\xff\xff\x0e\x3d\xc8\xfd\x50\x04\x00\x00")

func templatesSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchHtml,
		"templates/search.html",
	)
}

func templatesSearchHtml() (*asset, error) {
	bytes, err := templatesSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search.html", size: 1104, mode: os.FileMode(420), modTime: time.Unix(1468380534, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesStatsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\xcf\x6e\x9c\x3c\x10\xbf\x7f\x4f\x31\x1f\xca\xa5\x52\x63\x37\x49\x7b\xd9\x1a\xa4\xaa\x87\x28\x52\x1b\x55\xad\xfa\x00\x06\x7b\x03\x1b\x6c\x53\xdb\x89\x82\x5c\xde\xbd\x63\xd8\x05\x16\xa1\x34\x9b\x72\x00\xcf\xd8\x33\xbf\xdf\xfc\xf1\xc0\xfe\x17\xa6\xf0\x6d\x23\xa1\xf4\xaa\xce\xfe\x63\xc3\x07\xf0\x61\xa5\xe4\x62\x58\xf6\xa2\xaf\x7c\x2d\xb3\xeb\xca\x97\x0f\x39\x7c\xe3\xc5\x3d\xbf\x93\xf0\xc3\x73\xef\x18\x1d\xf6\xa6\xb3\xae\xb0\x55\xe3\x21\x3a\x4e\x13\x2f\x9f\x3c\xdd\xf1\x47\x3e\x68\x13\x70\xb6\x48\x93\xd2\xfb\xc6\x6d\x28\x2d\x8c\x90\x64\xf7\xeb\x41\xda\x96\x14\x46\xd1\x61\x79\x7e\x49\x2e\xc8\x7b\xa2\x2a\x4d\x76\x2e\xc9\x18\x1d\x6c\x5f\x07\xa1\xf8\x53\x21\x34\xc9\x8d\xf1\xce\x5b\xde\x44\x21\x42\x8d\x0a\x7a\x45\xae\xc8\x07\xba\x73\x93\xea\x39\xe8\xba\xd2\xf7\x60\x65\x9d\x26\xce\xb7\xb5\x74\xa5\x94\x08\x39\x63\x52\x38\x97\x40\x69\xe5\xf6\x74\x0e\x68\xba\x20\x11\x9d\x21\x8b\x08\x3a\x0f\x3f\x22\x4f\x72\x6e\x44\x0b\x61\x14\xe3\xd3\x70\x21\x2a\x7d\xb7\x81\xcb\x77\xcd\xd3\xc7\x71\xab\x1b\x57\x5e\x2c\x2c\xb6\x46\xfb\xf3\x2d\x57\x55\xdd\x6e\x40\x19\x6d\x5c\xc3\x0b\xb9\x66\x8a\x49\x99\xf0\x19\x9d\x3a\x85\x45\x22\x07\x5a\x4c\x54\x8f\x50\xd4\xdc\x39\xcc\x0b\xcf\x6b\x99\xcc\xdb\x29\x2a\x8e\x76\xa1\x7f\x9f\x63\xe4\x55\x23\xc5\xec\x6c\x3c\x3d\xf7\x3b\x68\x6c\x76\x44\x9e\x61\x38\x85\xa9\x91\xb2\x4e\x93\x2b\xcc\x58\x9e\xdd\x72\x25\x19\xcd\x31\x79\x5e\x3c\x7f\x38\x04\xd2\x77\x32\x89\x26\x5d\xb7\x34\x40\xd9\x9e\x0a\xfe\xd9\x3c\x68\x7f\x22\x7a\x6f\x03\xbf\x71\x53\x29\xfe\x0a\x1a\xab\x44\x42\xa8\xb6\xb0\x07\xb8\xd1\xd7\xd8\x56\x65\xd7\xdd\x68\xe8\x57\x21\xc8\xda\x61\xc4\xb7\xc6\xc3\x4c\xa7\x45\x44\x5f\xe3\xbe\xc6\x7e\xc5\x3f\xe3\xfb\xfe\x9f\x32\x8b\xf7\x1c\x43\xd3\xf8\xf9\xf9\xfd\x4b\xd7\xcd\xc2\xfe\xa4\xdb\x43\xde\x79\x36\xa2\xff\x7b\x09\xbe\x4a\x95\x4b\xeb\xd6\x02\xe9\xdd\x01\xcc\x34\x21\x58\xae\x71\xa2\x9d\x55\x6f\xcf\x14\x6c\xd2\x43\x48\x7b\x27\x48\xdd\x19\xeb\xbb\x6e\x01\xfa\xd7\x0a\x84\x80\xf7\x10\xbd\xc2\x45\xd7\xbd\x01\xcc\x4b\x7f\x73\xd2\x04\xcf\x18\xbb\x09\x01\xc1\x62\xc1\x51\xc0\x9c\x8c\x49\xeb\xb5\x2e\x12\x18\x93\x75\xa6\xc8\x94\xa5\x17\x17\x06\xad\xd6\x8a\x12\x9d\xad\x14\x04\xd5\x2f\x29\xc6\x3a\x1a\x1a\x2f\x1a\x18\x56\x7a\x7f\x51\xc7\x3d\xc2\x6c\xb2\x1c\x5d\x75\x14\xe3\x50\x38\x0c\x9a\xc3\x16\xa3\x38\x5a\xf0\x6f\x45\x87\xdf\xd5\x9f\x00\x00\x00\xff\xff\x77\xcf\x7c\x7b\xc6\x06\x00\x00")

func templatesStatsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesStatsHtml,
		"templates/stats.html",
	)
}

func templatesStatsHtml() (*asset, error) {
	bytes, err := templatesStatsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/stats.html", size: 1734, mode: os.FileMode(420), modTime: time.Unix(1469139869, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesToplevelHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x51\x6f\x9c\x38\x10\x7e\xcf\xaf\x98\x58\x79\x39\xe9\xb0\x2f\xd9\xbb\x7b\xd8\x02\x2f\x55\x95\x97\xaa\xaa\x9a\xf6\x07\x78\xb1\x77\x61\x03\x36\xb1\x87\x34\x2b\xca\x7f\xef\x18\x96\x05\x76\x53\x45\x6d\xa4\x04\x3c\xf3\x8d\xe7\x9b\x6f\x86\x49\x7c\xad\x6c\x86\x87\x5a\x43\x8e\x55\x99\x5e\xc5\xc3\x03\xe8\x27\xce\xb5\x54\xc3\x2b\x1d\xb0\xc0\x52\xa7\xf7\x05\xe6\xcd\x06\x3e\xcb\xec\x51\xee\x34\x3c\xa0\x44\x1f\x8b\xc1\x37\x22\x7d\xe6\x8a\x1a\x21\x5c\x9a\x30\xd4\x2f\x28\xf6\xf2\x59\x0e\x56\x06\xde\x65\x09\xcb\x11\x6b\xbf\x16\x22\xb3\x4a\xf3\xfd\x53\xa3\xdd\x81\x67\xb6\x12\xc3\x6b\x74\xc7\x6f\xf9\xbf\xbc\x2a\x0c\xdf\x7b\x96\xc6\x62\x88\xfd\x93\x04\x95\x7c\xc9\x94\xe1\x1b\x6b\xd1\xa3\x93\x75\x38\x84\x44\x27\x83\x58\xf1\x15\xff\x4f\xec\xfd\x64\xfa\x75\xe2\xb2\x30\x8f\xe0\x74\x99\x30\x8f\x87\x52\xfb\x5c\x6b\x4a\x38\xe3\x91\x79\xcf\x20\x77\x7a\xfb\xfb\x0c\x28\xf4\x8c\x42\xb8\x8c\x38\x84\xa4\x53\xe9\x21\xef\x78\xda\x58\x75\x80\xf6\x78\x00\xa8\xa5\x52\x85\xd9\xad\xe1\xee\x9f\xfa\xe5\xdd\xd1\xdc\x1d\x9f\xdc\x6b\xe9\xb2\x3c\x72\xf6\xfb\x2c\xa4\x92\x6e\x57\x98\x68\x63\x11\x6d\xb5\x86\xd5\x2b\x81\xa8\x66\xf8\xad\x35\x18\x6d\x65\x55\x94\x87\x35\x54\xd6\x58\x5f\xcb\x4c\x9f\x87\x90\x6e\x13\xcd\x58\x4c\x63\x14\x07\xc6\xe9\xd5\x08\x53\xc5\x33\x64\xa5\xf4\x3e\x61\x81\xd6\xc4\x90\xa5\xa7\x8c\xf1\xd6\xba\x0a\x64\x86\x85\x35\x09\x13\x03\x86\x41\xa5\x31\xb7\x2a\x61\xf7\x1f\xbe\xce\xc0\xcb\x3b\x33\x5b\x46\xe5\x2e\xfa\x7f\x01\x58\x42\x0a\x53\x37\x18\xed\x9c\x6d\xea\x33\x14\xe1\x7a\xe7\xac\xbb\x6c\x8c\x0a\x94\xa2\x8c\xa4\x70\xb6\x64\x50\x97\x24\x41\x6e\x4b\xa5\x5d\xc2\x1e\x7a\x7e\xa4\x93\xe3\x9c\x33\x30\xb2\xa2\xe0\xa7\xcb\xbb\x49\x37\xf3\x0a\x89\x68\x83\xe6\x02\x1c\x74\x6b\xa8\x41\xa7\x00\x02\x01\xfd\x46\x4a\x6f\x65\x53\x9e\x26\xd0\x37\x9b\xaa\x40\x96\xde\xdb\xeb\x58\x0c\x11\x17\x79\x45\x48\x7c\xa6\x87\x20\x41\x16\x1a\x2e\x0d\xb1\x08\xf5\xa6\x70\xb5\xf0\xbe\xd2\x43\x94\x9b\x52\xcf\x5b\xd7\x1b\x16\x5e\xe8\xff\x46\x34\xe3\x45\xad\xd5\xb2\x73\x38\x5f\x37\xa3\xcd\x5d\x54\x80\x39\x50\x63\x43\x19\x09\x5b\xb1\xf4\xb8\x89\x68\x07\xe5\x6f\x41\xdf\xdb\xc6\xe0\x25\x90\x2c\x6e\x59\xfe\x05\x93\x18\x87\xc1\x9d\x2c\x6d\xeb\xa4\xa1\x05\x78\x53\xfc\x7d\xe3\xc3\x12\x84\x75\x02\xbc\x5f\x87\x5d\xf7\x76\x0d\x6a\x41\xac\x6d\xe9\xcb\xa5\xab\xe0\xb6\xeb\xfe\x82\x58\x42\xff\xf9\xf4\x03\x6c\xdd\xba\x6d\x8f\x19\x7e\x40\x6f\xe8\xba\x71\xc5\xcc\x3c\xfd\xf3\xdb\x97\x8f\xe4\x4c\x47\x33\xff\x44\xd3\xd7\x75\xb1\x90\xb4\x45\x50\xbd\xcd\xe2\x18\xd6\xeb\xd4\x67\xab\x2a\x19\xe2\xcf\x63\xcf\x15\x6b\x5b\x6d\xd4\xac\x6c\xf2\xcf\xf5\xa2\x63\xe8\xfa\xb8\x0e\x26\xd7\x71\x94\x68\x43\xf4\xff\x73\x7e\x06\x00\x00\xff\xff\xbe\x10\xe8\xd5\x8b\x06\x00\x00")

func templatesToplevelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesToplevelHtml,
		"templates/toplevel.html",
	)
}

func templatesToplevelHtml() (*asset, error) {
	bytes, err := templatesToplevelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/toplevel.html", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1469139908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/search.html": templatesSearchHtml,
	"templates/stats.html": templatesStatsHtml,
	"templates/toplevel.html": templatesToplevelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"search.html": &bintree{templatesSearchHtml, map[string]*bintree{
		}},
		"stats.html": &bintree{templatesStatsHtml, map[string]*bintree{
		}},
		"toplevel.html": &bintree{templatesToplevelHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

