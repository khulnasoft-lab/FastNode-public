// Code generated by go-bindata.
// sources:
// templates/node.html
// templates/search.html
// templates/toplevel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNodeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xcd\x72\xe2\x38\x10\xbe\xef\x53\x68\x5d\xb9\xda\xca\xe6\xe7\xe2\x18\xaa\x36\xc9\x85\xc3\xa6\xb6\x76\xe7\x05\x84\xd5\x60\x31\xb2\xec\x91\x3a\x21\x8c\x87\x77\x9f\x96\x0d\x18\x1b\x93\x10\x32\xc3\x01\xac\xb6\xba\xbf\xaf\xfb\x6b\xa9\x49\xfe\x94\x45\x8a\xab\x12\x58\x86\xb9\x1e\xff\x91\x34\x3f\x8c\x3e\x49\x06\x42\x36\x8f\xf5\x12\x15\x6a\x18\x4f\xf2\xb2\xb0\xc8\xe6\x56\x94\x59\xc2\x1b\x5b\xbb\xc7\xa5\x56\x95\xc8\x7c\xc0\x51\x80\xf0\x8a\x7c\x21\x5e\x44\x63\x0d\x98\xb3\xe9\x28\xc8\x10\x4b\x17\x73\x9e\x16\x12\xa2\xc5\xb7\x67\xb0\xab\x28\x2d\x72\xde\x3c\x86\x57\xd1\x5f\xd1\x4d\x94\x2b\x13\x2d\x5c\x30\x4e\x78\xe3\x7b\x1e\x44\x2e\x5e\x53\x69\xa2\x69\x51\xa0\x43\x22\xec\x17\x1e\x6a\x67\xe0\xd7\xd1\x75\x74\xcb\x17\xae\x35\xbd\x05\xad\x95\xf9\xca\x2c\xe8\x51\xe0\x70\xa5\xc1\x65\x00\x04\xb9\xc7\x24\x75\x2e\x60\x99\x85\xd9\xc7\x39\x90\x6b\x8f\x84\x0f\x46\x2c\x3c\xe8\x7e\xfa\x1e\xb9\x5d\x4f\x0b\xb9\x62\xd5\x6e\xe9\x3f\xa5\x90\x52\x99\x79\xcc\xae\x2e\xcb\xd7\xbb\xdd\xab\xf5\xee\xc9\x57\xbe\xe7\x83\x62\x1a\x3a\xf5\x1d\x62\x76\x33\xe4\x41\x8c\x9f\x0d\x76\x7c\x66\x85\xc1\x70\x09\x6a\x9e\x61\x4c\x2c\xb4\x1c\xf4\xc3\xa2\xd0\xa8\xca\x50\x19\x03\xb6\x87\xb9\xcc\x14\x42\xe8\x4a\x91\x12\x6c\x69\x21\x5c\x52\xe6\x77\x9d\x2d\x54\xbc\x70\xa9\x24\x66\x31\xbb\xbd\xec\x64\xd3\x49\xf4\xb2\x6b\xf7\x52\x84\x42\xab\xb9\x89\x99\x86\x19\x0e\x31\x43\xd9\x63\x53\xe7\x33\x13\xb9\xd2\xab\x98\xe5\x85\x29\x6a\x62\x43\xae\xd4\x18\xad\x06\x09\x6f\x4f\x49\xe2\xc5\xd8\x4a\x93\x48\xf5\xc2\x52\x2d\x9c\xa3\xde\x10\x53\x0d\xc1\xfe\x51\xf2\x86\xce\x5b\x56\x7f\x87\xa4\xbe\x2a\x41\xee\xed\xf5\xbb\xf7\xe3\x36\x16\x3b\xee\x90\x4f\x50\x8e\x93\xe9\xf8\x41\x98\xc2\xa8\x54\xe8\x27\x91\x43\xc2\xa7\xd4\x3d\x28\x0f\x76\x92\xfe\x9a\x92\x33\xa3\xe0\x3a\x18\x57\x55\xf4\xe4\x0f\x62\xc7\x35\xfa\x9f\x68\x98\xf9\x7a\xdd\xf7\xa7\xb5\x3d\x89\x88\xcf\x4c\xcd\x28\x1e\xaa\xc2\x7c\x90\x49\xc7\xf7\x7c\x0e\x93\xc7\xd3\x70\x13\xb1\x39\xb1\x1b\x02\xec\x07\x7b\xb6\x7a\xbd\x6e\x19\x4d\x1e\x3d\x0b\x71\x10\xeb\x54\x26\x5f\xe8\x82\x38\x95\x4d\x55\xa9\x19\x6b\x60\xbd\x1b\x01\xf7\xe8\xd5\xe6\x43\x8e\x1b\xab\x21\xf5\x1a\xb2\x55\x05\x46\x1e\xab\xde\x3b\xa4\x5b\x46\x37\x81\x4f\xe0\x5e\x38\x70\x43\xfc\xfb\x15\xa8\x2a\x2b\xcc\x1c\xd8\x45\xce\xe2\x11\x8b\x6a\xbf\xf5\xba\x17\xbe\x87\xb7\x29\xd3\x41\x65\x36\xf6\x6d\xfa\x5c\x49\x5e\x55\x17\x79\x93\xb4\xff\x1d\x92\x64\x88\x52\x5d\x87\x8f\xa6\xfc\x0f\xe4\x53\xb0\xe7\x24\x5d\xcb\xb1\x71\x27\x45\x1c\x4d\xcb\xcf\x95\xa0\x6e\x89\x8b\x3c\x7a\xc8\x94\x96\x9d\x86\xd8\x1a\xf7\xdb\x81\x6c\x7f\x23\xda\x5d\x13\x68\x47\x0d\xb1\x67\x3e\xd2\x17\x47\xc0\x3a\x18\x4d\x73\x9d\x1b\xe0\xe0\x60\x1f\x0d\xf4\x8b\x24\xfc\x0f\x66\x60\xc1\xa4\x20\xd9\xfd\xea\x0c\x21\x27\x86\xe6\x74\x7d\x0d\x7e\x42\xbd\x63\x57\x0d\x55\xe5\x5f\x41\xec\xb0\xa7\xdd\xce\xd8\x9e\xe4\xa8\x23\xea\xef\x2a\x96\x58\x9e\x52\xa2\xe1\x2b\xee\xfd\x3b\x96\xc6\xbb\xbf\xaa\x08\xc5\xe7\xe0\x57\x6f\x23\xd1\xaa\x33\x4c\x79\x3d\x1e\xb7\x23\x77\xfb\x2a\xe1\x34\x64\xe9\x3f\x2b\x6f\xfe\xb4\xfe\x0c\x00\x00\xff\xff\x78\x63\x58\xf7\xcc\x0a\x00\x00")

func templatesNodeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesNodeHtml,
		"templates/node.html",
	)
}

func templatesNodeHtml() (*asset, error) {
	bytes, err := templatesNodeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/node.html", size: 2764, mode: os.FileMode(420), modTime: time.Unix(1474946158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xcd\x72\xd3\x30\x10\xbe\xf3\x14\x8b\xa7\xd7\x48\xa5\x2d\x33\x8c\x51\x7c\xe1\xc4\xc0\xf4\xc0\x1b\x28\xd2\xa6\x56\x90\x25\x23\x6d\x4a\x82\xc9\xbb\x23\xc5\x89\x63\x3b\xe1\x00\x3e\x44\xda\x4f\xbb\xfb\x7d\xfb\x33\x11\x6f\xb5\x57\xb4\x6f\x11\x6a\x6a\x6c\xf5\x46\xf4\x07\xa4\x4f\xd4\x28\x75\x7f\x4d\x06\x19\xb2\x58\x7d\x6e\x5a\x1f\x08\x5e\x82\x6c\x6b\xc1\x7b\xec\xec\x11\x55\x30\x2d\x41\x4e\xb6\x2c\x08\x77\xc4\x37\xf2\x55\xf6\x68\x01\x31\xa8\x65\x51\x13\xb5\xb1\xe4\x5c\x79\x8d\x6c\xf3\x63\x8b\x61\xcf\x94\x6f\x78\x7f\x5d\x3c\xb0\x77\xec\x89\x35\xc6\xb1\x4d\x2c\x2a\xc1\xfb\xd8\xff\x21\x68\xe4\x4e\x69\xc7\x56\xde\x53\xa4\x24\x36\x1b\x99\x68\x00\xf8\x23\x7b\x64\xef\xf9\x26\x5e\xa0\xbf\x13\x5b\xe3\xbe\x43\x40\xbb\x2c\x22\xed\x2d\xc6\x1a\x31\x11\x8e\x74\xa8\x18\x0b\xa8\x03\xae\xff\x5d\x41\x0a\x9d\x49\xc8\xc9\x92\x86\x4c\x7a\x29\x3d\xf3\x9e\xad\x95\xd7\x7b\xe8\x4e\x06\x40\x2b\xb5\x36\xee\xa5\x84\x87\xfb\x76\xf7\x71\x80\x7f\x1a\x4d\x75\x09\x1f\xee\x47\xe8\xe1\x74\xe6\xfe\x8f\x32\x90\x5c\x2d\xa2\xf9\x85\x25\x3c\xcd\x3d\x49\x8f\xfc\xd6\xde\xd1\x62\x2d\x1b\x63\xf7\x25\x34\xde\xf9\xd8\x4a\x85\xf3\x90\xd4\xbe\x8b\x5a\xc1\x2f\x5b\x24\xb2\xf0\xa1\x24\x6d\x5e\x41\x59\x19\x63\xea\xa1\x5c\x59\x2c\xaa\x81\x47\x1c\x81\xc9\x2b\x1c\x7f\x17\xa9\x4b\xa6\x45\x3d\xf2\xcd\xde\xe3\x45\x3d\x63\x61\x0a\x64\x48\x57\xcf\xb2\xc1\xb4\xb6\xfa\xd6\xdb\x17\xe3\xf4\xf5\x5b\x42\x26\x99\x92\x3d\x67\x13\x34\xae\xab\xff\xba\x2e\x48\xf7\x82\x70\x17\xa0\x5c\x02\xfb\x86\x71\x6b\x29\x1e\x0e\x57\xbc\x57\x32\x7b\x31\x42\x9e\xd6\xa9\xeb\xee\x02\x7b\xce\xe3\xfa\x0d\xdb\x60\x0f\x87\xa2\x3a\x42\x5f\xe5\x0a\x93\x25\xb8\xac\x6e\x15\xd4\x67\x19\x82\xd9\xa7\xdc\x4a\xb3\x36\x4a\x92\xf1\x2e\xc7\xdd\x68\x02\x9f\xab\xe9\x3a\x74\x7a\x22\x3a\xf9\x4c\x8b\x4d\x40\x1e\xcc\x30\x55\x9e\xc6\x7a\x9e\xfc\xd9\xf3\x04\xa6\x55\x38\xfe\xb7\xfc\x09\x00\x00\xff\xff\x69\x3d\x6b\xc8\x73\x04\x00\x00")

func templatesSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchHtml,
		"templates/search.html",
	)
}

func templatesSearchHtml() (*asset, error) {
	bytes, err := templatesSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search.html", size: 1139, mode: os.FileMode(420), modTime: time.Unix(1457734071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesToplevelHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xcb\x6e\xeb\x36\x10\xdd\xe7\x2b\x18\xa2\xcb\x52\x4c\xf3\xe8\x42\x91\xb4\x2b\x82\x2e\x0a\x14\x68\x7f\x80\x16\x69\x89\x0e\x45\x2a\xe4\x28\x8e\xab\xfa\xdf\x3b\xb4\x6c\xeb\xe5\xe2\xe2\x5e\x03\xb6\xc4\x99\x33\x3c\x67\x66\x38\x74\x76\x2f\x5d\x09\x87\x56\x91\x1a\x1a\x53\xdc\x65\xc3\x83\xe0\x27\xab\x95\x90\xc3\x2b\x2e\x40\x83\x51\xc5\xef\x4d\xeb\x3c\x90\xca\x8b\xb6\xce\xf8\x60\xbb\x20\x42\xe9\x75\x0b\x24\x6e\x96\x53\x50\x5f\xc0\x77\xe2\x53\x0c\x56\x4a\x82\x2f\x73\x5a\x03\xb4\x21\xe5\xbc\x74\x52\x25\xbb\x8f\x4e\xf9\x43\x52\xba\x86\x0f\xaf\xec\x31\xf9\x25\x79\x4e\x1a\x6d\x93\x5d\xa0\x45\xc6\x87\xd8\x1f\x21\x68\xc4\x57\x29\x6d\xb2\x71\x0e\x02\xa0\xd8\xb8\x88\x44\x57\x03\x7f\x4a\x9e\x92\x17\xbe\x0b\xa3\xe9\xff\x89\x8d\xb6\xef\xc4\x2b\x93\xd3\x00\x07\xa3\x42\xad\x14\x12\x4e\x74\x94\x21\x50\x52\x7b\xb5\xfd\x7e\x05\x18\xba\x90\x10\x37\x43\x0d\x91\x74\x4c\x3d\xf2\x5e\x56\x1b\x27\x0f\xa4\x3f\x2f\x08\x69\x85\x94\xda\x56\x29\x79\x7c\x68\xbf\x5e\xcf\xe6\xe3\xf9\x19\x2b\x3d\xc1\x82\xd8\xb0\xa0\xff\x51\x29\x79\x5e\x22\x51\x5d\x67\x61\x82\xdd\x3a\x0b\x6c\xaf\x74\x55\x43\x8a\x9c\x46\xae\x22\xc0\x39\x03\xba\x65\xda\x5a\xe5\x27\x91\xfb\x5a\x83\x62\xa1\x15\x25\x12\xb5\x5e\xb1\x3d\xe6\xf6\x7a\x75\x63\x69\xd8\x5e\x4b\xa8\x53\xf2\xf2\x30\xd1\x3c\x49\xe5\x61\xb4\xc5\x02\x33\x61\x74\x65\x53\x62\xd4\x16\x56\x2a\x82\x12\xbe\xac\x99\x77\xfb\x89\x84\x46\xf8\x4a\x5b\xb6\x71\x00\xae\x49\xc9\xd3\x8d\xd2\x80\x5c\x26\xbb\x15\x8d\x36\x87\x94\x34\xce\xba\x93\xfa\x65\x08\x9e\x8c\xb1\x11\x19\x1f\x07\x24\x8b\x3d\x29\xee\x2e\x30\xa9\x3f\x49\x69\x44\x08\x39\x8d\xb2\x46\x85\xb4\xb8\x32\x66\x5b\xe7\x1b\x22\x4a\xd0\xce\xe6\x94\x0f\x18\x4a\x1a\x05\xb5\x93\x39\x7d\xfb\xed\xef\x09\x78\xbe\x67\xe9\x0c\x33\x15\xfb\x75\x06\x98\x43\xb4\x6d\x3b\x60\x95\x77\x5d\xbb\x40\x21\xee\xe4\x9c\x9c\x5f\x7a\x89\x8a\x92\x58\x89\xa5\xf0\xce\x50\xd2\x1a\x2c\x41\x8d\x8d\x57\x3e\xa7\x7f\x9d\xf4\x61\x9d\x7c\x92\x24\x94\x58\xd1\x60\xf0\xc7\x7a\x6f\xac\x9b\xbd\x21\x82\x6d\xc0\xae\xc0\xb1\x6e\x1d\x36\xe8\x1a\x80\x20\x82\x5f\x26\xd5\x56\x74\xe6\x3a\x63\xa1\xdb\x34\x1a\x68\xf1\xe6\xee\x33\x3e\x44\xac\x78\x79\x24\x5e\xd4\x83\x63\x41\x66\x35\x9c\x1b\x32\x1e\xf3\x2d\xc8\xdd\xcc\x7b\xa3\x87\x38\x35\x46\x4d\x5b\x77\x32\xcc\xbc\xe4\xf4\xcb\x70\x8a\x75\xab\xe4\xbc\x73\x30\xbd\x48\x2f\x36\xbf\xca\x00\xea\xe2\x4f\x51\xbe\x8b\x4a\xe1\xcd\x5a\xdf\x72\xff\xa1\x9a\x8d\xf2\x61\xed\x46\x8b\x9f\x27\xba\xe2\xcc\x60\x38\xa2\xa3\xa5\xef\xbd\xb0\x95\x22\x3f\xc5\x5e\xfe\x8c\x8f\x78\x55\xa4\x39\x49\xce\x2a\xc2\xf1\xf8\x6d\xcd\xb2\xc8\xc4\xf9\xe6\xeb\xfb\x61\x8b\x7f\x49\xe7\xcd\xf1\x48\x8b\x68\xc0\xad\x8f\xc7\x8c\x0b\xbc\xd0\x40\xde\x0a\xef\x7b\xa3\xec\x40\x9e\x9c\xf3\x8b\x01\x4b\xf0\x32\xc3\xbe\x57\x56\x4e\x04\xa2\x7f\x9a\x1f\x2e\x63\x3f\x2e\x83\x3a\xba\xce\x4d\xc6\xd9\x3d\xfd\xcf\xfd\x17\x00\x00\xff\xff\x22\xd9\x5a\xe4\xff\x06\x00\x00")

func templatesToplevelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesToplevelHtml,
		"templates/toplevel.html",
	)
}

func templatesToplevelHtml() (*asset, error) {
	bytes, err := templatesToplevelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/toplevel.html", size: 1791, mode: os.FileMode(420), modTime: time.Unix(1457734071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/node.html":     templatesNodeHtml,
	"templates/search.html":   templatesSearchHtml,
	"templates/toplevel.html": templatesToplevelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"node.html":     &bintree{templatesNodeHtml, map[string]*bintree{}},
		"search.html":   &bintree{templatesSearchHtml, map[string]*bintree{}},
		"toplevel.html": &bintree{templatesToplevelHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
