package example

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"sort"
	"strings"

	"github.com/khulnasoft-lab/fastnode/fastnode-go/lang/python/pythoncomplete/offline/legacy"
	"github.com/khulnasoft-lab/fastnode/fastnode-golib/fileutil"
)

// Example describes a situation we want to provide completions in, defined as a buffer/cursor position, along with
// the completion that was expected for the example, as well as the completions that were provided by different models.
type Example struct {
	Buffer string
	Cursor int64

	// Symbol of the relevant value on which we want to do completions
	Symbol string

	// Expected identifier for this example
	Expected string
	// Provided is a map of model name to the information provided by the model for the example
	Provided map[string]Provided
}

// Rank returns the rank of the expected completion in the completions given by the provider, -1 if not found.
func (e Example) Rank(provider string) int {
	for i, c := range e.Provided[provider].Completions {
		if c.Identifier == e.Expected {
			return i
		}
	}
	return -1
}

// Provided contains the output of each completions model for the particular example
type Provided struct {
	Completions  []Completion
	MungedBuffer string
}

// Completion generated by a model that is stored in the example
type Completion struct {
	Identifier    string
	Score         float64
	MixCompletion legacy.MixCompletion
	Duplicate     bool
}

// Collection of examples
type Collection struct {
	Examples []Example
	Path     string
}

// NewCollection creates a collection from either a single file or a directory. If given a directory, it reads all
// .json files in the directory. In either case, the files are assumed to contain JSON-encoded examples separated by
// newlines.
func NewCollection(path string) (Collection, error) {
	fi, err := os.Stat(path)
	if err != nil {
		return Collection{}, err
	}

	var files []string
	if fi.IsDir() {
		files, err = listJSONFiles(path)
		if err != nil {
			return Collection{}, err
		}
	} else {
		files = []string{path}
	}

	var examples []Example
	for _, filename := range files {
		exs, err := readExamples(filename)
		if err != nil {
			return Collection{}, err
		}
		examples = append(examples, exs...)
	}

	return Collection{
		Examples: examples,
		Path:     path,
	}, nil
}

// WriteToFile writes a collection to a single file.
func (c Collection) WriteToFile(filename string) error {
	outf, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer outf.Close()
	for _, e := range c.Examples {
		if err := writeExample(e, outf); err != nil {
			return err
		}
	}
	return nil
}

// WriteToDir writes a collection to a directory, with one JSON file per example.
func (c Collection) WriteToDir(dir string) error {
	for i, e := range c.Examples {
		filename := fmt.Sprintf("%s/example-%04d-of-%04d.json", dir, i+1, len(c.Examples))
		outf, err := os.Create(filename)
		if err != nil {
			return err
		}
		err = writeExample(e, outf)
		outf.Close()
		if err != nil {
			return err
		}
	}
	return nil
}

func writeExample(e Example, w io.Writer) error {
	enc := json.NewEncoder(w)
	enc.SetIndent("", "    ")
	return enc.Encode(e)
}

func readExamples(filename string) ([]Example, error) {
	inf, err := fileutil.NewCachedReader(filename)
	if err != nil {
		return nil, err
	}
	defer inf.Close()

	var examples []Example

	d := json.NewDecoder(inf)
	for {
		var ex Example
		err := d.Decode(&ex)
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, err
		}
		examples = append(examples, ex)
	}

	return examples, nil
}

func listJSONFiles(dir string) ([]string, error) {
	files, err := fileutil.ListDir(dir)
	if err != nil {
		return nil, err
	}
	sort.Strings(files)

	var filtered []string
	for _, f := range files {
		if strings.HasSuffix(f, ".json") {
			filtered = append(filtered, f)
		}
	}

	return filtered, nil
}
