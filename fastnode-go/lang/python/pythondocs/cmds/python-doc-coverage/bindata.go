// Code generated by go-bindata.
// sources:
// templates/documentation.html
// templates/index.html
// templates/package.html
// static/.DS_Store
// static/css/style.css
// static/target.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDocumentationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x7b\x6f\xdb\x36\x10\xff\x3f\x9f\x82\xd5\x3a\xc4\x0e\x2a\x29\x8f\x05\xeb\x5a\xcb\x40\xd7\x06\x5b\x86\x2d\xcb\x92\x0c\xdb\x50\x14\x03\x2d\x9e\x2d\xba\x14\xa9\x92\x94\x13\x2f\xc8\x77\xdf\x51\x92\x2d\xf9\xa5\xb8\x6d\x1e\x7f\x24\x3e\xf2\x5e\xfc\xfd\xee\x48\x5f\x7a\xcf\xde\xfd\xfe\xf6\xea\x9f\xf3\x13\x92\xd8\x54\xf4\x77\x7a\xee\x0f\x11\x54\x8e\x22\x0f\xa4\xd7\xdf\x21\xf8\xd3\x4b\x80\xb2\xf2\x63\x21\xa6\x60\x29\x89\x13\xaa\x0d\xd8\xc8\xcb\xed\xd0\x7f\xe9\x2d\x6f\x27\xd6\x66\x3e\x7c\xca\xf9\x24\xf2\xfe\xf6\xff\x7c\xe3\xbf\x55\x69\x46\x2d\x1f\x08\xf0\x48\xac\xa4\x05\x89\xb6\xa7\x27\x11\xb0\x11\xac\x58\x4b\x9a\x42\xe4\x4d\x38\x5c\x67\x4a\xdb\x86\xc1\x35\x67\x36\x89\x18\x4c\x78\x0c\x7e\x21\xbc\x20\x5c\x72\xcb\xa9\xf0\x4d\x4c\x05\x44\x07\x4d\x67\xcf\x7c\x9f\x5c\x25\x40\xe8\x40\x4d\x80\x1c\x91\xc2\xb9\xa5\x23\x43\xf6\xd2\xdc\xd8\x3d\x74\x9c\x02\x19\x72\x6d\x2c\xba\x21\x16\x55\xdd\x59\x5f\x13\x2a\xa7\x44\xa1\xa8\x0b\x79\x16\x9f\x38\xa3\xd2\x66\x8f\x0e\x2d\xe8\x3d\x67\x62\xa0\x74\xe9\xfb\x8d\xc8\x96\x5b\x01\xfd\xdb\xdb\xe0\x94\xa1\x21\x1f\x72\xd0\x77\x77\xc4\x27\xe7\x53\x9b\x28\x49\xde\xa9\x38\x4f\x71\x03\x11\x41\xe9\x2d\x66\xa7\xe9\x08\x7a\x61\x69\xb6\xb3\x78\x82\x1f\x95\xb2\xc6\x6a\x9a\x2d\x86\x10\x5c\x7e\x24\x89\x86\x61\xe4\x39\xb4\xcd\xab\x30\x4c\xe9\x4d\xcc\x64\x30\x98\x19\x38\x01\xd3\x0d\xe7\x0b\xe1\x51\x70\x14\x1c\x87\xb1\x31\xf5\x5a\x90\x72\xd4\x32\xc6\x23\x1a\x44\xe4\x19\x3b\x15\x60\x12\x00\xeb\x2d\x27\xf2\xf3\xd5\x6f\xbf\x1e\x13\x93\xf0\x14\x01\x62\xe4\x02\x4c\xa6\x24\x0b\xc6\x86\x0c\x95\x26\xa7\x27\x2f\x89\xc9\x33\xc7\x18\x51\xc3\x4a\x19\x04\xb8\x73\x9a\xc2\x20\x05\xc6\x29\xf9\x94\x83\xe6\xb0\x84\x97\x73\xff\xd7\x9b\x8b\xb3\xd3\xb3\x9f\x5e\x35\x1d\x33\x05\x46\xee\x5a\x72\xad\xf4\x47\xc2\x87\x64\xaa\x72\xe2\xea\xa2\xe0\x2a\x43\xcc\x50\xa2\xc8\xa0\x00\x3c\xfe\x8a\xcb\xf7\x68\x21\x2c\x66\x46\x7e\xf8\xd0\xd8\x31\xb1\xe6\x99\x25\x46\xc7\x35\x74\xca\x98\xa0\x82\xcf\x21\xe6\xfa\xe0\x18\x4f\x3a\x41\xc4\xbe\x0f\x0e\x6b\xb9\x40\x6b\x6c\xbc\x7e\x2f\x2c\xdd\x7c\x9e\x5f\x5d\x1e\x2d\x3c\x08\xbe\x43\xaf\x95\xd4\xe6\xf3\xd9\x7b\x90\x8c\x0f\x3f\xcc\x8e\xd6\x0b\xeb\x6e\xec\x0d\x14\x9b\x36\x74\x93\x43\xac\x38\xd2\x28\x39\x72\x77\x87\xfa\x87\xb5\x0a\x6e\x3f\x17\x20\xcf\xa9\xa6\xa9\x21\xaf\x22\x82\x02\x09\x0a\x11\xb0\x9e\x0d\x1a\x34\x6a\x98\x62\xb7\x92\x58\x50\x63\x22\xaf\x14\x8a\xdf\x7e\xe2\xea\xb5\xfa\x8c\xad\x81\xe1\x0c\xb0\x46\xdf\x55\x91\x10\xfc\x91\x6d\xc6\xdb\x6f\x78\xaf\xa3\xe8\xfe\xca\x62\xb9\x91\xf4\xeb\xc4\xb0\x35\x92\xcd\x7a\xeb\x77\x71\x75\x8d\x6f\x4c\x4c\xe3\xfd\x06\x9b\x8e\xbd\x55\x72\xe5\x26\x23\xe5\x7d\xe4\x1d\xef\x67\x37\x8e\x3d\xcb\xb6\x52\x3f\x38\x2c\xf4\x1d\x57\x57\xd3\x0c\x0a\x96\xb6\x35\xad\x42\xf1\xc2\xfa\x0c\xf3\x2f\xac\xf9\xfd\xc1\x0b\x83\x77\x30\xa4\x39\x76\xc4\x16\x11\x2b\xfd\xb2\x20\xdd\x2d\xd5\x66\xb3\x11\x6a\x2c\xde\x65\x70\xdd\xaa\x30\xb0\x0e\xf3\x96\x62\xd8\x1a\xeb\x55\x9c\xcf\x14\xde\x14\x8d\x42\xda\x6c\xd8\xee\xf6\x8b\x76\x57\x91\x59\x45\x05\x75\x5c\x2f\x35\xae\xdb\xaa\x4f\x2f\xa7\x52\x65\x86\xd7\x9d\x7a\x82\x8d\x6d\xa7\x01\x3e\x1f\x4d\xfb\x85\x5e\x9b\xdb\xec\x2f\x23\xfc\x75\x0d\x5d\x7a\x68\x69\xd6\x59\xe0\x87\x6b\xd5\xd6\x72\x88\x95\x30\x19\x95\x91\x77\x88\xd5\x90\xe9\xe2\xb1\xad\xe1\x71\xc5\xea\x16\xb7\x25\x65\x4e\xc1\x6c\xa1\x66\x69\x99\x14\xf4\xee\xde\xb6\x35\x9c\x14\xcb\x9b\x78\x99\xed\x3f\x39\x2d\x7c\x24\xa9\xcd\x35\xb4\xf3\x32\x57\x2b\x1e\xee\x07\x63\x89\xb3\xc8\xd3\x08\x24\x68\x60\xff\x1a\x3e\xda\xb2\x73\x8f\xf7\xbf\xf5\x1a\x84\xce\x93\x73\xb9\x6d\xba\x87\xb6\x20\xb5\x8c\xf2\xa8\x70\x5f\x54\x87\x6d\x47\xbb\x79\xaf\x3e\x1e\xde\x4c\xc5\x5f\x86\x77\x55\xab\x5f\x81\xf4\xe6\xf6\xb9\xb4\x3a\x8f\x1d\x97\x6c\xde\x41\x0d\x34\x5a\x5b\xa8\x61\xfa\xd4\x5d\xb4\x1d\xad\x67\x4a\xa7\x54\xf0\xff\x30\xc1\xc7\x63\x55\xce\x83\x7c\x26\xb9\x4b\x30\x3f\x0a\xbb\x58\x39\x38\x54\x70\x39\xaa\xc9\x9d\xaf\xb4\xdc\x8c\x95\xc6\x53\xb3\x3a\x8f\xfc\x50\x4c\x15\x30\xcf\x9c\x3e\x2c\xc0\xc5\x88\x34\xfe\x03\x87\xa7\x29\xe9\x48\x88\xc1\x18\x8a\x1f\xdd\xe4\x35\x1f\x10\x77\x0d\xf9\x85\x4e\xe8\x65\x39\x87\x64\x22\x1f\x71\x69\xba\x8b\x63\xd1\xba\x21\x85\x8e\xe9\x4d\x30\x52\x6a\x24\x80\x66\xdc\x14\x93\x8a\x5b\x0b\x05\x1f\x98\x70\xec\x26\xb6\x29\x8e\x2c\x07\x07\xc1\x51\x25\xb5\x8e\x2c\x98\xe8\xa9\x8c\x45\xce\x70\xf2\x16\xc2\x0d\xcc\x19\x0e\x68\x6c\x96\x10\xe9\x0c\x40\xa8\xeb\xee\x0b\x82\xb9\xf3\x4a\x91\xe3\x94\x33\xe1\x2c\xa7\xa2\x98\xe6\x70\x60\x34\x44\x02\x30\x34\xbb\x37\xfd\x6d\xc7\xde\xf1\xf2\xd4\xbb\x78\x80\x95\x20\x16\xbf\x9c\x63\xd5\xc1\x8d\x0d\xc7\x08\x6b\xb9\xba\x54\x63\xcf\x3b\xac\x9a\xe5\xbb\x81\xc6\xc9\x6c\xda\x19\xe6\x32\x76\x3d\xd6\xe9\x92\xdb\x15\xee\x9f\x77\xbc\x6f\x16\xde\xc3\x6e\xe0\x46\xcb\xce\xc6\xb7\xae\xfb\xba\xdd\x87\xbb\xe3\x57\x7c\xcc\xef\xef\xfb\xac\x1b\x77\x49\xed\x64\xe5\x9e\x58\xeb\x65\x37\x10\x1c\xbf\x50\x53\xe1\x17\xb5\xbb\xdb\x0d\x80\xc6\x49\xfb\xe9\x4b\x4b\x9b\x70\x53\x45\x9b\x09\x0e\xe3\x4e\x77\x4d\x9c\xbb\xee\xce\x06\x71\xb1\xf0\x7a\x61\x39\x0b\xf7\xc2\xf2\x1f\x59\x3b\xff\x07\x00\x00\xff\xff\x1e\xd6\x8f\x3f\xda\x12\x00\x00")

func templatesDocumentationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDocumentationHtml,
		"templates/documentation.html",
	)
}

func templatesDocumentationHtml() (*asset, error) {
	bytes, err := templatesDocumentationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/documentation.html", size: 4826, mode: os.FileMode(420), modTime: time.Unix(1456204119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6d\x53\xdb\xc6\x13\x7f\xcf\xa7\xd8\x68\x26\x43\xc2\x44\x92\x1d\xfe\xcc\x3f\x25\x96\x3b\x29\xa1\x09\x9d\x06\x28\xa1\x69\x33\x99\x4c\xe7\x2c\x9d\xac\x03\xf9\x4e\xdc\x9d\x6c\x5c\xea\xef\xde\x3d\x49\x46\xf2\x93\x2c\x4c\x61\xd2\xe6\x45\xf0\x4a\xbb\xbf\xbd\x7d\xba\xbd\xd5\x75\x9e\xbc\x3d\x39\x38\xff\x7c\x7a\x08\x91\x1e\xc4\xdd\xad\x8e\xf9\x03\x31\xe1\x7d\xcf\xa2\xdc\xea\x6e\x01\xfe\xeb\x44\x94\x04\xf9\xcf\x8c\x1c\x50\x4d\xc0\x8f\x88\x54\x54\x7b\x56\xaa\x43\xfb\x95\x35\xff\x3a\xd2\x3a\xb1\xe9\x55\xca\x86\x9e\xf5\xbb\xfd\xeb\x1b\xfb\x40\x0c\x12\xa2\x59\x2f\xa6\x16\xf8\x82\x6b\xca\x51\xf6\xe8\xd0\xa3\x41\x9f\x2e\x48\x73\x32\xa0\x9e\x35\x64\x74\x94\x08\xa9\x2b\x02\x23\x16\xe8\xc8\x0b\xe8\x90\xf9\xd4\xce\x88\x17\xc0\x38\xd3\x8c\xc4\xb6\xf2\x49\x4c\xbd\x76\x15\xec\x89\x6d\xc3\x79\x44\x81\xf4\xc4\x90\xc2\x2e\x64\xe0\x9a\xf4\x15\xec\x0c\x52\xa5\x77\x10\x78\x40\x21\x64\x52\x69\x84\x01\x8d\xac\xc6\xd6\xd7\x40\xf8\x18\x04\x92\x32\xa3\xa7\xfa\xc1\x08\xe5\x32\x3b\x24\xd4\x54\xee\x18\x11\x45\x73\x48\xdb\xae\x68\xd6\x4c\xc7\xb4\x7b\x3a\xd6\x91\xe0\xf0\x56\xf8\xe9\x00\xe5\xd1\x7e\xa4\x0e\x70\x2d\x92\xf4\x69\xc7\xcd\x99\xb6\x66\xd7\xfb\x83\x10\x5a\x69\x49\x92\x59\xc0\x98\xf1\x4b\x88\x24\x0d\x3d\xcb\xf8\x56\xed\xbb\xee\x80\x5c\xfb\x01\x77\x7a\x53\x01\x43\xe0\xe2\xdc\xdb\x07\xee\xae\xb3\xeb\xec\xb9\xbe\x52\xe5\x33\x67\xc0\x90\x4b\x29\x0b\x24\x8d\x3d\x4b\xe9\x71\x4c\x55\x44\xa9\xb6\xe6\x17\xf2\xfe\xfc\xc3\xcf\x7b\xa0\x22\x36\x40\x77\x04\x70\x46\x55\x22\x78\xe0\x5c\x28\x08\x85\x84\xa3\xc3\x57\xa0\xd2\xc4\xc4\x07\x44\x58\x30\xd3\x98\x1a\x3b\x55\x26\x30\xa0\x01\x23\x70\x95\x52\xc9\xe8\x9c\x77\x0c\xfc\x6f\x6f\xce\x8e\x8f\x8e\xdf\xed\x57\x81\x03\x41\x15\xdf\xd6\x30\x12\xf2\x12\x58\x08\x63\x91\x82\xc9\x82\x2c\x32\x09\xfa\x0c\x29\x82\xf1\x8a\x29\x9a\xbf\x00\xf9\x05\x25\x62\x8d\x2b\x83\xef\xbe\x56\xde\x28\x5f\xb2\x44\x83\x92\x7e\xe9\x3a\xa1\x94\x53\xb8\xcf\x78\xcc\x64\xfd\x1e\x5a\x3a\x44\x8f\xfd\xdf\x79\x59\xd2\x99\xb7\x2e\x94\xd5\xed\xb8\x39\xcc\xdd\x70\x65\x6e\x9a\xdb\x76\xfe\x87\xa8\x05\x55\x87\xf9\xe4\x0b\xe5\x01\x0b\xbf\x1a\xd3\xe6\x62\x3f\x1f\x2e\xd0\xe3\x04\x8b\x44\xd3\x6b\xed\x66\xf1\xcc\x93\xc3\x55\x26\xcd\xfc\x2c\xe8\x19\x77\x16\xec\xa2\x90\xdd\xb2\x92\x3b\x3d\x11\x8c\x2b\x9a\x03\x36\x04\x3f\x26\x4a\x79\x56\x22\x45\x1f\xd7\xaa\x2a\x95\xb4\x8a\xc5\xee\x11\x89\x99\x24\xb0\xf0\x6e\x9f\x99\x47\x33\x82\xe6\x1f\x91\x8c\xd8\x43\x12\xa7\x94\x8b\x91\xb7\x7d\x73\xe3\x1c\x71\x9f\x14\x25\x31\xad\x08\xf8\x0b\x12\xc9\xb8\x0e\xc1\x7a\xea\xb4\x42\x6b\x32\xd9\xae\x08\xa2\xdb\x3c\xab\x65\x55\x9f\x90\x6b\xcf\x6a\xb7\x5a\x8b\xea\x32\xcb\xbd\xed\x6c\x87\xd8\x87\xa6\xda\x9e\xbe\xde\xee\x2e\x40\x99\xcc\x6e\x06\xf1\x32\xc3\x30\xd5\xc0\x4a\x56\x05\x23\x17\x02\xaa\xfc\x59\x5f\xba\xe8\xcc\x8a\xf7\xe7\xc8\xcd\x83\x01\x55\xc2\x56\xa9\xef\xd3\xac\xd6\x37\x89\x10\x6e\x5b\xb8\x65\x30\xde\x7f\x84\xf8\x34\xd0\xb5\x34\x3a\xb7\x72\xaa\x09\xcc\xb7\x17\x21\xc6\x43\xb1\x61\x78\xb0\xa3\xf6\x18\xa7\xc1\x23\x44\x67\xbd\xaa\xa5\xc1\x99\x8a\x35\xc0\xf8\xf6\x22\x33\x22\x92\x63\x22\x6d\x18\x9c\x63\x21\x07\x24\x66\x7f\x3e\x4a\x78\x9a\x28\x5b\x1a\xa0\x52\xb0\x11\x4e\x19\x24\x2e\xb8\x4d\x07\x89\x1e\x03\x0b\xb0\xe1\xb3\x90\x51\xa9\xfe\x7d\x51\xfa\x84\xd6\x3e\x46\x80\xd6\xe8\x59\x1a\x9b\x4c\xa6\xec\x3e\x35\x10\xff\xb9\xb0\x7c\xd4\x32\xf5\x75\x2a\x1f\xa5\x78\x9a\x28\x5b\x1a\xa0\x52\xb0\x11\xce\xbd\x77\xb8\x92\x8e\x76\xbb\x6f\x34\xc4\x94\xe0\x34\xd2\x86\x30\xe5\x7e\xe6\xe7\x6c\x19\x3f\x22\x75\x86\xc4\x26\x8b\xc0\xf3\xe1\x6e\x77\x95\x9a\x2c\xe6\xa5\x9e\x03\x43\x3e\x88\x22\x1c\xd2\xa2\x52\xcf\x07\xa4\x1e\x44\x8d\xd1\x00\xcf\xcc\xa0\x77\xc9\x78\xf0\x3c\x53\xf6\x9e\xdc\xd3\xa4\xca\x00\x48\x70\xd4\x9d\x16\x4a\x4e\x64\xff\xdb\x91\x01\x2f\x7e\xe3\x5c\x89\x75\xaa\x68\x30\x5f\x64\x5a\x2e\xe6\x5b\x47\x47\xdd\x53\xe2\x5f\xe6\xa3\x63\xb4\x9c\xe1\x13\x16\x3c\x2e\x6b\x35\x83\xf1\xa7\x08\xd4\x6a\x86\xca\x31\xb7\x86\x2b\xf3\xc3\xb9\xd0\x24\x86\x66\x02\x15\xae\xea\x04\xbc\x82\xfb\xf6\x1c\xd7\x80\x77\x7a\xb0\x68\xc0\x5a\xd6\x68\x03\xe6\x7d\x53\x58\xfb\x35\xef\xb3\xe0\xd6\x31\x98\x4c\xae\x79\x7f\x86\xdb\x14\x33\xdb\x24\xbc\xc3\xbf\xab\xf9\xca\xb6\x5c\x13\x77\xd3\x1e\x16\x5f\xe3\x93\xb9\x4c\xba\xb9\x91\x84\x63\x6a\x3b\x45\x2a\xa9\xc9\x64\x3e\xf5\x8a\xac\xc5\x7a\x38\x13\xa3\xac\xce\x27\x93\x65\x5a\x83\x6e\x87\x4c\xa7\xce\x24\x47\xfb\xfe\xca\x88\x15\xd0\x93\x89\xd5\xad\x52\x1d\x97\xe0\xcc\xab\x83\xe5\x58\xa6\xc7\xe5\xc9\x6b\x38\x6b\xb8\x8a\x0c\x5e\xc3\x55\xcd\xca\x35\xac\xa7\x54\xfa\xd8\x2d\x4f\xc2\xaa\xcc\x92\xda\x6f\xaa\xaf\x66\xfb\xa8\x85\x68\x32\xbc\xd4\x02\x34\x38\x62\xd7\xca\x37\x6a\x61\x39\xc2\x02\xc4\xcd\x8d\xf9\x60\xd3\xd7\xb0\xd8\x81\x5a\x4e\xab\x05\x73\x69\x56\xd1\x3c\xdd\x24\x2f\x99\xa6\x7f\xf4\xb1\x12\xb2\xac\xa9\xef\x63\x7b\xab\x6d\xc1\x85\xd0\x58\xd1\x1a\x85\xeb\xe1\x6b\x5c\x65\xe0\x79\x60\xd0\x6b\x5c\xb0\xd8\x1c\x37\xf2\xc1\x9a\x1e\x7b\x6f\x27\x34\xe9\xe1\xf7\xf0\xc2\x42\xeb\xde\xc8\x09\xf5\x07\x80\x7b\xfb\xa0\xc1\xf9\x62\x53\x17\xe0\x26\x7b\xbb\xc5\x9b\x1d\x1e\xda\xce\xdd\xcd\x9f\x45\xb8\xcb\xe2\xd6\xdb\xbe\x39\x76\x6e\xf8\x72\xbb\xe9\x15\x54\x26\x49\xb0\x3e\x1f\x7e\xb4\x1a\x98\x3d\x34\x1d\xcc\xea\x22\x77\xbd\x49\x4b\x34\x1c\x9f\x34\x51\xc0\x78\xa1\xe2\xf8\xe4\xce\x1a\x9a\xe0\x67\x83\x97\xd5\x3d\xfc\x70\x7a\xfe\x79\xc3\x94\x31\x6a\xf3\xb9\xef\x81\xbc\x56\x80\x3f\x8c\xc3\x0a\xf0\x7f\xda\x57\x33\x10\x4b\xce\x33\xc8\x56\xe1\x42\x0e\x73\xb4\x9e\xbf\xcc\xb8\xf8\x25\xa5\x72\x0c\xcf\x38\x35\x1f\x44\x09\xfe\x34\x97\x18\xb7\x77\x2d\xdb\x0a\x7e\x22\x43\xf2\x31\xff\xa4\x9f\xc4\x69\x9f\x71\xf5\x7c\xf6\x86\x61\xd9\xf7\x7e\x72\x41\xae\x9d\xbe\x10\x7d\x9c\x2a\x12\xa6\xb2\x8f\xfe\xe6\x99\x1b\xb3\x9e\x72\x2f\xcc\xe5\xc7\xd8\x6d\x3b\xed\xb6\xb3\x5b\x50\xb5\x5f\xff\x71\xa1\x78\x8e\x88\xd3\x80\x02\x89\x63\x73\xd3\x94\xb0\x18\xf3\xaf\x58\x10\x3c\xeb\xd1\x58\x8c\x9e\xbf\x00\x5c\x3b\x2b\x18\x71\x78\x61\x43\x16\xa4\x78\x12\x37\x17\x23\x0a\x88\x02\x4e\x69\x80\x62\x6b\x97\xdf\xf4\x06\xe9\x62\xfe\x02\x69\xd1\x80\x8e\x9b\x5f\x28\x74\xdc\xfc\x26\x71\xeb\xef\x00\x00\x00\xff\xff\x3e\xc1\xdd\x89\x5b\x1c\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 7259, mode: os.FileMode(420), modTime: time.Unix(1456204119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdd\x72\xdb\xb6\x12\xbe\xf7\x53\x6c\x38\x93\x71\xe2\x09\x49\x3b\x3e\x99\x93\xe3\x88\x3a\x93\x3a\x4e\xe3\x4e\x63\xbb\x8e\xfb\x93\xc9\xe4\x02\x22\x97\x22\x1c\x08\xa0\x01\x50\xb2\xea\xea\xdd\xbb\xa0\x28\x89\xfa\x35\xe3\xb6\x9e\xb8\xbe\x48\xb4\xe0\xee\xb7\xd8\xfd\x76\x41\x62\x5b\x8f\xde\x9c\x1e\x5e\x7c\x3c\x3b\x82\xcc\xf6\x44\x7b\xab\xe5\xfe\x03\xc1\x64\x37\xf2\x50\x7a\xed\x2d\xa0\xbf\x56\x86\x2c\x19\xff\x2c\xc5\x1e\x5a\x06\x71\xc6\xb4\x41\x1b\x79\x85\x4d\xfd\x97\xde\xe2\xe3\xcc\xda\xdc\xc7\xab\x82\xf7\x23\xef\x37\xff\xe7\xd7\xfe\xa1\xea\xe5\xcc\xf2\x8e\x40\x0f\x62\x25\x2d\x4a\xb2\x3d\x3e\x8a\x30\xe9\xe2\x92\xb5\x64\x3d\x8c\xbc\x3e\xc7\x41\xae\xb4\xad\x19\x0c\x78\x62\xb3\x28\xc1\x3e\x8f\xd1\x2f\x85\x67\xc0\x25\xb7\x9c\x09\xdf\xc4\x4c\x60\xb4\x57\x07\x7b\xe4\xfb\x70\x91\x21\xb0\x8e\xea\x23\xec\x43\x09\x6e\x59\xd7\xc0\x4e\xaf\x30\x76\x87\x80\x7b\x08\x29\xd7\xc6\x12\x0c\x58\x52\x75\xb1\xbe\x02\x26\x87\xa0\x48\xd4\xa5\x3c\xf1\x0f\xce\x68\x6c\xb3\xc3\x52\x8b\x7a\xc7\x99\x18\x1c\x43\xfa\x7e\xcd\xb3\xe5\x56\x60\xfb\xe6\x26\x38\x63\xf1\x17\xd6\xc5\xd1\x08\x7c\x38\x1b\xda\x4c\x49\x78\xa3\xe2\xa2\x47\x70\x94\x0e\x92\x0e\x69\x6b\x9a\x34\x5a\xe1\xd8\x66\x6b\x7e\xfb\xdf\x29\x65\x8d\xd5\x2c\x9f\xc7\x17\x5c\x7e\x81\x4c\x63\x1a\x79\x2e\xd5\xe6\x20\x0c\x7b\xec\x3a\x4e\x64\xd0\x99\x18\x38\x81\xf6\x1a\x4e\x17\xc2\xfd\x60\x3f\x78\x11\xc6\xc6\xcc\xd6\x82\x1e\x27\x2d\x63\x3c\xd0\x28\x22\xcf\xd8\xa1\x40\x93\x21\x5a\x6f\x71\x23\xef\x2e\xde\xff\xf8\x02\x4c\xc6\x7b\x94\x9d\x04\xce\xd1\xe4\x4a\x26\xc1\xa5\x81\x54\x69\x38\x3e\x7a\x09\xa6\xc8\x1d\x5d\xa0\xd2\x4a\x19\x05\xba\x38\x4d\x69\xd0\xc3\x84\x33\xb8\x2a\x50\x73\x5c\x48\x96\x83\xff\xf5\xf5\xf9\xc9\xf1\xc9\xf7\x07\x75\xe0\x44\xa1\x91\xdb\x16\x06\x4a\x7f\x01\x9e\xc2\x50\x15\xe0\x8a\xa2\x24\x2a\xa7\x9c\x91\xc4\x88\x3e\x81\x14\xfe\x12\xe4\x27\xb2\x10\x96\x76\x06\xff\xfb\x5c\x7b\x62\x62\xcd\x73\x0b\x46\xc7\xb3\xd4\x29\x63\x82\x2a\x7d\x2e\x63\xae\x09\x5e\x50\xa4\x7d\xca\xd8\x7f\x83\xe7\x33\xb9\xcc\xd6\xa5\xf1\xda\xad\x70\x0c\xf3\x75\xb8\x7a\x1c\x5a\xb8\x17\xfc\x87\x50\x2b\x69\x13\xe6\xa3\x4f\x28\x13\x9e\x7e\x76\xa1\x2d\x70\xbf\x48\x17\xd8\x61\x4e\x3d\x63\xf1\xda\x86\x25\x9f\xe3\xe2\x08\x8d\x2b\xb3\xb8\x24\xbd\xd4\x2e\xc9\xae\xfa\x3a\x9c\x35\x76\xab\xa3\x92\x61\xcd\x73\xc2\xfb\x10\x0b\x66\x4c\xe4\xe5\x5a\x75\x69\xaf\xa6\xd6\x58\xeb\x54\xfc\x0e\xd3\x54\x49\x8a\xfa\x70\xba\xe6\x96\xe6\x0c\xdd\x1f\xd3\x9c\xf9\x7d\x26\x0a\x94\x6a\x10\x6d\x53\x9f\x1c\xcb\x98\x55\x2d\x31\xe9\x08\xf8\x03\x72\xcd\xa5\x4d\xc1\x7b\x1c\xec\xa6\xde\x68\xb4\x5d\x33\xa4\xb4\x45\xde\xae\x57\x5f\x61\xd7\x91\xb7\xb7\xbb\xbb\xec\xae\x8c\x3c\xda\x2e\x0f\x8c\x03\x68\xea\xed\xf1\xab\xed\xf6\x12\x94\xab\xec\x66\x10\xcf\x4b\x0c\xd7\x0d\x7c\xa6\x6a\x60\x10\x42\x82\x63\xa6\x9d\x3c\x9f\xd3\x90\x92\x5a\x63\x61\x41\xbc\x3b\x29\x50\x17\x7c\x53\xc4\x31\x96\x3d\x7f\x17\xa6\xe8\xf8\xa2\xa3\x83\xcb\xee\x3d\xf0\xd4\xc0\xd7\x4a\x96\xa6\x76\xa6\x09\xcc\xb7\xcb\x14\x97\xa9\xba\x23\x4d\xf4\xc2\xed\x70\x89\xc9\x3d\xb0\x74\xbb\xab\x95\x24\x4d\xcc\x1a\x60\x7c\xbb\x0c\x0d\x98\x96\x54\x58\x77\x24\xe9\x44\xe9\x1e\x13\xfc\xf7\x7b\xa1\xa9\x89\xb3\x95\x44\xcd\x0c\x1b\xe1\xcc\xc8\x92\x4a\xfa\xd8\xcb\xed\x10\x78\x42\x1f\x02\x3c\xe5\xa8\x1f\x20\x4b\xbf\x50\xb4\x89\x3b\xf8\xef\x81\xa4\x06\xbe\x56\x72\x34\xb5\x6b\x82\xf2\xaf\x63\xe8\x83\xd5\x45\x6c\x0b\x7d\x2f\x7d\xd4\xc4\xd9\x4a\x8e\x66\x86\x8d\x70\x36\x1f\x7a\x5f\x43\x92\x65\x74\xef\x9a\x70\x30\x16\xca\x7f\xfd\xcc\x39\xae\x7e\xd3\x25\x87\x4a\xc0\x60\xb2\xc8\x9f\xd5\xcb\xa1\xb4\x6c\xd6\x3e\x9e\x56\x0c\xdd\x5d\xb2\x35\x3a\xb5\x9d\xaf\xd7\x2a\x83\xac\x6e\x4a\xeb\xb5\x0e\xd2\x42\xc6\x07\x1b\x9e\x97\x01\x6e\x52\xa0\xfb\x5f\xb6\xe1\xf9\x3b\x66\xe0\xcd\xec\x7d\xb2\x5e\xf1\x6d\x21\xc4\xb0\x76\x2c\xae\xd7\x2c\x1b\xb1\xfc\x68\x5c\xd6\xa1\x95\x85\xcc\xde\xdc\x68\xba\x7a\x23\x04\xb3\xd4\x9a\xd1\x68\x91\x8d\x8a\x48\xaa\xa0\x73\x35\x38\x74\xbf\x47\xa3\x55\xde\x93\x76\x8b\x4d\xae\x01\x49\xfd\xce\xf9\xff\x2b\x67\x3c\xf3\x31\x1a\x79\xed\x85\x85\x56\xc8\xe8\x42\x62\x93\xd5\xb8\xf3\x9f\xbf\xc6\xa9\x6f\x50\x3d\x43\x1d\x13\xf2\x69\x5a\x31\xbc\xa2\xca\x57\xdb\xdf\xdc\xb8\x5b\x1f\x5e\x41\xf0\x96\x98\x3f\xa7\x83\x01\xbc\x8f\x47\x1f\x3c\x58\xc8\x49\xcd\xdf\xa4\xc8\xfb\x2e\xef\x5e\x9b\xb4\xd7\x42\xa3\xa0\x9b\xfb\xed\x48\x5c\x56\x58\x27\xa7\xeb\xa1\xe8\x7e\x4b\x48\x1b\x02\x28\x69\x7a\xd0\x11\xbc\xa7\xde\x79\x80\x01\x54\x35\x48\xad\x5d\xeb\xec\xdb\x0b\x6e\xd6\xdb\x7f\x7b\xbc\x2b\x3c\x9c\x9c\x36\x71\xd0\x28\x0d\x35\x0f\xd3\x8f\x00\xf0\x9a\xc0\x97\x9f\x01\x5e\xfb\xe8\xfd\xd9\xc5\xc7\xbf\x50\x27\x35\xaf\xff\x4c\xe2\x6a\x0e\x1e\x5c\xde\xe6\x20\x56\x1c\xff\xa4\x56\xd3\x22\x0d\xf7\x66\x5e\x9c\xc4\x5d\xfe\x54\xa0\x1e\xc2\x13\x89\xee\x16\xcf\xe8\xa7\x9b\xc0\x4d\x07\x85\xdb\x06\x7e\x60\x7d\xf6\x61\x3c\x8f\xca\x45\xd1\xe5\xd2\x3c\x9d\x1f\x8f\xad\x1a\x56\xb1\x4b\x76\x1d\x74\x95\xea\x0a\x64\x39\x37\xe5\xc4\xca\xad\x85\x82\x77\x4c\x78\xe9\x26\x77\xc3\x70\x2f\xd8\xdb\x0b\xf6\x2b\x69\xe3\xe8\x8a\x36\x4a\xef\x08\x51\x24\x08\x4c\x08\x37\x35\xcd\xb9\xa0\x62\xaf\x36\x04\x4f\x3a\x28\xd4\xe0\xe9\x33\xa0\xbd\xf3\x4a\x91\x4b\xfa\x6e\xe1\x49\xc1\x44\x39\xd5\x33\x40\x2f\x64\x89\x98\x90\xd9\xad\xdb\x6f\x3a\xfe\xbc\x5c\x9c\x7e\x2e\x07\xd0\x0a\xc7\xd3\xb0\x56\x38\x9e\x8a\x6f\xfd\x19\x00\x00\xff\xff\xc2\xe5\xbc\x8c\x27\x17\x00\x00")

func templatesPackageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageHtml,
		"templates/package.html",
	)
}

func templatesPackageHtml() (*asset, error) {
	bytes, err := templatesPackageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.html", size: 5927, mode: os.FileMode(420), modTime: time.Unix(1456204119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\xb1\x4a\xc6\x30\x10\xc7\xef\x62\x87\xa0\x4b\x46\xc7\x8c\x4e\x82\x6f\x10\x3e\xaa\xe0\xec\x0b\x68\x55\x5c\x0a\x05\x51\x70\xcc\xe4\x73\xf9\x66\x9a\x78\x7f\xb5\xd0\x16\xea\x54\xf1\xfb\xff\xe0\xf8\x15\x7a\x97\xa6\x4b\x92\x8b\x88\xe8\xee\xf9\xee\x4c\x24\x94\x47\x2f\x66\x79\x95\x59\x3c\x62\x82\x83\xd5\xa2\x8c\x71\x2f\x4f\x72\x5a\xe2\xa5\xc4\x3a\x6a\xed\x61\xc9\xbe\x91\x47\x79\x18\xd7\x5f\xf6\xc3\x6d\xd7\x0f\x1d\x26\x77\x51\xe2\xe4\xfd\x93\x95\x23\x13\x42\x08\x21\x64\x0e\x35\xf9\xa3\x6d\xa7\x41\x08\xf9\x83\xd4\xf5\x21\xc2\x09\xce\x66\xc5\x7b\x07\x37\xa3\x9a\x00\x47\x38\xc1\xd9\xac\xc8\x73\x70\x03\x7b\x38\xc0\x11\x4e\x70\x36\x63\xd1\x52\x34\x1f\x8a\x2f\x2b\x3a\x14\x0d\x70\x84\xd3\x2f\x7f\x9a\x90\x3d\xe1\xc0\x14\xea\xfe\x7f\x2e\x8b\xfd\x3f\x21\xe4\x1f\xa3\x4d\x7b\xd5\xee\xe4\xbb\x21\x98\x50\xf7\xda\x58\xe2\x1a\x39\x6f\x5f\x85\x0b\x07\x01\x67\x17\x86\xc7\xf2\x93\x17\xe1\x04\x67\x33\x0f\x03\x84\x6c\xc1\x47\x00\x00\x00\xff\xff\xb3\xc6\xf4\x1b\x04\x18\x00\x00")

func staticDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_staticDs_store,
		"static/.DS_Store",
	)
}

func staticDs_store() (*asset, error) {
	bytes, err := staticDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1444972240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xcb\xce\x2c\x49\x8d\x4f\x4f\xcc\xcc\xd3\x51\xd0\x2b\x4b\xcc\xc9\x4c\x51\xa8\xe6\x52\x00\x82\xa4\xc4\xe4\xec\xf4\xa2\xfc\xd2\xbc\x14\xdd\xe4\xfc\x9c\xfc\x22\x2b\x05\x65\x63\x23\x27\x0b\x63\x23\x6b\xb0\x34\x54\xac\x3c\x03\xa8\xdd\x9a\xab\x96\x0b\x62\x4e\x4a\x62\x5e\x7a\x6a\x11\xd0\xa4\xcc\x3c\x02\x66\xb9\x19\x39\x02\x01\x58\x67\x6a\x6e\x41\x49\x25\x4e\x95\x95\xa9\x39\x39\xf9\xe5\x60\x85\x50\x43\x03\xb2\xd3\x71\x9b\x6b\x60\xe0\x06\x04\x60\xe5\x79\xf9\x25\xf1\x79\xf9\x45\xb9\x40\x3d\x55\xa9\xf8\x9c\xe2\xe6\x68\x6a\x60\x00\xd4\x02\x08\x00\x00\xff\xff\xe4\x0e\x30\xac\x0c\x01\x00\x00")

func staticCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssStyleCss,
		"static/css/style.css",
	)
}

func staticCssStyleCss() (*asset, error) {
	bytes, err := staticCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/style.css", size: 268, mode: os.FileMode(420), modTime: time.Unix(1452884595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTargetTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x95\xdd\x72\xe3\x36\x0c\x85\xef\xf1\x38\xde\xb4\x0f\x90\xec\x74\x36\x33\xc9\xd4\xa9\x73\xdf\x81\x28\x88\x62\xc4\xbf\x90\x94\x65\xf9\xe9\x7b\x40\x79\x7b\xb5\x6b\x45\x24\x80\x73\xbe\x03\xa5\x4a\xcd\x05\xa1\x22\x54\xf7\x4a\x23\x37\x39\x7e\x73\x1c\x53\xa0\xf1\x8b\xa3\x4d\xf4\x55\x53\xa4\xb5\x78\xef\x06\xaa\xeb\x90\x4b\x32\x52\x2b\x05\x6e\xf3\xe3\xf1\x89\x7c\xb2\xd6\x45\x4b\x71\x0d\x79\xa7\x36\x17\xe1\x51\x7f\xd7\x79\x6d\xce\xd3\xcc\x75\xee\xc7\x93\x59\xa4\x91\x49\xde\x8b\x69\x2e\xc5\x8a\xff\xe3\x80\x6b\x52\x5a\x4a\x1e\xfd\x14\x36\x32\xb0\x59\xa8\x49\xc8\x93\xf3\x42\xb7\xe0\xb5\x4e\xe6\x52\xd1\x67\x2b\xab\x69\x34\x79\xae\x0b\x5d\x5a\x41\x91\xd7\xbf\xf5\xa9\x56\x4b\xb9\x1d\x6f\x0d\x5c\xe5\xcf\x27\xb2\x3e\x0d\x64\xea\x15\x03\x7e\xaf\x52\x5b\x25\x2e\xf6\x78\x63\x5a\xa3\x39\x2a\xda\x94\x2c\xaa\x64\x67\x16\xfc\xf3\x92\xe2\xe4\xec\x59\xdf\x29\x3a\x62\xf6\xa9\xf5\xce\x5d\xc8\x5e\xba\x14\x35\xad\x3a\xf9\xea\x46\x72\xb1\x66\x0c\x42\xf5\xdb\x63\x84\x1f\x64\xfe\xef\x28\x65\x29\xdc\x52\xa1\x6a\x1c\x06\x34\x69\x14\x53\x69\x8d\xae\x35\x34\x42\x79\xb7\x0c\xa1\x8d\x75\x64\xa5\xa1\x6f\x32\xe7\xa3\x81\xb9\xa1\x26\x0a\xe6\x8c\x9b\x1a\x49\x60\xe8\xf7\x2c\x0c\x1d\xa7\xd5\x5f\xd2\x9a\x69\xe3\x12\x51\xa5\xd2\xf9\xf5\x8d\xbc\xca\x63\xdb\x42\x77\x77\xc8\x85\x5e\xd8\x9b\x59\xc2\x4e\xe7\xfd\xa3\x3d\x51\x58\x7d\x73\x0f\xd7\xba\x27\xe1\xa8\x30\xd4\x27\xfa\x58\x65\x15\x7a\x0d\x6c\x85\x76\xc6\x4d\x6d\x73\xb5\xc9\x48\xef\xfb\xe5\xe3\x6d\xc4\xdc\xa2\x4e\x69\x93\x99\x61\xba\x45\x15\x82\x14\x64\xda\x9e\xa5\x52\xf6\xdc\xa6\x54\x02\x05\x38\x4b\xdb\x8d\xa6\x08\xd1\xcc\x4c\x01\x1c\x1d\xaf\x4c\x3c\x14\x67\x20\xa0\x8d\xec\x31\x78\x48\x0a\x95\x4b\x34\xb8\xc8\x50\xc7\x51\x4c\x30\x04\xfa\xb8\x80\x17\x00\x8a\xdc\xf0\x9a\x67\x58\x97\x42\x00\x8a\x20\x13\x4d\x29\x48\xe0\x43\x6e\x6d\x2b\x9c\xe9\xae\x23\x84\xf1\x0f\x74\x58\x1c\xce\x19\xf6\x12\x47\x2e\x34\x07\x36\xf4\xe5\xe2\x17\x9f\x60\x77\xe1\x9d\x26\x13\x9b\x7f\x40\xa9\x16\xa8\x19\x60\x9d\x69\x93\x61\x28\x69\x53\xab\x95\xfd\x8e\xea\x26\x65\xb9\xcb\x6a\x15\x75\xaf\x61\x30\x9d\x08\x1a\x52\x6b\x50\xd7\x27\x2d\x44\x79\xb1\xff\x16\x01\x09\x05\xaa\xe2\x95\xb4\x38\xd1\x86\x6c\x1a\xbe\x54\xaf\x49\x64\xcc\x07\x44\x8d\x4b\xf7\x05\xc5\x28\x7a\x18\xf5\x70\xf8\x04\xbc\xca\x32\xa6\x2d\x2a\xe1\x25\x9b\xee\x49\x6a\x89\xee\x80\x07\xc8\x62\x68\x9a\x85\xf3\x37\xb1\x12\x03\x33\x3e\x17\x20\x81\x2b\x07\x57\xb5\x08\xf0\x8a\x3c\x26\xdc\xcc\x4b\x91\x09\xa2\x15\x0e\xa0\x32\xd7\x1d\xa9\xb2\x27\x48\x03\xe4\x5f\xca\x9e\x71\xe9\xe8\xa6\xa9\x77\x68\xe8\xd7\xe7\xfb\xdb\x83\x70\xf0\x97\xb7\x91\xc6\x64\x3a\x96\x56\xae\x02\xe8\xa0\xc5\xcd\x75\xd3\x55\x6e\x8a\xd2\xb6\x54\x96\x1b\x99\x15\x87\x74\xdc\xa8\xcf\x3b\xa5\xb0\x87\x2b\xc9\xcd\x48\x3e\xf2\x5c\x1b\x37\xa0\x85\x9c\xe4\xbd\xdd\xa9\x82\x69\xe0\xaa\xcc\xa4\xd2\x8f\x8c\xc3\x5a\xe9\x19\x01\xfd\xf5\xf9\x79\xbe\x48\xb9\xa2\x0d\xc4\x21\xa0\x70\xd5\x46\x0e\x9f\x95\xbb\xe8\xd6\x40\x09\xe4\xcf\x27\xe5\xb2\xe9\xe8\xd5\xc0\xfc\x9d\x6a\xf5\x90\x6f\x49\x04\xd0\x0b\x06\xc4\x93\x59\xfc\x15\xc6\xb0\x6a\x80\x3f\xb4\x4d\x04\x8f\x83\x98\x99\xa3\xbb\x0b\x1d\x34\x9a\xeb\x89\x4a\xaa\x59\xc3\x71\x71\x63\x3f\x50\x7b\x07\x47\x2e\x53\x75\xb7\xac\x9b\xcd\xa0\x81\xa2\xd7\x32\xb5\xe5\x2f\x18\xf8\x13\x94\x25\x0b\x2f\xf6\x68\x12\x36\x66\x5b\xde\x11\x28\x04\xe7\x39\xdd\xe8\xe6\xcb\xa8\x0e\x63\xdf\x6c\x2e\xfe\x38\x71\x76\x74\xe9\xcb\xee\x31\xa1\x22\xe0\x62\x5e\x11\xf4\xab\x2e\xb9\x58\xb9\x2f\x40\xea\x7b\x00\x46\xad\xf9\x58\x47\x2f\x9d\x25\x6a\x7d\x5d\x61\xfb\x44\x2c\xc0\x21\x18\xbb\xba\xbe\x44\xd0\x28\x5c\xf0\x34\xdc\x4f\x34\x1d\x39\x7e\x3d\xef\x6d\xc6\x4d\x3d\xc5\x3f\x0b\x6f\xd4\xe1\xbe\x87\x6f\xfa\x8d\xa8\x0a\xec\xb1\x78\x91\xe1\xf6\x9b\xe8\xc7\xe0\x18\x53\xa5\x6f\x45\x84\xfe\x39\xa3\x08\xbb\x92\xe8\x13\xe5\x75\x57\x3c\x23\xa7\x88\x65\xaf\xb3\x55\xeb\x14\x33\x13\x46\x4d\x66\xc6\x44\x38\x5e\x4a\x2a\xd8\x0b\x25\x93\xc6\xcb\xbb\x47\xbf\xf8\xd5\x0d\x47\x8a\xb5\x75\xa0\x0e\x25\x35\x5d\x03\xe7\x8c\xef\xc5\x88\x08\x63\x79\xec\x1a\x10\x29\xc1\xe1\x53\x34\x15\x7e\x7c\x13\xae\x2e\x00\x62\x05\xe1\xbf\x00\x00\x00\xff\xff\xcb\x5e\xfc\xac\xa2\x06\x00\x00")

func staticTargetTxtBytes() ([]byte, error) {
	return bindataRead(
		_staticTargetTxt,
		"static/target.txt",
	)
}

func staticTargetTxt() (*asset, error) {
	bytes, err := staticTargetTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/target.txt", size: 1698, mode: os.FileMode(420), modTime: time.Unix(1439247815, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/documentation.html": templatesDocumentationHtml,
	"templates/index.html":         templatesIndexHtml,
	"templates/package.html":       templatesPackageHtml,
	"static/.DS_Store":             staticDs_store,
	"static/css/style.css":         staticCssStyleCss,
	"static/target.txt":            staticTargetTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{staticDs_store, map[string]*bintree{}},
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{staticCssStyleCss, map[string]*bintree{}},
		}},
		"target.txt": &bintree{staticTargetTxt, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"documentation.html": &bintree{templatesDocumentationHtml, map[string]*bintree{}},
		"index.html":         &bintree{templatesIndexHtml, map[string]*bintree{}},
		"package.html":       &bintree{templatesPackageHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
