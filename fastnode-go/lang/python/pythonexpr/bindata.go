// Code generated by go-bindata.
// sources:
// shards.json
// DO NOT EDIT!

package pythonexpr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shardsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x08\x3a\x57\x70\xd6\x71\x17\xdd\xdc\xda\x1e\x8a\x05\x1a\xc4\x45\x8f\x41\x60\x8c\xa8\x31\x45\x8b\xe2\x30\xe4\xd0\xb1\x53\xf4\xbf\x17\x4e\x03\xe8\xd1\x7b\xd3\x50\xf3\xf5\xde\x1b\x0e\x9f\x57\x4d\xf3\xcf\xaa\x69\x9a\xa6\x7d\x94\x81\xfd\x8e\x74\x6c\x1f\x9a\x36\xdf\x3f\xac\xd7\x93\x53\xee\x06\x52\x5a\xc7\x8b\x8e\x12\x3a\x6b\x43\xe8\xf8\x1c\x53\x67\x64\x8e\x9e\xd5\x49\x58\x6f\xee\xbe\x7c\xeb\xee\xbe\x75\x9b\x2f\xfb\xbb\x9f\xbb\xed\x2f\xdd\xfd\xd7\xee\xd7\xc7\x75\xe6\x74\xe2\xf6\xa7\xff\x73\xef\xc8\x4c\x64\x39\xb7\x0f\xcd\xf3\xc7\x49\xd3\xb4\xc3\x91\x82\x95\x4f\x8f\xa6\x69\x25\x2f\xdf\xf9\x02\xc6\x7e\x7f\x28\x5a\x12\xef\xf7\xcb\x59\x28\x73\xbc\x2c\xe6\xc1\x53\x9e\x16\x53\xdd\xcc\x8b\x35\x90\x72\x7d\x32\x93\x46\x2f\xea\x5d\x0f\x25\x5f\x3d\x79\x33\xf2\x0c\x69\x53\x1d\x33\x2e\x96\x17\x6b\x5d\xb0\x10\x3e\x79\xa6\x14\x20\x96\xc2\x20\x33\x38\x18\x87\x1d\x1f\xb3\x80\xb3\x11\xef\xd9\x5c\xe9\x04\xdc\x25\x38\x55\xce\x0a\x39\x4a\x1f\x93\x18\xce\x48\x15\x6b\x89\x2a\xe2\x31\x32\xf9\x0a\xdb\xee\xf2\x97\x6e\x21\x44\x0a\x62\x79\x97\x08\x38\xcf\xb3\x5f\x0c\xa7\x9c\x6e\x72\x0f\x2e\x6b\x51\x87\x47\x3a\x26\xa6\xa1\xa2\x43\x25\x05\x1a\x40\xdd\xac\xa9\x72\x88\x14\x06\x82\x1c\x94\x6c\xa4\x94\x19\xbb\x34\x13\xeb\x2d\xa8\x0d\x0c\x4c\xd4\x9b\x10\x23\x48\xf1\xee\xfb\x9f\x28\xe5\x6b\xe1\xac\x48\xdc\x78\x85\x81\x02\x25\xc2\xf0\x37\x3d\x48\x9a\x21\xe0\x50\x82\xb9\x21\xc3\xe4\x13\xfc\xa7\x3e\x39\x83\xfd\x71\x22\x95\xb4\x9c\x58\x2f\xa0\xca\xe4\x4e\x50\x2e\x5e\x12\xcd\x6e\x00\x0a\x13\x19\xee\xc9\xc0\x5c\xfb\x4a\x9c\xcc\x9e\x83\x2b\x30\x63\x31\x26\x17\x80\xb2\x91\xf2\x58\x0d\x42\x10\xa4\x6b\x2e\x5e\xdd\xe7\x40\x55\xe2\x04\xaf\x53\x45\xfc\xad\x34\x9a\x8a\x81\x3a\xca\x73\x3c\x38\x8f\x1e\xee\x0c\x75\x04\x41\xf0\x4c\x48\xbb\xd1\x4b\x64\xa0\xb4\xcf\x5b\x54\x2d\x4a\x52\x4f\x3d\xf2\x64\x09\xef\x72\x2f\x0a\x63\xf6\xf7\xc7\x98\x7d\x7f\x42\xff\x3a\xdc\x99\x09\x1b\xbd\xad\x4e\x99\xbf\x6e\x31\x7a\x96\x6a\x4b\x3d\x45\x0e\x7f\xc0\x5c\x39\xf8\xf7\x46\x29\xb8\x60\x73\xd5\x9c\x62\xb5\xdf\xd0\xbd\x14\x94\xfb\xe8\xc2\x91\x36\x15\xce\x99\x03\x0e\xec\xef\x12\x0e\xce\xee\xae\x52\xc0\x4c\x99\x1f\x21\xbb\x90\x23\xa3\x3e\x66\x77\x83\xda\xc8\xc0\x06\x52\x4f\x9c\xf0\x32\xe6\x57\xef\x94\xef\x01\x19\xa7\xe9\x9d\x8b\xad\x97\x6a\x7d\x7f\xa8\x37\xa8\xbf\x0d\x84\x2a\x4b\x50\x3e\xd7\x1b\xd7\xb2\x4a\xc4\xed\xe6\xae\x6f\x4a\xbd\x18\x39\xa5\x00\x94\x0d\x6c\xdc\x4c\xd5\x1d\xa0\x5e\x70\xed\x2a\x87\x2c\xe9\xe0\xe5\x0d\x8a\x9f\x36\xf8\x9a\xf4\xc5\x79\x75\x01\x9f\x13\x2b\x62\x3d\xb7\x1f\xe6\xcb\xaa\x69\xfe\x5d\xbd\xac\xfe\x0b\x00\x00\xff\xff\xa0\x5b\xa2\x25\x1b\x07\x00\x00")

func shardsJsonBytes() ([]byte, error) {
	return bindataRead(
		_shardsJson,
		"shards.json",
	)
}

func shardsJson() (*asset, error) {
	bytes, err := shardsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shards.json", size: 1819, mode: os.FileMode(493), modTime: time.Unix(1570602961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shards.json": shardsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shards.json": &bintree{shardsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

