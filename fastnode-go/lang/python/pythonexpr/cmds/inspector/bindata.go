// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/sample.html
// templates/searchnode.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xd9\x72\xdb\x38\xd6\xbe\xf7\x53\xa0\xd9\xff\x5f\xa6\xcb\x32\x29\xc5\xb6\xdc\x56\x24\x57\xc5\x5b\xe2\x24\x5e\xda\xb2\x3b\x4b\xd7\xd4\x14\x44\x1c\x91\x90\x40\x80\x01\x20\xc9\x4a\x4a\xef\x3e\x05\x50\x0b\x45\x52\x8a\x3c\x99\x49\xcf\x45\xe3\x46\x24\x70\x70\x96\x0f\x67\x03\xed\xad\xe6\x2f\x44\x04\x7a\x9c\x00\x8a\x74\xcc\x4e\xb6\x9a\xb3\x1f\xc0\xe4\x64\x0b\x21\x84\x9a\x8c\xf2\x3e\x92\xc0\x5a\x8e\xd2\x63\x06\x2a\x02\xd0\x0e\x8a\x24\x74\x5b\x4e\xa4\x75\xa2\x1a\xbe\xaf\x34\x0e\xfa\x09\xd6\x91\xd7\x11\x42\x2b\x2d\x71\x12\x10\xee\x05\x22\xf6\xe7\x13\xfe\x81\xf7\xc2\xab\xf9\x81\x52\x8b\x39\x2f\xa6\xdc\x0b\x94\x72\x10\xe5\x1a\x42\x49\xf5\xb8\xe5\xa8\x08\xef\xff\x76\xb0\xf7\xfa\xed\xd7\xcf\x5f\x2e\x5f\x8f\x3a\xb5\xdf\x1f\x1e\x6e\xea\xa3\xf1\xe1\x71\xb7\x7b\x59\x3b\x1d\xbc\x7e\x9b\xbc\x6f\xe3\xe3\xf3\xfe\xbb\xeb\xa4\x7a\x1e\xd2\xeb\xf3\xf8\x80\x7e\xba\xee\x1d\x55\xc3\xcf\x1f\xde\x7d\xea\x5c\x1d\x55\xeb\xfa\x43\xdb\x41\x81\x14\x4a\x09\x49\x43\xca\x5b\x0e\xe6\x82\x8f\x63\x31\x50\xce\xd4\x2e\x15\x48\x9a\x68\xa4\x64\xb0\xb0\x23\x10\x04\xbc\xde\x97\x01\xc8\xb1\x55\x3e\x7d\xdc\xdb\xf7\xf6\xbd\x9a\xa7\x18\x8d\xad\xc2\xbd\x52\x7d\xbf\xfc\x46\xfd\x8f\xbb\xc7\xf5\xc3\xf3\xaf\xb7\x55\xf9\x70\x84\x3b\xef\x0e\x6a\x6f\xdb\xfa\xf7\xab\x57\x5f\xfe\x08\xef\xff\xf8\x9a\x74\xbe\x8a\x43\x15\x7f\x7c\x97\x1c\x7c\xea\xde\x0f\xdf\xec\xfe\x86\x3b\xfa\xe1\xa2\x76\x47\xeb\x3d\xfa\x55\xac\xd6\xb7\xe9\xa7\xba\xae\x53\x9c\xf0\x9e\xf2\x02\x26\x06\xa4\xcb\xb0\x04\xab\x3d\xee\xe1\x27\x9f\xd1\x8e\xf2\x13\x91\x24\x20\xbd\x9e\xf2\x6b\x5e\xed\xc0\xab\xfb\x83\x98\xcc\x26\x57\x5b\x34\x7a\xf3\x8a\x5e\x76\xef\xd9\xf5\xe5\xb8\x4e\x0f\xdb\xf7\xf8\x69\xd8\xbd\x3d\xa3\xdd\xd3\xc7\xdf\xc7\xb5\xa7\x37\xe4\xad\x3f\x16\xf4\xe8\xf2\xfe\xe6\xe3\xf5\xfd\xe9\xe0\xf0\xc3\x1b\xf2\xf9\xd3\xa0\x16\xbd\xaa\x7f\xbe\xed\xb0\x70\xa0\x7f\xc8\xa2\x67\xb8\x54\x2f\xef\x51\xe5\xe6\x9c\x56\x1f\x43\x36\xbe\xdf\xed\xdd\xd4\xcf\xfa\xc3\xe1\xd5\xd9\xed\xe9\x8b\x9e\xc0\xdd\xc3\xab\x03\xb6\x1f\xc6\xc7\xaf\x1f\xeb\x6f\x82\x9a\x08\xeb\xef\xd5\x11\xad\x3f\xfa\x71\xbf\x8f\xc9\xe0\x1d\x3e\x8d\xd8\xab\x8f\xc3\xe3\xfe\x73\xcd\x31\x61\xd5\x72\x34\x3c\x69\xbf\x87\x87\x38\x9d\x75\x9e\x75\x6e\x43\xaa\x8c\x8d\x35\xaf\x6a\x1e\x67\xb6\xe5\xe5\x95\x47\x68\x46\xbc\x8d\xb0\xe5\x88\x7d\xbe\x60\xc3\xe4\xa4\xe9\x1b\x61\x33\x3b\x8d\xb4\xbc\x9c\x74\xcd\x0c\x33\x85\x25\xe0\x5f\x4d\x54\xa1\x6f\xf3\x79\x33\x22\xa0\x61\xa4\x1b\xe8\xb0\x5a\x4d\x9e\x5e\x2e\x2d\x8d\x28\xd1\x51\x03\xd5\xaa\xd5\xff\x5f\x5e\xe8\x0a\xae\xf7\xba\x38\xa6\x6c\xdc\x40\xd7\xc0\x99\xa8\xa0\x6b\xc1\x71\x20\x2a\xe8\x4c\x70\x25\x18\x56\x15\xe4\x9c\x89\x81\xa4\x20\xd1\x0d\x8c\x9c\x0a\x8a\x05\x17\x2a\xc1\x01\x2c\xf3\xea\xe0\xa0\x1f\x4a\x31\xe0\x64\x2f\x10\x4c\xc8\xc6\x28\xa2\x1a\x54\x2c\xfa\x19\xc2\xc9\xfc\xc9\x93\x62\x94\xb3\x20\xc1\x84\x50\x1e\x36\xd0\x61\xd6\x80\x74\x4b\xd3\xb7\xd0\x4c\x61\xd2\x54\x33\x38\xb9\x78\x4a\x24\xa2\x5c\x25\x10\x68\x21\x9b\x7e\x3a\xbb\xd5\xf4\xd3\x54\xdb\xec\x08\x32\x9e\x6e\x20\x74\x88\x02\x86\x95\x6a\x39\x81\xe0\x1a\x53\x0e\x72\xaf\xcb\x06\x94\x64\xd0\xcd\x52\x49\x31\xca\xac\x14\x79\xb0\xbd\x7a\x6e\x3d\x55\x6c\x7a\x40\x88\x12\x43\x45\xc0\x39\xf9\xf6\xcd\x3b\x1d\x74\xbb\x20\x27\x93\xa6\x3f\x5b\xcf\xb1\xf6\x09\x1d\xae\x97\xf6\xa2\x4c\xda\x5a\x7d\xe7\x54\x9d\x81\xd6\x82\x5b\x8d\x12\x09\x84\x06\x73\x4f\x4e\x57\x9c\x19\x8f\x8e\xe6\xa8\xa3\xf9\x5e\x22\x69\x8c\xe5\xd8\x39\xb9\x4b\xc9\x9b\x7e\x4a\x58\xa2\x41\x51\xf1\x7f\x4f\xb1\x18\xcc\x99\x74\x45\x47\xf3\x4d\x95\xbb\x9e\x6e\x79\x96\x76\x1b\x20\x7d\xe0\x58\x8d\x94\xc6\xda\x24\xa2\x3b\x86\x03\x40\xff\x87\x28\x47\x36\xe8\xb4\x40\x72\xc0\xd1\x14\x49\x2a\x38\xc2\x1a\xe9\x08\x6b\x94\x08\xca\x75\x4e\x40\xfe\xf5\x59\x1e\x56\x2b\x3d\xf4\x68\x1f\x61\x46\x43\xde\x72\x02\xe0\x1a\x64\x8a\xc4\x95\x45\x22\xda\x2f\xd9\x90\x48\x58\xc2\xd8\xa4\x9c\x44\xc2\x5a\x60\x7e\x8a\xde\x77\x73\x0c\xd5\x77\x54\x5f\xa0\xad\x25\xc0\xff\x8c\x01\x6d\xc0\x32\x88\xd0\x6b\x89\x93\xa8\x68\xc1\x7f\x58\xa3\xd4\x2b\xad\xc4\xd0\x08\x34\x28\xfc\x7c\x93\x1f\x24\x0e\xe0\x3b\xa7\xa5\x0d\xcd\x33\x0f\x29\xfb\xb8\xb6\xd8\x2f\x76\x77\x07\x3c\x0d\x40\x09\x9c\x80\xb4\xa7\xe0\x5a\x68\x76\x72\x85\x85\x76\x91\xfb\x4b\xe9\x8a\x19\x43\x2c\xd1\xbc\x28\xa0\x16\x22\x22\x18\xc4\xc0\xb5\x17\x82\xbe\x60\x60\x1e\x4f\xc7\x57\xc4\xdd\xce\x80\xbf\xbd\xf3\xb2\xc0\x67\xce\xc3\xc3\x49\x02\x9c\x9c\x45\x94\x11\x77\xce\x2d\x90\x80\x35\x3c\xc0\x93\xbe\x11\x04\x5c\x87\x0b\x94\x9e\xe3\x4e\x09\x2f\x09\x7a\x20\xf9\xd2\xf4\x64\xe9\xcd\x56\x43\x62\x38\x29\xd4\x4a\x19\x79\xdc\xbc\x79\x31\x4e\xdc\x19\x34\xae\x99\xda\x29\x9a\x6c\xa6\x3d\x5b\xa5\x51\x0b\x39\xbf\x42\x9d\xbc\x38\x3e\x72\x8a\x6a\x18\xe0\x2c\x2d\x83\x21\x30\xd4\x44\xd5\x32\x00\xcd\x20\xc0\x40\x03\x5a\x10\x17\x99\x4d\x56\x58\x69\x37\x2d\x93\x4f\x76\x5e\x6e\x95\x98\x7b\x41\xc2\x8c\xb9\x60\xde\x96\xcd\x35\x53\x65\x1a\x9a\xf9\xb9\xbd\xdf\x1c\xfb\xe4\x34\x90\x43\xb0\xec\x87\x12\x8f\x9d\x49\x51\x5d\xbb\x07\x4b\x29\x46\x46\xa4\xa3\x45\x09\x3e\x53\x03\x0c\xe9\x77\x0c\x30\x4e\xc6\xa7\xa7\xc5\x61\x84\x4c\x0b\x78\x8e\x35\x6e\x83\x76\x33\x67\x99\x73\x05\xb3\x0b\xa6\x46\x97\xef\xb2\x90\x94\xec\xfa\x51\x87\x36\x3c\x08\xd6\xd8\xe0\x55\xea\x3e\xaa\x91\xfe\x54\x4a\x81\x53\x8d\xf4\x67\x79\x75\xf2\x72\x6b\x19\x95\x88\x82\x34\x2a\xd0\x00\xb3\x52\x49\xc0\x71\x87\x01\x69\x20\x2d\x07\x50\x14\x65\x3d\xad\x0d\x09\x96\xd8\x9c\xbf\x6d\x71\x8b\x54\x46\xcf\x76\x82\x03\xdb\x5b\xd6\x0e\x4b\x28\x08\x95\x10\xa4\x1c\xb6\x1f\xcf\xb7\x8b\x04\x4a\x48\x7d\x0d\x3a\x12\xa4\x81\xb6\x53\x6a\x20\xdb\x05\xeb\xf2\x08\x8a\xc4\x56\xb7\x52\xd3\x18\x1e\x8b\x81\x6e\xac\x88\x27\x89\x39\x11\x71\x1b\x8c\xed\xb5\xa2\x3e\x66\xd0\x38\x91\x62\x08\xe4\xfd\x94\x51\x39\x44\x28\x07\x73\x63\xe9\xad\x48\x3f\x29\x4e\x99\x7b\x9f\xc4\x29\x3e\xe5\xda\x46\x62\x08\x32\xd5\x60\x13\x86\x49\x34\x56\x34\x50\x0d\xd4\xc5\x4c\xc1\x77\x51\xe4\xa0\x47\x42\xf6\x33\x31\x70\x93\xce\xb8\x73\x2f\xaf\x58\x67\xad\xcc\x00\xcf\x39\xf3\x94\x81\x27\xb8\xeb\x10\x89\xc3\x90\xf2\xd0\xa9\x2c\x0a\x88\x6b\x1c\x28\x56\x65\x99\xc3\x64\xc0\x74\x75\x9a\x5e\x19\xf0\x50\x47\xa8\xd5\x42\xb5\x55\xb9\xd0\xea\x4c\x09\x6a\xa1\xec\xce\x3f\xab\xff\x28\x26\x90\xac\x76\xb1\x18\x82\x2d\x0d\x9c\x92\xca\x6c\xab\x6d\x2a\x41\x7a\x01\xe6\x43\xac\xbc\xa7\x55\x0b\xe3\x92\x22\x32\x29\xa4\xa4\x55\xa0\x28\x60\x10\xd8\xba\x94\x81\xe5\xaf\x45\x65\x96\x30\x97\xab\xdb\x9f\x9c\x92\x35\x1b\x06\x92\x4d\xbd\xe4\xf1\xfe\xbd\xbb\xed\xa7\x09\xce\xec\xdc\xae\x20\x26\x02\x9b\x25\xbc\xf4\x73\x43\x09\x60\x66\x0c\x24\xf3\xd2\x6d\x0b\x4e\x69\x9f\x77\x67\xd5\x76\xcb\xad\x33\x23\xc2\x2a\x6a\x4c\x4b\x20\xe5\x7d\xcf\xbc\x97\x07\x24\x9a\x66\xa5\x2c\xb5\x79\x2a\xa7\xce\x9f\xdc\x6c\x04\xf6\x86\x0e\x1e\x13\xa1\x6b\xd4\x8e\x24\x74\x57\x90\x8e\x28\x27\x62\xe4\x89\x04\xf8\x3a\xd2\xd5\x1e\x33\x29\xb6\x5d\x01\x03\x2c\x6d\x93\x23\x81\xbb\xc0\x20\xce\x1f\xfd\x28\xa2\x0c\x90\x5d\xf2\xba\x54\x2a\x6d\xa9\x4b\x0b\xb4\x21\x91\x60\x42\x20\x6d\x9b\xf2\x7b\x5e\xae\xe8\x85\x4a\xf4\x62\x54\xd9\x32\xe7\xe6\x05\x19\x0f\x61\x34\x5b\x10\xd3\x9e\x6c\x5a\x13\x5d\x87\x51\x27\x27\x88\x51\xcf\x36\xc9\x37\x38\x06\xb4\xdb\x42\x8e\xe5\xbe\x17\x4a\x31\x48\xf6\xa8\x86\x38\xd7\x14\x4c\x1b\x02\x46\xd7\x29\x98\xf6\xab\xa6\x13\xb4\x66\x1a\xde\x15\xfb\x69\xa7\x4c\x61\x43\x91\x55\xd9\x7e\x3e\x6d\xdb\x78\x15\xd2\x75\x7e\x75\x76\x67\x3c\x72\xaa\x97\x1c\xcf\x32\x81\x85\x78\x93\x56\xd5\xaa\xb6\xde\x17\x52\x93\x2e\xa4\x14\xd2\x95\xa0\x92\xbc\x25\x66\xce\x33\x7c\xdc\x9d\xa5\x79\x4f\x47\xc0\x17\xfd\x5b\x01\x81\x74\xef\x1c\xae\xd9\xad\xbc\x82\x9c\x4b\xd0\x41\x84\xc0\x48\x6c\x20\x07\xed\xa6\x22\xd2\x75\xb4\x8b\x9c\x74\x52\xe7\x1d\x67\x13\x33\xae\x05\x01\x66\x2e\xd5\xae\xb9\x32\x17\x4d\x59\xa8\x33\xbf\x52\x57\x90\x25\xdd\x80\xf9\xe2\xd2\xfb\x20\x01\xdc\xa4\x60\x72\x96\x7f\xee\xde\x5b\x41\x89\xde\x44\x86\xbd\xa4\x15\xc1\xcc\x72\x4e\xef\x68\x15\xb4\x11\x3f\xb7\x23\xc8\x38\x35\x51\x70\x36\x5e\xc7\x77\x71\x40\x44\x70\xf8\x25\x1f\x4f\x79\x80\x0d\x63\x2f\x07\x1d\x9a\x16\x98\x55\xe2\xd0\x26\xf7\xa3\x52\xb0\xad\xb4\x05\xa6\xff\x34\xa0\x96\x2a\x98\x02\x68\xc9\x2d\x50\xa5\x44\xe9\x85\xd3\x12\xa5\x77\xcb\x32\x24\xe7\x31\x85\x09\xb9\x18\x02\xd7\xef\xa9\xd2\xc0\x41\xba\xdb\xe7\xb7\xd7\x67\x82\x6b\x33\x27\x30\x31\xed\xe4\xa2\xf4\xe6\x6d\x5e\x19\xfe\xb3\x2f\x7a\x3b\x9e\xe0\x01\xa3\x81\xe9\x92\x16\xd7\xa1\xe1\xe6\xf1\x34\x83\x85\x87\x9e\xe7\xe5\x8f\x0d\x95\xd6\x57\xc7\x9f\x49\xdf\xa4\xb8\x76\x4d\xc0\x9a\xe2\x53\x59\xd1\x20\xc4\xd3\xfe\xda\xb9\xbb\x6d\x3f\x38\x2b\x3a\x59\xc0\x04\xa4\x5a\xd5\x35\x9b\xe1\x4c\x41\xdd\x7b\x18\x27\x60\xd2\x00\x4e\x12\x46\x53\xed\xfc\x9e\x12\x7c\x05\xeb\x92\x3e\xd5\x0c\x73\xbe\x0d\xf4\xb6\x7d\x7b\xe3\x29\x2d\x29\x0f\x69\x77\xbc\xa6\x07\xe8\xd8\x4f\xbd\x8d\xd5\x07\x66\x3f\x0a\xef\x78\x43\xcc\x56\x75\xeb\x93\x9d\x92\xae\x7c\xa7\x30\x95\x4b\x9d\x26\xfd\x09\xae\xca\x6e\xfb\x68\xf6\x09\x64\x46\xe3\x89\xfe\xaa\x2e\x0d\xcd\x1d\x64\x91\xcc\x2d\xdb\xf2\xbe\xc2\x0c\x1d\x49\x31\x42\xcb\xe4\xd3\x44\x6c\x9c\x6c\xc5\xce\xe2\xd7\x00\xb4\xa8\x9f\x33\x36\x9b\xe3\x30\xdb\x81\x5a\x27\xf3\xdd\x9e\x39\x6d\x77\x67\xd5\x16\x73\xb2\x29\x79\x26\xc7\xd9\x1b\x49\xfe\x8b\x4c\xe6\x4e\x92\x2d\x20\xff\xed\xd8\xce\x7e\x14\xff\xe1\xf8\x0e\x41\x9b\xe0\xb6\x49\x1c\x19\xae\x7f\x87\x79\x76\xfc\xfc\x30\x9f\x62\x61\x4b\xdc\xba\xcb\xfb\xdf\xe9\xe0\x2f\x4c\x07\xe6\x58\x36\xc8\x06\x8b\xbf\x1e\x37\xfd\xf4\xaf\x8e\x4d\x3f\xfd\xb7\x8f\x7f\x05\x00\x00\xff\xff\xd2\x2a\x42\xd4\x0f\x22\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 8719, mode: os.FileMode(420), modTime: time.Unix(1570040928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSampleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4f\x11\xe7\x00\x53\x66\xff\xed\xc2\x95\x2b\xef\x50\x27\xc1\x0e\x74\xa6\x22\xd9\x94\x92\xbb\x0b\x06\xc5\x55\xc8\x87\xf7\xf9\x01\x27\x6e\xab\xf6\xa7\x50\xd1\xbd\xa6\x80\xef\x91\xcc\x29\x10\x11\x8d\x31\x5f\x25\xb3\xd9\xe7\x83\x6e\x5a\x25\x8d\x31\xdf\xf2\x2e\x66\x88\x1e\x04\x44\x27\xb8\x37\xee\x2e\x51\x16\xca\x75\x7b\x1c\xe7\x69\x95\x43\xe5\x35\xfd\xbb\xb2\xfc\xfa\x2f\x8d\xbb\x59\x40\x74\x8b\xe8\x23\xde\x01\x00\x00\xff\xff\x2c\x95\xa2\xc3\x9d\x00\x00\x00")

func templatesSampleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSampleHtml,
		"templates/sample.html",
	)
}

func templatesSampleHtml() (*asset, error) {
	bytes, err := templatesSampleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sample.html", size: 157, mode: os.FileMode(420), modTime: time.Unix(1569389750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearchnodeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x5b\x73\xe2\x36\x1c\xc5\xdf\xf3\x29\x54\xbf\x66\x90\x70\x00\x13\xb6\x86\x99\x90\x2c\x90\x10\x92\x06\xc8\xe6\xf2\xd2\x91\x2d\xd9\x96\x2d\x4b\x8e\x24\x03\xc6\xc3\x77\xef\x70\x49\x96\x66\xa1\x93\x4e\xa7\x7a\x41\x97\xbf\x0e\xbf\x33\x3e\x7f\xdb\xfd\x8d\x48\xdf\x14\x19\x05\x91\x49\x79\xe7\xc4\x7d\xff\xa1\x98\x74\x4e\x00\x00\xc0\xe5\x4c\x24\x40\x51\xde\xb6\xb4\x29\x38\xd5\x11\xa5\xc6\x02\x91\xa2\x41\xdb\x8a\x8c\xc9\xf4\x37\x84\xb4\xc1\x7e\x92\x61\x13\x41\x4f\x4a\xa3\x8d\xc2\x99\x4f\x04\xf4\x65\x8a\x3e\x36\x50\x1d\x9e\x41\x1b\xf9\x5a\xff\xdc\x83\x29\x13\xd0\xd7\xda\x02\x4c\x18\x1a\x2a\x66\x8a\xb6\xa5\x23\x5c\x3b\xaf\x57\xfa\x37\xcb\xd7\xb7\x5e\x7f\xee\xd9\x0f\xd3\xe9\x9d\x33\x2f\x1a\xad\x20\xe8\xd9\xdd\xbc\x7f\x93\xdd\x4e\x70\xeb\x2a\x19\x8e\xb2\xea\x55\xc8\x46\x57\x69\x9d\xbd\x8c\xe2\x66\x35\x7c\x7d\x1a\xbe\x78\xd7\xcd\xaa\x63\x9e\x26\x16\xf0\x95\xd4\x5a\x2a\x16\x32\xd1\xb6\xb0\x90\xa2\x48\x65\xae\xad\x9d\x2f\xed\x2b\x96\x19\xa0\x95\xff\xd3\x87\x2f\x09\x85\xf1\x5b\x4e\x55\xb1\x81\xdf\x4e\x2b\x35\x58\x83\x36\xd4\x9c\xa5\x1b\xe0\xf8\x20\xef\xdb\x39\x43\xcf\xa7\x2d\xa7\x71\xb5\xbc\xaf\xaa\x69\x13\x7b\xc3\xba\x7d\x33\x31\x0f\xd7\x17\x6f\x3f\xc2\xf1\x8f\x65\xe6\x2d\x65\x43\xa7\xcf\xc3\xac\xfe\x12\x8c\x67\x83\xd3\x73\xec\x99\xe9\x77\xfb\x0f\xe6\xc4\x6c\x29\x8f\xf3\xba\x68\xcb\xfa\x4f\xe0\x44\xc4\x1a\xfa\x5c\xe6\x24\xe0\x58\xd1\x0d\x3d\x8e\xf1\x02\x71\xe6\x69\x94\xc9\x2c\xa3\x0a\xc6\x1a\xd9\xd0\xae\x43\x07\xe5\x29\x79\xdf\x3c\xee\x68\x3e\xb8\x60\xbd\x60\xcc\x47\xbd\xc2\x61\x8d\xc9\x18\x2f\x66\xc1\xfd\x25\x0b\xba\x8f\x0f\x85\xbd\x18\x90\x1b\x54\x48\xd6\xec\x8d\xef\x9e\x47\xe3\x6e\xde\x78\x1a\x90\xd7\x97\xdc\x8e\x2e\x9c\xd7\x7b\x8f\x87\xb9\xf9\x4f\x8e\xfe\x45\xa4\xe2\xcf\x89\x3a\x6c\xa7\x5b\x7d\x0c\x79\x31\x3e\x8d\xef\x9c\xcb\x64\x36\xbb\xbe\xbc\xef\x9e\xc5\x12\x07\x8d\xeb\x3a\xaf\x85\x69\xab\xff\xe8\x0c\x7c\x5b\x86\xce\xad\x6e\x32\xe7\x11\xa5\x49\x82\x49\x3e\xc4\xdd\x88\x5f\x3c\xcf\x5a\xc9\xd7\xed\xac\xfb\x04\xac\xbb\xaa\x6d\x19\xba\x30\xeb\xcc\xef\x52\xb7\x1e\x50\xc9\x39\x28\x3f\x96\xeb\x91\x61\x42\x98\x08\xbf\x81\x46\xb6\xf8\xfd\xe3\x64\xb5\x95\x43\x1b\xbd\x9d\xb6\x61\x86\xd3\xce\x84\x62\xe5\x47\x40\x48\x42\x41\x59\xc2\x3b\x9c\xd2\xd5\xca\x45\xdb\xc3\x13\x17\x6d\xdb\xd7\xf5\x24\x29\x76\xf7\x08\x9b\x01\x9f\x63\xad\xdb\x96\x2f\x85\xc1\x4c\x50\x55\x09\x78\xce\xc8\x1e\xd9\x7e\x95\x92\xf3\xbd\x93\x5f\x35\x78\xc5\x3e\xfb\x54\xb0\x29\x8a\x6a\x00\x73\x16\x8a\xb6\xe5\x53\x61\xa8\xb2\x3a\x53\x85\x7d\xea\xa2\xa8\x76\xa0\x3a\x53\xb4\x53\x96\x70\x4a\x17\x66\x6d\x60\xbd\xfc\xfb\x7f\x22\xc2\x66\x7b\x80\x9f\x96\xff\x0b\x6f\x5f\xe1\x2c\xd2\x47\x80\x73\xfe\x2e\xc9\x99\x36\x95\x50\xc9\x3c\x3b\x20\xbb\x1e\x65\xa9\xb0\x08\x29\x80\xb7\x4c\x24\x7a\xb5\x3a\x58\xe4\x72\xf6\xab\x60\x85\x19\x9a\x1e\x51\xdd\x5c\xc2\xdb\xf7\x6f\x59\xc2\xc1\xf8\x7b\x6f\xb5\x02\x06\xab\x90\x9a\xb6\xf5\xa7\xc7\xb1\x48\xac\xce\x5e\x28\xf0\x61\x1d\x17\x71\x76\x8c\x9b\x0a\x72\x00\xd7\x45\x39\xff\xea\xd3\xd9\x4d\x5d\xb4\x8d\xa0\x8b\xb6\xdf\x95\xbf\x02\x00\x00\xff\xff\x66\x13\x6b\x9e\x6f\x06\x00\x00")

func templatesSearchnodeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchnodeHtml,
		"templates/searchnode.html",
	)
}

func templatesSearchnodeHtml() (*asset, error) {
	bytes, err := templatesSearchnodeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/searchnode.html", size: 1647, mode: os.FileMode(420), modTime: time.Unix(1569968516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/sample.html": templatesSampleHtml,
	"templates/searchnode.html": templatesSearchnodeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"sample.html": &bintree{templatesSampleHtml, map[string]*bintree{}},
		"searchnode.html": &bintree{templatesSearchnodeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

