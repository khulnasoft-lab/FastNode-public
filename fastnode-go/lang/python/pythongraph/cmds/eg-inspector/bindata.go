// Code generated by go-bindata.
// sources:
// templates/root.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdd\x8e\xdb\xb6\x12\xbe\xf7\x53\x0c\x98\x00\xc7\x06\x56\xd2\x26\xd9\x04\x07\x7b\x64\x01\xa7\xdb\x36\x57\x49\x17\x48\x5f\x80\x12\xc7\x16\xd7\x14\xc9\x90\x94\x77\x5d\x41\xef\x5e\x50\x3f\xd6\xcf\xca\x69\x37\x0d\xea\x1b\x53\x9c\xbf\x6f\x86\x33\xc3\x61\x9c\xbb\x42\x24\xab\x38\x47\xca\x92\x15\x00\x40\x6c\x33\xc3\xb5\x03\x77\xd2\xb8\x25\x0e\x9f\x5c\xf4\x40\x8f\xb4\xdd\x25\x60\x4d\xb6\x25\xb9\x73\xda\xde\x46\x51\xa6\x18\x86\x0f\x5f\x4b\x34\xa7\x30\x53\x45\xd4\x2e\x83\xb7\xe1\x9b\xf0\x26\x2c\xb8\x0c\x1f\x2c\x49\xe2\xa8\x95\x7d\xb9\xfa\x82\x3e\x65\x4c\x86\xa9\x52\xce\x3a\x43\xb5\xff\xf0\x66\xce\x1b\xd1\xbb\xf0\x5d\xf8\x3e\x7a\xb0\xc3\xd6\x25\xb3\x82\xcb\x03\x18\x14\x5b\x62\xdd\x49\xa0\xcd\x11\x1d\x19\xa3\xc8\xac\x25\x90\x1b\xdc\xbd\xdc\x7e\x66\xe7\x00\xbc\xb2\x24\x8e\xbc\xd1\xde\x6d\x6f\xb5\x5d\xfb\x9f\x37\x49\x0d\xd2\x57\x3e\x84\x50\x9d\xf7\xfd\x6f\xa7\xa4\x2b\xb8\x38\xdd\xc2\x27\x94\x42\x5d\xc1\x27\x25\x69\xa6\xae\xe0\x4e\x49\xab\x04\xb5\x57\x40\xee\x54\x69\x38\x1a\xf8\x8c\x8f\xe4\x0a\x0a\x25\x95\xd5\x34\xc3\xff\x9d\x15\xd5\x83\x29\x16\x6a\xa3\x74\x20\x69\x31\xb7\x94\x29\xa1\xcc\x2d\xbc\xfa\xf0\xe1\xc3\xa2\x24\x4d\xc5\x12\xb8\xc0\xf2\x3f\xf0\x16\xde\xdc\xe8\xa7\xb1\xd8\x79\xe9\x83\xa4\x05\x3a\xae\xe4\x4c\xba\xa0\x66\xcf\x65\x20\x70\xe7\x6e\xe1\xed\xf5\x58\x7e\x84\x27\x15\x34\x3b\x2c\x6b\xde\x71\xe1\xd0\x20\x0b\x54\xe9\x96\x9d\x31\xc8\x96\x45\x7d\x10\xe8\x9e\x3a\x64\x81\x3d\x70\xbd\x2c\xcd\xa8\x39\xcc\x34\x34\xc7\x17\x8d\xce\x2f\x76\xdc\x09\x4c\xee\xce\x4e\x5a\xd0\x82\x9e\xf6\x46\x95\x92\xc5\x51\x4b\x5d\xc5\x51\x5b\x53\x71\xaa\xd8\x29\x59\xc5\x8c\x1f\x21\x13\xd4\xda\x2d\xc9\x94\x74\x94\x4b\x34\xc1\x4e\x94\x9c\x91\xa4\x45\x19\xe7\x37\xc9\xc7\x8f\x9f\x3f\x43\x36\xd2\x8c\x4f\x5a\x28\x43\x9d\x32\x71\x94\xdf\x74\x00\x46\xba\x8c\x7a\x24\x43\x5a\x4d\xad\x88\xa0\x60\xc1\xcd\x88\xdc\xb0\xec\x94\x29\x80\x66\x5e\xfd\x96\x10\x28\xd0\xe5\x8a\x6d\x89\x56\xd6\x11\xe0\x6c\x4b\x3c\x43\x90\x96\xbb\x1d\x9a\x99\xec\xdc\x44\xc3\xe9\xfd\xd6\x0b\x8c\x6d\xa8\xba\x3c\x9f\x48\x78\xff\x8d\x12\xad\x35\x5f\x00\x04\x7c\x72\x6e\x49\x67\x14\x8c\x7a\xb4\x5b\xf2\xe6\x9a\xf8\x63\xb1\x5b\x72\x73\x4d\xc0\x4b\xce\xb0\x55\x55\xf8\x53\xb3\xac\xeb\x38\xea\x2d\x2d\x20\x8e\x18\x3f\x7e\xdb\x91\x69\x14\x2f\x71\x75\x11\x7d\x7f\x89\x35\xbf\x49\x7e\x33\x0c\x0d\x97\xfb\xe1\xb0\x9e\x71\x71\xa9\xcb\xbe\xff\x19\xca\xb8\xea\xbd\x57\x9d\x2c\x81\x23\x15\x25\x6e\x09\x15\x3a\xa7\x29\x3a\x9e\x51\x41\xa0\xaa\x80\xef\x00\xbf\x42\xd8\x1b\x81\x29\x47\x5d\x43\x96\x63\x76\x40\x56\x55\x80\x92\x41\x5d\x27\xf0\xff\x11\x47\x9c\x9a\x7f\x8c\x29\xa3\x42\x68\xa3\xd2\x65\x3c\x67\xea\x02\x16\x48\xe0\x8e\x0a\x71\x6f\x54\x0a\x5f\x32\x65\xf0\x47\xc0\xd1\x46\x1d\x39\xf3\x39\xb3\x04\xe7\x4c\x5d\x86\x73\xdf\x91\x9b\x82\xa3\x6d\x91\xfd\x88\x10\xa9\x22\xe5\x12\x59\xf0\x8d\x38\x4d\x58\x2e\x04\xab\xe3\x01\xfd\x37\x22\xb6\x9c\xe2\x2f\x4c\xe0\x67\x7e\x36\xa8\x52\xf5\xd4\xbb\x8a\xd2\xdf\x08\x41\xdb\x84\x1b\x97\x7d\x05\x3f\xdf\x6d\x5d\x0e\x7f\x69\x08\xbf\xf6\xfb\x30\xf8\x09\x23\x47\x2f\x43\x11\x34\x45\xe1\x0b\x7f\xc1\x46\xd2\xaa\x05\x7f\x0f\x18\x64\xe3\x9e\x19\x47\x8d\xe0\x8b\x22\xf5\x6f\xf5\x08\xe8\xfa\x44\x9f\x7a\x97\xfb\xc4\xb3\xc3\x98\x24\xdd\x90\xf7\x5d\xd2\xd9\x32\x75\xea\x80\x72\x9c\x6f\xe7\xfc\x1e\xa8\x8b\x3d\xe2\x4b\x47\x85\x9f\xd1\x77\xe3\xcb\x45\xf0\x42\x4c\xbe\x1b\x7c\x52\x0c\xc5\x32\xa8\x81\x7c\xb9\x5b\x34\xf4\x97\xa6\xfd\xa5\xed\xb4\x74\x4e\xc9\x0e\xba\x2d\xd3\x82\x3b\xd2\x9f\x5b\xea\x24\xa4\x4e\x06\xda\xf0\x82\x9a\x13\x49\x3e\xa2\x9b\x26\x55\x2b\x3d\xbb\x4c\x23\x7f\x21\xcd\xf6\x7c\x36\xf8\xba\x68\x02\x65\x03\x4d\x25\x0a\x3f\x0d\x4e\x40\xcd\x3f\x9f\xa7\xd0\x7f\xfb\xfb\xf1\x8c\xa1\x57\x35\x35\xd7\x56\x49\x33\xbf\x6c\x89\x41\x46\x92\x2f\x07\xae\xf5\xb4\x26\x20\xc5\x8c\x96\x16\x41\xed\xa0\x1f\x84\xfc\x78\x76\x0b\x55\x15\x76\xfc\xa3\x81\xa6\xae\x61\xed\xa5\xc1\xe5\xd4\xc1\xa3\x2a\x05\x93\xff\x71\x90\xd3\x23\x42\x8a\x28\xa1\x9f\xc3\x9a\xfa\x4b\xcb\x8e\x44\x25\x50\x99\xa1\x75\xca\x4c\x39\xd6\x7e\xae\x9a\xd7\xe9\x66\xb3\x58\xa9\x55\xe5\xb0\xd0\x82\x3a\x84\x89\xf3\xa9\x50\xd9\x81\x40\x38\x81\x39\x0a\x63\xb7\xec\xff\xbe\xf9\xce\x68\x25\x5e\xaf\xc9\x68\x54\x0d\x1a\x2c\x64\x13\x66\x82\x67\x87\xf5\xae\x94\xcd\x8c\xb4\xc6\x23\x4a\xb7\x19\xa6\x45\xbe\x83\xf5\xeb\x76\x37\x74\xd4\xec\xd1\x6d\x42\x4d\x0d\x4a\xb7\xde\x84\x59\xce\x05\x33\x28\xa7\x9a\xfb\x5d\xb2\x09\xb9\x5d\x93\xdb\x23\xb7\x3c\x15\x48\x36\x9b\xe9\x10\xfa\xfd\x6a\x73\xce\x70\xbd\x19\xa6\x56\x14\x76\x3e\xb9\x7f\xbf\x72\x9b\xab\xc7\xb1\xf2\xf3\xaa\x55\x68\x9d\xd2\xf7\x43\x4e\x75\x9c\xf5\x66\xb5\x1a\xde\x60\x71\xd4\x8d\xc1\x51\xfb\xe0\x5c\x55\x15\xc3\x1d\x97\x8b\x67\x5c\xd7\xb3\x71\xb9\x67\x20\xfd\x63\xae\x4d\xf9\x39\xb9\x3d\x41\xa8\x2a\x7f\xf9\xdc\x9f\xc7\x7d\x9f\xde\xbe\xa3\x3c\x7b\x00\x54\x4d\x94\x3c\xb3\x67\x19\xf2\xaa\xae\x61\xfc\xce\xa8\x2a\x94\xac\xae\x09\x34\x93\xfd\x96\x54\x55\xf8\xbb\x52\xc2\x71\x5d\xd7\xa3\x62\xac\xaa\x70\xac\xa2\xcb\xc9\x59\x82\xb7\x7d\x70\xef\x60\x2d\x50\x42\x78\xd7\x05\x79\x03\xd7\x75\xf7\x56\x59\xf6\x7c\x38\x8e\x56\x57\x55\x19\x2a\xf7\x38\x68\xe8\x0c\xfe\x55\xf1\x9c\xd9\x1a\x97\x56\x0b\x9d\xe8\xdc\x81\xfb\x4a\xea\x79\x57\xab\xd5\x9f\x01\x00\x00\xff\xff\x39\x80\x82\x9a\x2e\x10\x00\x00")

func templatesRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRootHtml,
		"templates/root.html",
	)
}

func templatesRootHtml() (*asset, error) {
	bytes, err := templatesRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root.html", size: 4142, mode: os.FileMode(436), modTime: time.Unix(1578961625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/root.html": templatesRootHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"root.html": &bintree{templatesRootHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

