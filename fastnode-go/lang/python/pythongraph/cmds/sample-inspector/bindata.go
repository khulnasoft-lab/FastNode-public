// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/sample.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xe2\x3a\x16\xff\x7f\x3e\x85\xaf\xaf\x56\x50\x15\x12\x98\xb6\x74\xca\x42\xa5\xbe\xdf\xed\x4c\x1f\x77\x1e\xab\xd5\xca\x49\x4e\x12\x83\x63\x67\x6c\x07\x4a\x47\xfd\xee\x2b\x3b\x0d\xaf\x06\x96\xce\xea\xd6\xff\x90\xd8\xc7\x3e\xbf\xf3\x3e\x0e\x1f\x3a\x7f\x04\xc2\xd7\xa3\x14\x50\xac\x13\xb6\xfb\xa1\x53\xfc\x00\x09\x76\x3f\x20\x84\x50\x87\x51\xde\x47\x12\x58\x17\x2b\x3d\x62\xa0\x62\x00\x8d\x51\x2c\x21\xec\xe2\x58\xeb\x54\xb5\x5d\x57\x69\xe2\xf7\x53\xa2\x63\xc7\x13\x42\x2b\x2d\x49\xea\x07\xdc\xf1\x45\xe2\x8e\x27\xdc\x4d\xe7\xa3\xd3\x74\x7d\xa5\x26\x73\x4e\x42\xb9\xe3\x2b\x85\x11\xe5\x1a\x22\x49\xf5\xa8\x8b\x55\x4c\x36\x3e\x6d\xd6\x4f\xce\x9f\x7e\xfc\x3c\x3e\x19\x7a\xcd\x2f\xf7\xf7\xd7\xad\xe1\x68\x6b\x27\x0c\x8f\x9b\xfb\xd9\xc9\x79\x7a\x79\x47\x76\x0e\xfb\x17\x57\x69\xe3\x30\xa2\x57\x87\xc9\x26\xfd\x7e\xd5\xdb\x6e\x44\x3f\xbe\x5e\x7c\xf7\xce\xb6\x1b\x2d\xfd\xf5\x0e\x23\x5f\x0a\xa5\x84\xa4\x11\xe5\x5d\x4c\xb8\xe0\xa3\x44\x64\x0a\xbf\xc8\xa5\x7c\x49\x53\x8d\x94\xf4\x27\x72\xf8\x22\x00\xa7\xf7\x33\x03\x39\xb2\xe0\xf3\xc7\xfa\x86\xb3\xe1\x34\x1d\xc5\x68\x62\x01\xf7\x4a\xf1\xfe\xfc\x44\xdd\x6f\xeb\x3b\xad\xad\xc3\xa7\x9b\x86\xbc\xdf\x26\xde\xc5\x66\xf3\xfc\x4e\x7f\x39\xdb\xfb\xf9\x57\x74\xfb\xd7\x53\xea\x3d\x89\x2d\x95\x7c\xbb\x48\x37\xbf\x87\xb7\x83\xd3\xf5\x4f\xc4\xd3\xf7\x47\xcd\xcf\xb4\xd5\xa3\x4f\x62\x31\xde\x8e\x9b\x63\x5d\x06\x3c\xe0\x3d\xe5\xf8\x4c\x64\x41\xc8\x88\x04\x8b\x9e\xf4\xc8\xa3\xcb\xa8\xa7\xdc\x54\xa4\x29\x48\xa7\xa7\xdc\xa6\xd3\xdc\x74\x5a\x6e\x96\x04\xc5\xe4\x62\x89\x86\xa7\x7b\xf4\x38\xbc\x65\x57\xc7\xa3\x16\xdd\xba\xbb\x25\x8f\x83\xf0\xe6\x80\x86\xfb\x0f\x5f\x46\xcd\xc7\xd3\xe0\xdc\x1d\x09\xba\x7d\x7c\x7b\xfd\xed\xea\x76\x3f\xdb\xfa\x7a\x1a\xfc\xf8\x9e\x35\xe3\xbd\xd6\x8f\x1b\x8f\x45\x99\xfe\xbf\x24\x7a\x83\x4b\xf5\xe6\x3d\xaa\x5c\x9c\xfd\xc6\x43\xc4\x46\xb7\xeb\xbd\xeb\xd6\x41\x7f\x30\x38\x3b\xb8\xd9\xff\xd8\x13\x24\xdc\x3a\xdb\x64\x1b\x51\xb2\x73\xf2\xd0\x3a\xf5\x9b\x22\x6a\x5d\xaa\x6d\xda\x7a\x70\x93\x7e\x9f\x04\xd9\x05\xd9\x8f\xd9\xde\xb7\xc1\x4e\xff\xad\xe2\x98\xb0\xea\x62\x0d\x8f\xda\xed\x91\x01\xc9\x67\xf1\x9b\xec\x36\xa0\xca\xc8\xd8\x74\x1a\xe6\xb1\x90\x6d\x9e\x5f\x79\x84\x4e\xb1\xb7\x11\x36\x1b\xb1\x6f\x67\x6c\x0e\xd9\xed\xb8\x86\x59\x21\xa7\xe1\x36\xcf\x27\x5f\x33\xc3\x4c\x11\x09\xe4\x4f\x13\x55\xe8\xd7\x78\xde\x8c\x18\x68\x14\xeb\x36\xda\x6a\x34\xd2\xc7\x7f\xce\x2c\x0d\x69\xa0\xe3\x36\x6a\x36\x1a\xff\x98\x5d\x08\x05\xd7\xf5\x90\x24\x94\x8d\xda\xe8\x0a\x38\x13\x35\x74\x25\x38\xf1\x45\x0d\x1d\x08\xae\x04\x23\xaa\x86\xf0\x81\xc8\x24\x05\x89\xae\x61\x88\x6b\x28\x11\x5c\xa8\x94\xf8\x30\x7b\x96\x47\xfc\x7e\x24\x45\xc6\x83\xba\x2f\x98\x90\xed\x61\x4c\x35\xa8\x44\xf4\xa7\x08\x9f\xc7\x4f\x8e\x14\xc3\x39\x09\x52\x12\x04\x94\x47\x6d\xb4\x35\x2d\x40\xbe\xa5\xe3\x5a\xd5\xbc\xa8\x49\x53\xcd\x60\xf7\x8e\x24\x29\x03\x44\xb9\x4a\xc1\xd7\x42\x76\xdc\x7c\xfe\x43\xc7\xcd\x93\x6d\xc7\x13\xc1\xe8\x65\x4b\x40\x07\xc8\x67\x44\xa9\x2e\xf6\x05\xd7\x84\x72\x90\xf5\x90\x65\x34\x98\xd2\xef\x34\x95\x14\xc3\xa9\x95\xd7\x67\xb0\x7a\x6b\x6e\xdd\xd2\xc4\x1b\x88\x30\x1a\xf1\x2e\xf6\x81\x6b\x90\x78\xf7\x28\xa0\x16\x5c\xbc\x51\x42\x5e\x58\x14\xd1\xc0\x1c\x1a\x00\xde\xfd\xf5\xcb\xd9\xcf\xc2\x10\xe4\xf3\x73\xc7\x2d\xd6\xe7\x90\xb8\x01\x1d\x2c\x07\xf7\x71\x35\x70\xf7\x44\xf5\xd5\x02\x6c\x4b\x95\x31\xa6\xf2\x32\xad\x05\xb7\xf8\x23\x49\xd2\xb8\x08\x93\x7c\x1e\x17\x27\x78\x9a\x23\x4f\xf3\x7a\x2a\x69\x42\xe4\x08\xef\x9e\x18\xe2\x8e\x9b\x93\x95\x70\x7f\x2d\xe2\xef\x81\x22\x5a\x4b\x8f\x28\x58\x15\xd7\x9e\xd6\x12\x99\x0d\xef\x84\xed\x2d\xb8\xde\x01\x92\x4f\x18\x5b\x15\xd2\x01\x61\xec\x3d\xb4\x24\x23\x83\x67\x65\x45\xc9\x08\xdd\x8f\xd2\xf7\xb0\x5f\x7f\x48\x64\xc4\x49\xb2\x32\xb6\x0b\xb3\x01\x5d\x93\xe4\x5d\xbc\x4b\x46\x29\x23\x3e\xc4\x82\x05\xb0\xba\x9f\xc9\x08\x7d\x9e\x6c\x7b\x13\xce\x15\xf2\xd2\xe6\x6a\x79\xe9\x92\xf2\x85\x79\x29\x63\x56\x3c\x53\x36\xd5\x58\x0e\x46\x95\xae\x9b\xfa\x93\x9a\x92\x9a\xb1\xa5\xc0\xe6\x5f\xff\x8e\xb4\x7f\x05\x9a\x9c\xf1\x50\x2c\x10\x22\x95\x60\xa5\x48\xc0\xd4\xa2\x50\x18\xd4\xa9\x84\x55\x61\x4f\x3f\x2e\x6d\x8e\x26\xbb\xc3\x8c\xfb\x9a\x0a\x8e\x7c\x06\x44\x1e\xc4\x94\x05\x12\x78\x15\x18\x24\x6b\x73\x95\x78\x18\x53\x06\xc8\x2e\x39\x21\x95\x4a\x5b\xea\x79\x2a\x33\x2c\x89\x84\x44\x0c\xc0\xd2\xbc\xda\x33\xdb\x24\x3c\x97\x74\x02\x63\x5c\xc6\x84\x47\x0c\x92\xea\x3c\xa3\x01\x91\x88\x51\xd4\x45\x81\xf0\xb3\x04\xb8\x76\x7c\x09\x44\x83\x21\x06\xae\xab\x98\x51\x3c\xc7\x88\x51\xc7\x9a\xcc\x84\x1a\x5a\xef\x22\x8c\x26\x0e\x52\xa7\x1a\x12\x3c\x4b\x2f\x41\x67\xd2\x40\x58\x06\x50\x02\x0f\x40\x1e\x49\x29\x64\x55\x82\x4a\xe7\x71\x9a\x39\xc7\x18\xa0\xba\x36\x33\xef\xe8\x18\x78\xb5\x38\xa6\xaa\xcb\x14\x99\xcb\xc8\xfb\x6a\x5a\x4c\x7b\x57\xba\x03\x66\xdb\x9b\x2a\xfe\x33\x77\xf9\x39\x51\xcd\x98\x35\xa9\x25\x2b\xa1\x1a\xeb\x71\xa2\xe9\xd7\x44\x8c\x3a\x24\x4d\x81\x07\xb9\x3d\xe7\x54\x7e\x0f\x8f\xfa\x5a\x04\x50\xc5\xc7\xa0\xfd\x18\x81\x51\x46\x1b\x61\xb4\x9e\x4b\xaf\x34\xd1\x99\x42\xeb\x08\xe7\x93\x7a\xad\x94\x05\xef\xab\x19\x2e\x8c\xce\x3b\xca\x5a\x59\xd3\x38\x67\x09\x9b\x24\xaa\x4c\x95\xfb\xcb\xef\xe8\xf2\x7f\xeb\x91\x86\xa8\xca\x14\xea\x76\x11\xcf\x18\x2b\xb3\xa4\x6f\x1b\x67\x70\x98\x88\xaa\x98\x8b\x17\x24\xa1\xe9\x8c\xf1\xda\x2b\xea\xdc\xf1\x16\x04\x89\x55\x96\x72\x42\x21\x8f\x88\x1f\x4f\x3c\xa8\x94\xaf\x91\x3a\x93\x0c\x75\x11\x87\x21\x7a\xb8\xbd\xac\x56\x5c\x65\x5b\xe4\x4a\x0d\x31\xe1\x13\xb3\xd5\xc9\xef\x5a\x25\x46\xc9\x24\x73\x14\x10\xe9\xc7\x93\x13\xee\xec\xfb\x67\x22\x49\xa2\xaa\xaf\x39\x9a\x11\x13\x15\xb7\x11\x73\xcc\x6f\xad\x94\xc2\xd4\x47\x43\x61\x7e\xcb\x29\x34\x51\x7d\x43\x61\x7e\x5f\x53\x3c\x2f\xf0\x64\xb2\x24\x21\x90\xb2\x20\x21\x8e\xb9\xb0\xa1\xae\x15\xd5\x3c\x96\x91\x68\x22\x23\xd0\xa8\x8b\xf0\x7f\x3c\x46\x78\x1f\x97\x11\xad\x12\x20\xb9\xc0\x65\xee\xff\x3b\x61\x48\xfe\xc6\x30\x32\x90\x6d\xde\x36\xc9\xb2\x66\x2f\x99\x65\x11\x65\x28\x96\x05\x14\x5e\x2f\xce\x58\x1a\x54\xb6\xde\xcc\x12\xd8\x9a\xb1\x8a\x4e\x2d\xb4\x55\x44\x5a\x90\x9e\x27\x49\xc3\x26\xab\xb2\xf8\x9e\x52\xc9\xa4\x36\xd7\xf2\xe4\x56\xbc\x97\x22\x18\x63\x26\x41\x70\x34\x00\xae\x2f\xa9\xd2\xc0\x41\x56\x2b\x87\x37\x57\x07\x82\x6b\x33\x27\x48\x00\x41\xa5\x36\xc6\x5b\x5a\xeb\x3c\xcd\x4d\xea\xfa\x57\xc5\x5e\xa8\x2a\x35\x54\x29\x2e\x31\xc5\x73\xa5\x86\xf2\x4e\xbd\x86\xc6\xed\x71\x0d\x4d\xf5\xa3\xf9\xfc\x74\xfb\xf7\xef\xb9\xeb\xba\xe6\x25\x89\xc5\xd3\xbc\x2c\xb5\x2c\xb0\x79\xe5\xcf\xca\xba\xd9\xe1\x08\xee\x33\xea\xf7\x51\x77\x22\x17\x0c\xca\x0e\x42\xa5\x79\x0a\xbb\x5e\x46\x59\x50\xcf\xb3\x95\xc2\xab\xa4\x2b\x6b\x74\x53\x82\xaa\x99\x64\xb5\x05\xac\xcc\x48\x40\xc7\x22\x68\x23\xfc\xf9\xe6\xee\x1e\x97\x27\x20\x64\xbf\x9f\x90\x00\xa4\x6a\x2f\x39\xca\x0c\xfc\x62\xc9\xba\xb9\x62\x98\x22\x47\xd2\x94\xd1\x1c\xad\xdb\x53\x82\x2f\x61\xf1\xbc\x78\xc9\x13\xc1\xa8\x8d\xce\xef\x6e\xae\x1d\xa5\x25\xe5\x11\x0d\x47\x0b\x32\x6e\x31\xf2\xac\xe9\x69\xbe\xf8\x54\x33\x94\xf4\xdb\x8b\x83\xd6\x7e\x72\x58\x73\x06\x84\x65\x50\x43\x8b\x91\xaf\x95\x33\x79\x7e\x5d\xd0\xd0\xeb\x86\xc7\x04\x8f\xe0\x0a\xd6\x16\x0b\x64\xca\xea\x1f\x05\x9d\x23\xfa\x8b\x9c\xa7\x18\xf3\xad\x98\x3d\xbe\xdc\x4b\x8a\xa1\x63\x29\x86\x68\x76\xcb\x4b\xbf\x62\xc2\x7d\xc9\xee\xe7\x85\x2b\x2f\x6d\x63\x71\xdc\xdb\x75\x54\xec\x44\xdd\xdd\xf1\x29\x8e\x71\xa3\xea\xda\xb2\x6d\xc6\x5d\xf2\x2d\x36\xdb\x99\xd7\xb2\x4a\xf3\xbc\xa4\x1a\xbc\x3c\x4f\x3e\x7c\x76\xdc\xfc\x73\x59\xc7\xcd\xff\xb1\xf8\x6f\x00\x00\x00\xff\xff\x6e\xa5\x25\x7c\xca\x18\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 6346, mode: os.FileMode(436), modTime: time.Unix(1565396024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSampleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x0e\xc2\x30\x0c\x45\xf7\x9c\xc2\xf4\x00\x8d\xba\x9b\x0c\x4c\x4c\x4c\x5c\xc0\xd4\x16\xa9\x48\x1b\x04\x5e\xa2\xc8\x77\x47\x60\xc1\xc4\x64\x59\x4f\xff\xfd\x1f\x70\xc7\x75\xd6\x76\x17\xc8\xba\x96\x14\xf0\x7b\x84\x38\x05\x00\x80\xde\xc7\xa3\x10\x9b\x7d\x3e\xd4\x45\x8b\xa4\xde\xc7\x33\x3d\x6f\x66\x6f\x7c\xa2\x55\xcc\x30\x3a\x0a\x18\x3d\x8c\x97\xca\xcd\x1d\x98\x27\xa0\xb2\x5c\xb7\xfd\x30\xcb\xa6\xf2\x18\xfe\x1b\xf2\xf4\xeb\x3c\x54\x6e\x66\x01\xa3\x5b\x30\xfa\xb0\x57\x00\x00\x00\xff\xff\xee\x15\xa7\x2e\xb1\x00\x00\x00")

func templatesSampleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSampleHtml,
		"templates/sample.html",
	)
}

func templatesSampleHtml() (*asset, error) {
	bytes, err := templatesSampleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sample.html", size: 177, mode: os.FileMode(436), modTime: time.Unix(1564695198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/sample.html": templatesSampleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"sample.html": &bintree{templatesSampleHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

