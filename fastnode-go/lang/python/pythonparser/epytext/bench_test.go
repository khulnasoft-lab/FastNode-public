package epytext

import "testing"

func BenchmarkParseManyLines(b *testing.B) {
	src := []byte(manyLines)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if _, err := Parse(src); err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkParseManyExprs(b *testing.B) {
	src := []byte(manyExprs)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if _, err := Parse(src); err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkParseShortLine(b *testing.B) {
	src := []byte(shortLine)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if _, err := Parse(src); err != nil {
			b.Fatal(err)
		}
	}
}

var shortLine = "Perform sanity check on BTree, and raise exception if flawed."

var manyExprs = "OpenGL extension NV.path_rendering\n\nThis module customises the behaviour of the \nOpenGL.raw.GL.NV.path_rendering to provide a more \nPython-friendly API\n\nOverview (from the spec)\n        \n        Conventional OpenGL supports rendering images (pixel rectangles and\n        bitmaps) and simple geometric primitives (points, lines, polygons).\n        \n        This extension adds a new rendering paradigm, known as path rendering,\n        for rendering filled and stroked paths.  Path rendering is not novel\n        but rather a standard part of most resolution-independent 2D rendering\n        systems such as Flash, PDF, Silverlight, SVG, Java 2D, Office\n        drawings, TrueType fonts, PostScript and its fonts, Quartz 2D, XML\n        Paper Specification (XPS), and OpenVG.  What is novel is the ability\n        to mix path rendering with arbitrary OpenGL 3D rendering and imaging.\n        \n        With this extension, path rendering becomes a first-class rendering\n        mode within the OpenGL graphics system that can be arbitrarily mixed\n        with existing OpenGL rendering and can take advantage of OpenGL's\n        existing mechanisms for texturing, programmability, and per-fragment\n        operations.\n        \n        Unlike geometric primitive rendering, paths are specified on a 2D\n        (non-projective) plane rather than in 3D (projective) space.\n        Even though the path is defined in a 2D plane, every path can\n        be transformed into 3D clip space allowing for 3D view frustum &\n        user-defined clipping, depth offset, and depth testing in the same\n        manner as geometric primitive rendering.\n        \n        Both geometric primitive rendering and path rendering support\n        rasterization of edges defined by line segments; however, path\n        rendering also allows path segments to be specified by Bezier (cubic\n        or quadratic) curves or partial elliptical arcs.  This allows path\n        rendering to define truly curved primitive boundaries unlike the\n        straight edges of line and polygon primitives.  Whereas geometric\n        primitive rendering requires convex polygons for well-defined\n        rendering results, path rendering allows (and encourages!) concave\n        and curved outlines to be specified.  These paths are even allowed\n        to self-intersect.\n        \n        When filling closed paths, the winding of paths (counterclockwise\n        or clockwise) determines whether pixels are inside or outside of\n        the path.\n        \n        Paths can also be stroked whereby, conceptually, a fixed-width \"brush\"\n        is pulled along the path such that the brush remains orthogonal to\n        the gradient of each path segment.  Samples within the sweep of this\n        brush are considered inside the stroke of the path.\n        \n        This extension supports path rendering through a sequence of three\n        operations:\n        \n            1.  Path specification is the process of creating and updating\n                a path object consisting of a set of path commands and a\n                corresponding set of 2D vertices.\n        \n                Path commands can be specified explicitly from path command\n                and coordinate data, parsed from a string based on standard\n                grammars for representing paths, or specified by a particular\n                glyph of standard font representations.  Also new paths can\n                be specified by weighting one or more existing paths so long\n                as all the weighted paths have consistent command sequences.\n        \n                Each path object contains zero or more subpaths specified\n                by a sequence of line segments, partial elliptical arcs,\n                and (cubic or quadratic) Bezier curve segments.  Each path\n                may contain multiple subpaths that can be closed (forming\n                a contour) or open.\n        \n            2.  Path stenciling is the process of updating the stencil buffer\n                based on a path's coverage transformed into window space.\n        \n                Path stenciling can determine either the filled or stroked\n                coverage of a path.\n        \n                The details of path stenciling are explained within the core\n                of the specification.\n        \n                Stenciling a stroked path supports all the standard\n                embellishments for path stroking such as end caps, join\n                styles, miter limits, dashing, and dash caps.  These stroking\n                properties specified are parameters of path objects.\n        \n            3.  Path covering is the process of emitting simple (convex &\n                planar) geometry that (conservatively) \"covers\" the path's\n                sample coverage in the stencil buffer.  During path covering,\n                stencil testing can be configured to discard fragments not\n                within the actual coverage of the path as determined by\n                prior path stenciling.\n        \n                Path covering can cover either the filled or stroked coverage\n                of a path.\n        \n                The details of path covering are explained within the core\n                of the specification.\n        \n        To render a path object into the color buffer, an application specifies\n        a path object and then uses a two-step rendering process.  First, the\n        path object is stenciled whereby the path object's stroked or filled\n        coverage is rasterized into the stencil buffer.  Second, the path object\n        is covered whereby conservative bounding geometry for the path is\n        transformed and rasterized with stencil testing configured to test against\n        the coverage information written to the stencil buffer in the first step\n        so that only fragments covered by the path are written during this second\n        step.  Also during this second step written pixels typically have\n        their stencil value reset (so there's no need for clearing the\n        stencil buffer between rendering each path).\n        \n        Here is an example of specifying and then rendering a five-point\n        star and a heart as a path using Scalable Vector Graphics (SVG)\n        path description syntax:\n        \n            GLuint pathObj = 42;\n            const char *svgPathString =\n              // star\n              \"M100,180 L40,10 L190,120 L10,120 L160,10 z\"\n              // heart\n              \"M300 300 C 100 400,100 200,300 100,500 200,500 400,300 300Z\";\n            glPathStringNV(pathObj, GL_PATH_FORMAT_SVG_NV,\n                           (GLsizei)strlen(svgPathString), svgPathString);\n        \n        Alternatively applications oriented around the PostScript imaging\n        model can use the PostScript user path syntax instead:\n        \n            const char *psPathString =\n              // star\n              \"100 180 moveto\"\n              \" 40 10 lineto 190 120 lineto 10 120 lineto 160 10 lineto closepath\"\n              // heart\n              \" 300 300 moveto\"\n              \" 100 400 100 200 300 100 curveto\"\n              \" 500 200 500 400 300 300 curveto closepath\";\n            glPathStringNV(pathObj, GL_PATH_FORMAT_PS_NV,\n                           (GLsizei)strlen(psPathString), psPathString);\n        \n        The PostScript path syntax also supports compact and precise binary\n        encoding and includes PostScript-style circular arcs.\n        \n        Or the path's command and coordinates can be specified explicitly:\n        \n            static const GLubyte pathCommands[10] =\n              { GL_MOVE_TO_NV, GL_LINE_TO_NV, GL_LINE_TO_NV, GL_LINE_TO_NV,\n                GL_LINE_TO_NV, GL_CLOSE_PATH_NV,\n                'M', 'C', 'C', 'Z' };  // character aliases\n            static const GLshort pathCoords[12][2] =\n              { {100, 180}, {40, 10}, {190, 120}, {10, 120}, {160, 10},\n                {300,300}, {100,400}, {100,200}, {300,100},\n                {500,200}, {500,400}, {300,300} };\n            glPathCommandsNV(pathObj, 10, pathCommands, 24, GL_SHORT, pathCoords);\n        \n        Before rendering to a window with a stencil buffer, clear the stencil\n        buffer to zero and the color buffer to black:\n        \n            glClearStencil(0);\n            glClearColor(0,0,0,0);\n            glStencilMask(~0);\n            glClear(GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);\n        \n        Use an orthographic path-to-clip-space transform to map the\n        [0..500]x[0..400] range of the star's path coordinates to the [-1..1]\n        clip space cube:\n        \n            glMatrixLoadIdentityEXT(GL_PROJECTION);\n            glMatrixLoadIdentityEXT(GL_MODELVIEW);\n            glMatrixOrthoEXT(GL_MODELVIEW, 0, 500, 0, 400, -1, 1);\n        \n        Stencil the path:\n        \n            glStencilFillPathNV(pathObj, GL_COUNT_UP_NV, 0x1F);\n        \n        The 0x1F mask means the counting uses modulo-32 arithmetic. In\n        principle the star's path is simple enough (having a maximum winding\n        number of 2) that modulo-4 arithmetic would be sufficient so the mask\n        could be 0x3.  Or a mask of all 1's (~0) could be used to count with\n        all available stencil bits.\n        \n        Now that the coverage of the star and the heart have been rasterized\n        into the stencil buffer, cover the path with a non-zero fill style\n        (indicated by the GL_NOTEQUAL stencil function with a zero reference\n        value):\n        \n            glEnable(GL_STENCIL_TEST);\n            glStencilFunc(GL_NOTEQUAL, 0, 0x1F);\n            glStencilOp(GL_KEEP, GL_KEEP, GL_ZERO);\n            glColor3f(1,1,0); // yellow\n            glCoverFillPathNV(pathObj, GL_BOUNDING_BOX_NV);\n        \n        The result is a yellow star (with a filled center) to the left of\n        a yellow heart.\n        \n        The GL_ZERO stencil operation ensures that any covered samples\n        (meaning those with non-zero stencil values) are zero'ed when\n        the path cover is rasterized. This allows subsequent paths to be\n        rendered without clearing the stencil buffer again.\n        \n        A similar two-step rendering process can draw a white outline\n        over the star and heart.\n        \n        Before rendering, configure the path object with desirable path\n        parameters for stroking.  Specify a wider 6.5-unit stroke and\n        the round join style:\n        \n            glPathParameteriNV(pathObj, GL_PATH_JOIN_STYLE_NV, GL_ROUND_NV);\n            glPathParameterfNV(pathObj, GL_PATH_STROKE_WIDTH_NV, 6.5);\n        \n         Now stencil the path's stroked coverage into the stencil buffer,\n         setting the stencil to 0x1 for all stencil samples within the\n         transformed path.\n        \n            glStencilStrokePathNV(pathObj, 0x1, ~0);\n        \n         Cover the path's stroked coverage (with a hull this time instead\n         of a bounding box; the choice doesn't really matter here) while\n         stencil testing that writes white to the color buffer and again\n         zero the stencil buffer.\n        \n            glColor3f(1,1,1); // white\n            glCoverStrokePathNV(pathObj, GL_CONVEX_HULL_NV);\n        \n         In this example, constant color shading is used but the application\n         can specify their own arbitrary shading and/or blending operations,\n         whether with Cg compiled to fragment program assembly, GLSL, or\n         fixed-function fragment processing.\n        \n         More complex path rendering is possible such as clipping one path to\n         another arbitrary path.  This is because stencil testing (as well\n         as depth testing, depth bound test, clip planes, and scissoring)\n         can restrict path stenciling.\n        \n         Now let's render the word \"OpenGL\" atop the star and heart.\n        \n         First create a sequence of path objects for the glyphs for the\n         characters in \"OpenGL\":\n        \n            GLuint glyphBase = glGenPathsNV(6);\n            const unsigned char *word = \"OpenGL\";\n            const GLsizei wordLen = (GLsizei)strlen(word);\n            const GLfloat emScale = 2048;  // match TrueType convention\n            GLuint templatePathObject = ~0;  // Non-existent path object\n            glPathGlyphsNV(glyphBase,\n                           GL_SYSTEM_FONT_NAME_NV, \"Helvetica\", GL_BOLD_BIT_NV,\n                           wordLen, GL_UNSIGNED_BYTE, word,\n                           GL_SKIP_MISSING_GLYPH_NV, ~0, emScale);\n            glPathGlyphsNV(glyphBase, \n                           GL_SYSTEM_FONT_NAME_NV, \"Arial\", GL_BOLD_BIT_NV,\n                           wordLen, GL_UNSIGNED_BYTE, word,\n                           GL_SKIP_MISSING_GLYPH_NV, ~0, emScale);\n            glPathGlyphsNV(glyphBase,\n                           GL_STANDARD_FONT_NAME_NV, \"Sans\", GL_BOLD_BIT_NV,\n                           wordLen, GL_UNSIGNED_BYTE, word,\n                           GL_USE_MISSING_GLYPH_NV, ~0, emScale);\n        \n        Glyphs are loaded for three different fonts in priority order:\n        Helvetica first, then Arial, and if neither of those loads, use the\n        standard sans-serif font.  If a prior glPathGlyphsNV is successful\n        and specifies the path object range, the subsequent glPathGlyphsNV\n        commands silently avoid re-specifying the already existent path\n        objects.\n        \n        Now query the (kerned) separations for the word \"OpenGL\" and build\n        a set of horizontal translations advancing each successive glyph by\n        its kerning distance with the following glyph.\n        \n            GLfloat xtranslate[6+1];  // wordLen+1\n            glGetPathSpacingNV(GL_ACCUM_ADJACENT_PAIRS_NV,\n                               wordLen+1, GL_UNSIGNED_BYTE,\n                               \"\u0000\u0001\u0002\u0003\u0004\u0005\u0005\",  // repeat last letter twice\n                               glyphBase,\n                               1.0f, 1.0f,\n                               GL_TRANSLATE_X_NV,\n                               xtranslate);\n        \n        Next determine the font-wide vertical minimum and maximum for the\n        font face by querying the per-font metrics of any one of the glyphs\n        from the font face.\n        \n            GLfloat yMinMax[2];\n            glGetPathMetricRangeNV(GL_FONT_Y_MIN_BOUNDS_NV|GL_FONT_Y_MAX_BOUNDS_NV,\n                                   glyphBase, /*count*/1,\n                                   2*sizeof(GLfloat),\n                                   yMinMax);\n        \n        Use an orthographic path-to-clip-space transform to map the\n        word's bounds to the [-1..1] clip space cube:\n        \n            glMatrixLoadIdentityEXT(GL_PROJECTION);\n            glMatrixOrthoEXT(GL_MODELVIEW, \n                             0, xtranslate[6], yMinMax[0], yMinMax[1],\n                             -1, 1);\n        \n        Stencil the filled paths of the sequence of glyphs for \"OpenGL\",\n        each transformed by the appropriate 2D translations for spacing.\n        \n            glStencilFillPathInstancedNV(6, GL_UNSIGNED_BYTE,\n                                         \"\u0000\u0001\u0002\u0003\u0004\u0005\",\n                                         glyphBase,\n                                         GL_PATH_FILL_MODE_NV, 0xFF,\n                                         GL_TRANSLATE_X_NV, xtranslate);\n        \n         Cover the bounding box union of the glyphs with 50% gray.\n        \n            glEnable(GL_STENCIL_TEST);\n            glStencilFunc(GL_NOTEQUAL, 0, 0xFF);\n            glStencilOp(GL_KEEP, GL_KEEP, GL_ZERO);\n            glColor3f(0.5,0.5,0.5); // 50% gray\n            glCoverFillPathInstancedNV(6, GL_UNSIGNED_BYTE,\n                                       \"\u0000\u0001\u0002\u0003\u0004\u0005\",\n                                       glyphBase,\n                                       GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV,\n                                       GL_TRANSLATE_2D_NV, xtranslate);\n        \n        Voila, the word \"OpenGL\" in gray is now stenciled into the framebuffer.\n        \n        Instead of solid 50% gray, the cover operation can apply a linear\n        gradient that changes from green (RGB=0,1,0) at the top of the word\n        \"OpenGL\" to blue (RGB=0,0,1) at the bottom of \"OpenGL\":\n        \n            GLfloat rgbGen[3][3] = {\n              0, 0, 0,  // red   = constant zero\n              0, 1, 0,  // green = varies with y from bottom (0) to top (1)\n              0, -1, 1  // blue  = varies with y from bottom (1) to top (0)\n            };\n            glPathColorGenNV(GL_PRIMARY_COLOR, GL_PATH_OBJECT_BOUNDING_BOX_NV,\n                             GL_RGB, &rgbGen[0][0]);\n        \n        Instead of loading just the glyphs for the characters in \"OpenGL\",\n        the entire character set could be loaded.  This allows the characters\n        of the string to be mapped (offset by the glyphBase) to path object names.\n        A range of glyphs can be loaded like this:\n        \n            const int numChars = 256;  // ISO/IEC 8859-1 8-bit character range\n            GLuint glyphBase = glGenPathsNV(numChars);\n            glPathGlyphRangeNV(glyphBase,\n                               GL_SYSTEM_FONT_NAME_NV, \"Helvetica\", GL_BOLD_BIT_NV,\n                               0, numChars,\n                               GL_SKIP_MISSING_GLYPH_NV, ~0, emScale);\n            glPathGlyphRangeNV(glyphBase, \n                               GL_SYSTEM_FONT_NAME_NV, \"Arial\", GL_BOLD_BIT_NV,\n                               0, numChars,\n                               GL_SKIP_MISSING_GLYPH_NV, ~0, emScale);\n            glPathGlyphRangeNV(glyphBase,\n                               GL_STANDARD_FONT_NAME_NV, \"Sans\", GL_BOLD_BIT_NV,\n                               0, numChars,\n                               GL_USE_MISSING_GLYPH_NV, ~0, emScale);\n        \n        Given a range of glyphs loaded as path objects, (kerned) spacing\n        information can now be queried for the string:\n        \n            glGetPathSpacingNV(GL_ACCUM_ADJACENT_PAIRS_NV,\n                               7, GL_UNSIGNED_BYTE, \"OpenGLL\", // repeat L to get final spacing\n                               glyphBase,\n                               1.0f, 1.0f,\n                               GL_TRANSLATE_X_NV,\n                               kerning);\n        \n        Using the range of glyphs, stenciling and covering the instanced\n        paths for \"OpenGL\" can be done this way:\n        \n            glStencilFillPathInstancedNV(6, glyphBase,\n                                         GL_UNSIGNED_BYTE, \"OpenGL\",\n                                         GL_PATH_FILL_MODE_NV, 0xFF,\n                                         GL_TRANSLATE_2D_NV, xtranslate);\n        \n            glCoverFillPathInstancedNV(6, glyphBase,\n                                       GL_UNSIGNED_BYTE, \"OpenGL\",\n                                       GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV,\n                                       GL_TRANSLATE_2D_NV, xtranslate);\n        \n        XXX add path clipping example to demonstrate glPathStencilFuncNV.\n\nThe official definition of this extension is available here:\nhttp://www.opengl.org/registry/specs/NV/path_rendering.txt"

var manyLines = "LAPACK functions for Cython\n===========================\n\nUsable from Cython via::\n\n    cimport scipy.linalg.cython_lapack\n\nThis module provides Cython-level wrappers for all primary routines included\nin LAPACK 3.1.0 except for ``zcgesv`` since its interface is not consistent\nfrom LAPACK 3.1.0 to 3.6.0. It also provides some of the\nfixed-api auxiliary routines.\n\nThese wrappers do not check for alignment of arrays.\nAlignment should be checked before these wrappers are used.\n\nRaw function pointers (Fortran-style pointer arguments):\n\n- cbdsqr\n- cgbbrd\n- cgbcon\n- cgbequ\n- cgbrfs\n- cgbsv\n- cgbsvx\n- cgbtf2\n- cgbtrf\n- cgbtrs\n- cgebak\n- cgebal\n- cgebd2\n- cgebrd\n- cgecon\n- cgeequ\n- cgees\n- cgeesx\n- cgeev\n- cgeevx\n- cgehd2\n- cgehrd\n- cgelq2\n- cgelqf\n- cgels\n- cgelsd\n- cgelss\n- cgelsy\n- cgeql2\n- cgeqlf\n- cgeqp3\n- cgeqr2\n- cgeqrf\n- cgerfs\n- cgerq2\n- cgerqf\n- cgesc2\n- cgesdd\n- cgesv\n- cgesvd\n- cgesvx\n- cgetc2\n- cgetf2\n- cgetrf\n- cgetri\n- cgetrs\n- cggbak\n- cggbal\n- cgges\n- cggesx\n- cggev\n- cggevx\n- cggglm\n- cgghrd\n- cgglse\n- cggqrf\n- cggrqf\n- cgtcon\n- cgtrfs\n- cgtsv\n- cgtsvx\n- cgttrf\n- cgttrs\n- cgtts2\n- chbev\n- chbevd\n- chbevx\n- chbgst\n- chbgv\n- chbgvd\n- chbgvx\n- chbtrd\n- checon\n- cheev\n- cheevd\n- cheevr\n- cheevx\n- chegs2\n- chegst\n- chegv\n- chegvd\n- chegvx\n- cherfs\n- chesv\n- chesvx\n- chetd2\n- chetf2\n- chetrd\n- chetrf\n- chetri\n- chetrs\n- chgeqz\n- chpcon\n- chpev\n- chpevd\n- chpevx\n- chpgst\n- chpgv\n- chpgvd\n- chpgvx\n- chprfs\n- chpsv\n- chpsvx\n- chptrd\n- chptrf\n- chptri\n- chptrs\n- chsein\n- chseqr\n- clabrd\n- clacgv\n- clacn2\n- clacon\n- clacp2\n- clacpy\n- clacrm\n- clacrt\n- cladiv\n- claed0\n- claed7\n- claed8\n- claein\n- claesy\n- claev2\n- clag2z\n- clags2\n- clagtm\n- clahef\n- clahqr\n- clahr2\n- claic1\n- clals0\n- clalsa\n- clalsd\n- clangb\n- clange\n- clangt\n- clanhb\n- clanhe\n- clanhp\n- clanhs\n- clanht\n- clansb\n- clansp\n- clansy\n- clantb\n- clantp\n- clantr\n- clapll\n- clapmt\n- claqgb\n- claqge\n- claqhb\n- claqhe\n- claqhp\n- claqp2\n- claqps\n- claqr0\n- claqr1\n- claqr2\n- claqr3\n- claqr4\n- claqr5\n- claqsb\n- claqsp\n- claqsy\n- clar1v\n- clar2v\n- clarcm\n- clarf\n- clarfb\n- clarfg\n- clarft\n- clarfx\n- clargv\n- clarnv\n- clarrv\n- clartg\n- clartv\n- clarz\n- clarzb\n- clarzt\n- clascl\n- claset\n- clasr\n- classq\n- claswp\n- clasyf\n- clatbs\n- clatdf\n- clatps\n- clatrd\n- clatrs\n- clatrz\n- clauu2\n- clauum\n- cpbcon\n- cpbequ\n- cpbrfs\n- cpbstf\n- cpbsv\n- cpbsvx\n- cpbtf2\n- cpbtrf\n- cpbtrs\n- cpocon\n- cpoequ\n- cporfs\n- cposv\n- cposvx\n- cpotf2\n- cpotrf\n- cpotri\n- cpotrs\n- cppcon\n- cppequ\n- cpprfs\n- cppsv\n- cppsvx\n- cpptrf\n- cpptri\n- cpptrs\n- cptcon\n- cpteqr\n- cptrfs\n- cptsv\n- cptsvx\n- cpttrf\n- cpttrs\n- cptts2\n- crot\n- cspcon\n- cspmv\n- cspr\n- csprfs\n- cspsv\n- cspsvx\n- csptrf\n- csptri\n- csptrs\n- csrscl\n- cstedc\n- cstegr\n- cstein\n- cstemr\n- csteqr\n- csycon\n- csymv\n- csyr\n- csyrfs\n- csysv\n- csysvx\n- csytf2\n- csytrf\n- csytri\n- csytrs\n- ctbcon\n- ctbrfs\n- ctbtrs\n- ctgevc\n- ctgex2\n- ctgexc\n- ctgsen\n- ctgsja\n- ctgsna\n- ctgsy2\n- ctgsyl\n- ctpcon\n- ctprfs\n- ctptri\n- ctptrs\n- ctrcon\n- ctrevc\n- ctrexc\n- ctrrfs\n- ctrsen\n- ctrsna\n- ctrsyl\n- ctrti2\n- ctrtri\n- ctrtrs\n- ctzrzf\n- cung2l\n- cung2r\n- cungbr\n- cunghr\n- cungl2\n- cunglq\n- cungql\n- cungqr\n- cungr2\n- cungrq\n- cungtr\n- cunm2l\n- cunm2r\n- cunmbr\n- cunmhr\n- cunml2\n- cunmlq\n- cunmql\n- cunmqr\n- cunmr2\n- cunmr3\n- cunmrq\n- cunmrz\n- cunmtr\n- cupgtr\n- cupmtr\n- dbdsdc\n- dbdsqr\n- ddisna\n- dgbbrd\n- dgbcon\n- dgbequ\n- dgbrfs\n- dgbsv\n- dgbsvx\n- dgbtf2\n- dgbtrf\n- dgbtrs\n- dgebak\n- dgebal\n- dgebd2\n- dgebrd\n- dgecon\n- dgeequ\n- dgees\n- dgeesx\n- dgeev\n- dgeevx\n- dgehd2\n- dgehrd\n- dgelq2\n- dgelqf\n- dgels\n- dgelsd\n- dgelss\n- dgelsy\n- dgeql2\n- dgeqlf\n- dgeqp3\n- dgeqr2\n- dgeqrf\n- dgerfs\n- dgerq2\n- dgerqf\n- dgesc2\n- dgesdd\n- dgesv\n- dgesvd\n- dgesvx\n- dgetc2\n- dgetf2\n- dgetrf\n- dgetri\n- dgetrs\n- dggbak\n- dggbal\n- dgges\n- dggesx\n- dggev\n- dggevx\n- dggglm\n- dgghrd\n- dgglse\n- dggqrf\n- dggrqf\n- dgtcon\n- dgtrfs\n- dgtsv\n- dgtsvx\n- dgttrf\n- dgttrs\n- dgtts2\n- dhgeqz\n- dhsein\n- dhseqr\n- disnan\n- dlabad\n- dlabrd\n- dlacn2\n- dlacon\n- dlacpy\n- dladiv\n- dlae2\n- dlaebz\n- dlaed0\n- dlaed1\n- dlaed2\n- dlaed3\n- dlaed4\n- dlaed5\n- dlaed6\n- dlaed7\n- dlaed8\n- dlaed9\n- dlaeda\n- dlaein\n- dlaev2\n- dlaexc\n- dlag2\n- dlag2s\n- dlags2\n- dlagtf\n- dlagtm\n- dlagts\n- dlagv2\n- dlahqr\n- dlahr2\n- dlaic1\n- dlaln2\n- dlals0\n- dlalsa\n- dlalsd\n- dlamch\n- dlamrg\n- dlaneg\n- dlangb\n- dlange\n- dlangt\n- dlanhs\n- dlansb\n- dlansp\n- dlanst\n- dlansy\n- dlantb\n- dlantp\n- dlantr\n- dlanv2\n- dlapll\n- dlapmt\n- dlapy2\n- dlapy3\n- dlaqgb\n- dlaqge\n- dlaqp2\n- dlaqps\n- dlaqr0\n- dlaqr1\n- dlaqr2\n- dlaqr3\n- dlaqr4\n- dlaqr5\n- dlaqsb\n- dlaqsp\n- dlaqsy\n- dlaqtr\n- dlar1v\n- dlar2v\n- dlarf\n- dlarfb\n- dlarfg\n- dlarft\n- dlarfx\n- dlargv\n- dlarnv\n- dlarra\n- dlarrb\n- dlarrc\n- dlarrd\n- dlarre\n- dlarrf\n- dlarrj\n- dlarrk\n- dlarrr\n- dlarrv\n- dlartg\n- dlartv\n- dlaruv\n- dlarz\n- dlarzb\n- dlarzt\n- dlas2\n- dlascl\n- dlasd0\n- dlasd1\n- dlasd2\n- dlasd3\n- dlasd4\n- dlasd5\n- dlasd6\n- dlasd7\n- dlasd8\n- dlasda\n- dlasdq\n- dlasdt\n- dlaset\n- dlasq1\n- dlasq2\n- dlasq6\n- dlasr\n- dlasrt\n- dlassq\n- dlasv2\n- dlaswp\n- dlasy2\n- dlasyf\n- dlatbs\n- dlatdf\n- dlatps\n- dlatrd\n- dlatrs\n- dlatrz\n- dlauu2\n- dlauum\n- dopgtr\n- dopmtr\n- dorg2l\n- dorg2r\n- dorgbr\n- dorghr\n- dorgl2\n- dorglq\n- dorgql\n- dorgqr\n- dorgr2\n- dorgrq\n- dorgtr\n- dorm2l\n- dorm2r\n- dormbr\n- dormhr\n- dorml2\n- dormlq\n- dormql\n- dormqr\n- dormr2\n- dormr3\n- dormrq\n- dormrz\n- dormtr\n- dpbcon\n- dpbequ\n- dpbrfs\n- dpbstf\n- dpbsv\n- dpbsvx\n- dpbtf2\n- dpbtrf\n- dpbtrs\n- dpocon\n- dpoequ\n- dporfs\n- dposv\n- dposvx\n- dpotf2\n- dpotrf\n- dpotri\n- dpotrs\n- dppcon\n- dppequ\n- dpprfs\n- dppsv\n- dppsvx\n- dpptrf\n- dpptri\n- dpptrs\n- dptcon\n- dpteqr\n- dptrfs\n- dptsv\n- dptsvx\n- dpttrf\n- dpttrs\n- dptts2\n- drscl\n- dsbev\n- dsbevd\n- dsbevx\n- dsbgst\n- dsbgv\n- dsbgvd\n- dsbgvx\n- dsbtrd\n- dsgesv\n- dspcon\n- dspev\n- dspevd\n- dspevx\n- dspgst\n- dspgv\n- dspgvd\n- dspgvx\n- dsprfs\n- dspsv\n- dspsvx\n- dsptrd\n- dsptrf\n- dsptri\n- dsptrs\n- dstebz\n- dstedc\n- dstegr\n- dstein\n- dstemr\n- dsteqr\n- dsterf\n- dstev\n- dstevd\n- dstevr\n- dstevx\n- dsycon\n- dsyev\n- dsyevd\n- dsyevr\n- dsyevx\n- dsygs2\n- dsygst\n- dsygv\n- dsygvd\n- dsygvx\n- dsyrfs\n- dsysv\n- dsysvx\n- dsytd2\n- dsytf2\n- dsytrd\n- dsytrf\n- dsytri\n- dsytrs\n- dtbcon\n- dtbrfs\n- dtbtrs\n- dtgevc\n- dtgex2\n- dtgexc\n- dtgsen\n- dtgsja\n- dtgsna\n- dtgsy2\n- dtgsyl\n- dtpcon\n- dtprfs\n- dtptri\n- dtptrs\n- dtrcon\n- dtrevc\n- dtrexc\n- dtrrfs\n- dtrsen\n- dtrsna\n- dtrsyl\n- dtrti2\n- dtrtri\n- dtrtrs\n- dtzrzf\n- dzsum1\n- icmax1\n- ieeeck\n- ilaver\n- izmax1\n- sbdsdc\n- sbdsqr\n- scsum1\n- sdisna\n- sgbbrd\n- sgbcon\n- sgbequ\n- sgbrfs\n- sgbsv\n- sgbsvx\n- sgbtf2\n- sgbtrf\n- sgbtrs\n- sgebak\n- sgebal\n- sgebd2\n- sgebrd\n- sgecon\n- sgeequ\n- sgees\n- sgeesx\n- sgeev\n- sgeevx\n- sgehd2\n- sgehrd\n- sgelq2\n- sgelqf\n- sgels\n- sgelsd\n- sgelss\n- sgelsy\n- sgeql2\n- sgeqlf\n- sgeqp3\n- sgeqr2\n- sgeqrf\n- sgerfs\n- sgerq2\n- sgerqf\n- sgesc2\n- sgesdd\n- sgesv\n- sgesvd\n- sgesvx\n- sgetc2\n- sgetf2\n- sgetrf\n- sgetri\n- sgetrs\n- sggbak\n- sggbal\n- sgges\n- sggesx\n- sggev\n- sggevx\n- sggglm\n- sgghrd\n- sgglse\n- sggqrf\n- sggrqf\n- sgtcon\n- sgtrfs\n- sgtsv\n- sgtsvx\n- sgttrf\n- sgttrs\n- sgtts2\n- shgeqz\n- shsein\n- shseqr\n- slabad\n- slabrd\n- slacn2\n- slacon\n- slacpy\n- sladiv\n- slae2\n- slaebz\n- slaed0\n- slaed1\n- slaed2\n- slaed3\n- slaed4\n- slaed5\n- slaed6\n- slaed7\n- slaed8\n- slaed9\n- slaeda\n- slaein\n- slaev2\n- slaexc\n- slag2\n- slag2d\n- slags2\n- slagtf\n- slagtm\n- slagts\n- slagv2\n- slahqr\n- slahr2\n- slaic1\n- slaln2\n- slals0\n- slalsa\n- slalsd\n- slamch\n- slamrg\n- slangb\n- slange\n- slangt\n- slanhs\n- slansb\n- slansp\n- slanst\n- slansy\n- slantb\n- slantp\n- slantr\n- slanv2\n- slapll\n- slapmt\n- slapy2\n- slapy3\n- slaqgb\n- slaqge\n- slaqp2\n- slaqps\n- slaqr0\n- slaqr1\n- slaqr2\n- slaqr3\n- slaqr4\n- slaqr5\n- slaqsb\n- slaqsp\n- slaqsy\n- slaqtr\n- slar1v\n- slar2v\n- slarf\n- slarfb\n- slarfg\n- slarft\n- slarfx\n- slargv\n- slarnv\n- slarra\n- slarrb\n- slarrc\n- slarrd\n- slarre\n- slarrf\n- slarrj\n- slarrk\n- slarrr\n- slarrv\n- slartg\n- slartv\n- slaruv\n- slarz\n- slarzb\n- slarzt\n- slas2\n- slascl\n- slasd0\n- slasd1\n- slasd2\n- slasd3\n- slasd4\n- slasd5\n- slasd6\n- slasd7\n- slasd8\n- slasda\n- slasdq\n- slasdt\n- slaset\n- slasq1\n- slasq2\n- slasq6\n- slasr\n- slasrt\n- slassq\n- slasv2\n- slaswp\n- slasy2\n- slasyf\n- slatbs\n- slatdf\n- slatps\n- slatrd\n- slatrs\n- slatrz\n- slauu2\n- slauum\n- sopgtr\n- sopmtr\n- sorg2l\n- sorg2r\n- sorgbr\n- sorghr\n- sorgl2\n- sorglq\n- sorgql\n- sorgqr\n- sorgr2\n- sorgrq\n- sorgtr\n- sorm2l\n- sorm2r\n- sormbr\n- sormhr\n- sorml2\n- sormlq\n- sormql\n- sormqr\n- sormr2\n- sormr3\n- sormrq\n- sormrz\n- sormtr\n- spbcon\n- spbequ\n- spbrfs\n- spbstf\n- spbsv\n- spbsvx\n- spbtf2\n- spbtrf\n- spbtrs\n- spocon\n- spoequ\n- sporfs\n- sposv\n- sposvx\n- spotf2\n- spotrf\n- spotri\n- spotrs\n- sppcon\n- sppequ\n- spprfs\n- sppsv\n- sppsvx\n- spptrf\n- spptri\n- spptrs\n- sptcon\n- spteqr\n- sptrfs\n- sptsv\n- sptsvx\n- spttrf\n- spttrs\n- sptts2\n- srscl\n- ssbev\n- ssbevd\n- ssbevx\n- ssbgst\n- ssbgv\n- ssbgvd\n- ssbgvx\n- ssbtrd\n- sspcon\n- sspev\n- sspevd\n- sspevx\n- sspgst\n- sspgv\n- sspgvd\n- sspgvx\n- ssprfs\n- sspsv\n- sspsvx\n- ssptrd\n- ssptrf\n- ssptri\n- ssptrs\n- sstebz\n- sstedc\n- sstegr\n- sstein\n- sstemr\n- ssteqr\n- ssterf\n- sstev\n- sstevd\n- sstevr\n- sstevx\n- ssycon\n- ssyev\n- ssyevd\n- ssyevr\n- ssyevx\n- ssygs2\n- ssygst\n- ssygv\n- ssygvd\n- ssygvx\n- ssyrfs\n- ssysv\n- ssysvx\n- ssytd2\n- ssytf2\n- ssytrd\n- ssytrf\n- ssytri\n- ssytrs\n- stbcon\n- stbrfs\n- stbtrs\n- stgevc\n- stgex2\n- stgexc\n- stgsen\n- stgsja\n- stgsna\n- stgsy2\n- stgsyl\n- stpcon\n- stprfs\n- stptri\n- stptrs\n- strcon\n- strevc\n- strexc\n- strrfs\n- strsen\n- strsna\n- strsyl\n- strti2\n- strtri\n- strtrs\n- stzrzf\n- zbdsqr\n- zdrscl\n- zgbbrd\n- zgbcon\n- zgbequ\n- zgbrfs\n- zgbsv\n- zgbsvx\n- zgbtf2\n- zgbtrf\n- zgbtrs\n- zgebak\n- zgebal\n- zgebd2\n- zgebrd\n- zgecon\n- zgeequ\n- zgees\n- zgeesx\n- zgeev\n- zgeevx\n- zgehd2\n- zgehrd\n- zgelq2\n- zgelqf\n- zgels\n- zgelsd\n- zgelss\n- zgelsy\n- zgeql2\n- zgeqlf\n- zgeqp3\n- zgeqr2\n- zgeqrf\n- zgerfs\n- zgerq2\n- zgerqf\n- zgesc2\n- zgesdd\n- zgesv\n- zgesvd\n- zgesvx\n- zgetc2\n- zgetf2\n- zgetrf\n- zgetri\n- zgetrs\n- zggbak\n- zggbal\n- zgges\n- zggesx\n- zggev\n- zggevx\n- zggglm\n- zgghrd\n- zgglse\n- zggqrf\n- zggrqf\n- zgtcon\n- zgtrfs\n- zgtsv\n- zgtsvx\n- zgttrf\n- zgttrs\n- zgtts2\n- zhbev\n- zhbevd\n- zhbevx\n- zhbgst\n- zhbgv\n- zhbgvd\n- zhbgvx\n- zhbtrd\n- zhecon\n- zheev\n- zheevd\n- zheevr\n- zheevx\n- zhegs2\n- zhegst\n- zhegv\n- zhegvd\n- zhegvx\n- zherfs\n- zhesv\n- zhesvx\n- zhetd2\n- zhetf2\n- zhetrd\n- zhetrf\n- zhetri\n- zhetrs\n- zhgeqz\n- zhpcon\n- zhpev\n- zhpevd\n- zhpevx\n- zhpgst\n- zhpgv\n- zhpgvd\n- zhpgvx\n- zhprfs\n- zhpsv\n- zhpsvx\n- zhptrd\n- zhptrf\n- zhptri\n- zhptrs\n- zhsein\n- zhseqr\n- zlabrd\n- zlacgv\n- zlacn2\n- zlacon\n- zlacp2\n- zlacpy\n- zlacrm\n- zlacrt\n- zladiv\n- zlaed0\n- zlaed7\n- zlaed8\n- zlaein\n- zlaesy\n- zlaev2\n- zlag2c\n- zlags2\n- zlagtm\n- zlahef\n- zlahqr\n- zlahr2\n- zlaic1\n- zlals0\n- zlalsa\n- zlalsd\n- zlangb\n- zlange\n- zlangt\n- zlanhb\n- zlanhe\n- zlanhp\n- zlanhs\n- zlanht\n- zlansb\n- zlansp\n- zlansy\n- zlantb\n- zlantp\n- zlantr\n- zlapll\n- zlapmt\n- zlaqgb\n- zlaqge\n- zlaqhb\n- zlaqhe\n- zlaqhp\n- zlaqp2\n- zlaqps\n- zlaqr0\n- zlaqr1\n- zlaqr2\n- zlaqr3\n- zlaqr4\n- zlaqr5\n- zlaqsb\n- zlaqsp\n- zlaqsy\n- zlar1v\n- zlar2v\n- zlarcm\n- zlarf\n- zlarfb\n- zlarfg\n- zlarft\n- zlarfx\n- zlargv\n- zlarnv\n- zlarrv\n- zlartg\n- zlartv\n- zlarz\n- zlarzb\n- zlarzt\n- zlascl\n- zlaset\n- zlasr\n- zlassq\n- zlaswp\n- zlasyf\n- zlatbs\n- zlatdf\n- zlatps\n- zlatrd\n- zlatrs\n- zlatrz\n- zlauu2\n- zlauum\n- zpbcon\n- zpbequ\n- zpbrfs\n- zpbstf\n- zpbsv\n- zpbsvx\n- zpbtf2\n- zpbtrf\n- zpbtrs\n- zpocon\n- zpoequ\n- zporfs\n- zposv\n- zposvx\n- zpotf2\n- zpotrf\n- zpotri\n- zpotrs\n- zppcon\n- zppequ\n- zpprfs\n- zppsv\n- zppsvx\n- zpptrf\n- zpptri\n- zpptrs\n- zptcon\n- zpteqr\n- zptrfs\n- zptsv\n- zptsvx\n- zpttrf\n- zpttrs\n- zptts2\n- zrot\n- zspcon\n- zspmv\n- zspr\n- zsprfs\n- zspsv\n- zspsvx\n- zsptrf\n- zsptri\n- zsptrs\n- zstedc\n- zstegr\n- zstein\n- zstemr\n- zsteqr\n- zsycon\n- zsymv\n- zsyr\n- zsyrfs\n- zsysv\n- zsysvx\n- zsytf2\n- zsytrf\n- zsytri\n- zsytrs\n- ztbcon\n- ztbrfs\n- ztbtrs\n- ztgevc\n- ztgex2\n- ztgexc\n- ztgsen\n- ztgsja\n- ztgsna\n- ztgsy2\n- ztgsyl\n- ztpcon\n- ztprfs\n- ztptri\n- ztptrs\n- ztrcon\n- ztrevc\n- ztrexc\n- ztrrfs\n- ztrsen\n- ztrsna\n- ztrsyl\n- ztrti2\n- ztrtri\n- ztrtrs\n- ztzrzf\n- zung2l\n- zung2r\n- zungbr\n- zunghr\n- zungl2\n- zunglq\n- zungql\n- zungqr\n- zungr2\n- zungrq\n- zungtr\n- zunm2l\n- zunm2r\n- zunmbr\n- zunmhr\n- zunml2\n- zunmlq\n- zunmql\n- zunmqr\n- zunmr2\n- zunmr3\n- zunmrq\n- zunmrz\n- zunmtr\n- zupgtr\n- zupmtr"
