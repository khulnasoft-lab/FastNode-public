// Code generated by pigeon; DO NOT EDIT.

package pigeon

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/khulnasoft-lab/fastnode/fastnode-go/lang/python/pythonparser/numpydoc/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Grammar",
			pos:  position{line: 20, col: 1, offset: 573},
			expr: &actionExpr{
				pos: position{line: 21, col: 3, offset: 586},
				run: (*parser).callonGrammar1,
				expr: &seqExpr{
					pos: position{line: 21, col: 3, offset: 586},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 21, col: 3, offset: 586},
							run: (*parser).callonGrammar3,
						},
						&labeledExpr{
							pos:   position{line: 24, col: 3, offset: 619},
							label: "items",
							expr: &zeroOrMoreExpr{
								pos: position{line: 24, col: 9, offset: 625},
								expr: &choiceExpr{
									pos: position{line: 24, col: 11, offset: 627},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 85, col: 14, offset: 2614},
											run: (*parser).callonGrammar7,
											expr: &seqExpr{
												pos: position{line: 85, col: 14, offset: 2614},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 242, col: 6, offset: 7033},
														expr: &seqExpr{
															pos: position{line: 241, col: 14, offset: 7012},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 241, col: 14, offset: 7012},
																	expr: &charClassMatcher{
																		pos:             position{line: 240, col: 15, offset: 6991},
																		val:             "[ \\t\\f]",
																		chars:           []rune{' ', '\t', '\f'},
																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																		ignoreCase:      false,
																		inverted:        false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 237, col: 10, offset: 6929},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 237, col: 10, offset: 6929},
																			val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																			ignoreCase: false,
																		},
																		&charClassMatcher{
																			pos:             position{line: 237, col: 22, offset: 6941},
																			val:             "[\\r\\n]",
																			chars:           []rune{'\r', '\n'},
																			basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																			ignoreCase:      false,
																			inverted:        false,
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 85, col: 16, offset: 2616},
														label: "lead",
														expr: &actionExpr{
															pos: position{line: 93, col: 18, offset: 2908},
															run: (*parser).callonGrammar17,
															expr: &seqExpr{
																pos: position{line: 93, col: 18, offset: 2908},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 93, col: 18, offset: 2908},
																		label: "lead",
																		expr: &choiceExpr{
																			pos: position{line: 93, col: 25, offset: 2915},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 103, col: 27, offset: 3141},
																					run: (*parser).callonGrammar21,
																					expr: &seqExpr{
																						pos: position{line: 103, col: 27, offset: 3141},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 232, col: 11, offset: 6842},
																								label: "indent",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 232, col: 18, offset: 6849},
																									expr: &charClassMatcher{
																										pos:             position{line: 239, col: 16, offset: 6971},
																										val:             "[ \\t]",
																										chars:           []rune{' ', '\t'},
																										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																										ignoreCase:      false,
																										inverted:        false,
																									},
																								},
																							},
																							&stateCodeExpr{
																								pos: position{line: 233, col: 3, offset: 6864},
																								run: (*parser).callonGrammar26,
																							},
																							&litMatcher{
																								pos:        position{line: 103, col: 34, offset: 3148},
																								val:        "..",
																								ignoreCase: false,
																							},
																							&oneOrMoreExpr{
																								pos: position{line: 103, col: 39, offset: 3153},
																								expr: &charClassMatcher{
																									pos:             position{line: 240, col: 15, offset: 6991},
																									val:             "[ \\t\\f]",
																									chars:           []rune{' ', '\t', '\f'},
																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																									ignoreCase:      false,
																									inverted:        false,
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 103, col: 51, offset: 3165},
																								label: "name",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 103, col: 56, offset: 3170},
																									expr: &charClassMatcher{
																										pos:             position{line: 115, col: 23, offset: 3620},
																										val:             "[_-\\pL\\pN]",
																										chars:           []rune{'_', '-'},
																										classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																										ignoreCase:      false,
																										inverted:        false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 103, col: 76, offset: 3190},
																								val:        ":",
																								ignoreCase: false,
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 103, col: 80, offset: 3194},
																								expr: &litMatcher{
																									pos:        position{line: 103, col: 80, offset: 3194},
																									val:        ":",
																									ignoreCase: false,
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 103, col: 85, offset: 3199},
																								expr: &charClassMatcher{
																									pos:             position{line: 240, col: 15, offset: 6991},
																									val:             "[ \\t\\f]",
																									chars:           []rune{' ', '\t', '\f'},
																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																									ignoreCase:      false,
																									inverted:        false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 109, col: 25, offset: 3381},
																					run: (*parser).callonGrammar38,
																					expr: &seqExpr{
																						pos: position{line: 109, col: 25, offset: 3381},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 232, col: 11, offset: 6842},
																								label: "indent",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 232, col: 18, offset: 6849},
																									expr: &charClassMatcher{
																										pos:             position{line: 239, col: 16, offset: 6971},
																										val:             "[ \\t]",
																										chars:           []rune{' ', '\t'},
																										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																										ignoreCase:      false,
																										inverted:        false,
																									},
																								},
																							},
																							&stateCodeExpr{
																								pos: position{line: 233, col: 3, offset: 6864},
																								run: (*parser).callonGrammar43,
																							},
																							&litMatcher{
																								pos:        position{line: 109, col: 32, offset: 3388},
																								val:        "..",
																								ignoreCase: false,
																							},
																							&oneOrMoreExpr{
																								pos: position{line: 109, col: 37, offset: 3393},
																								expr: &charClassMatcher{
																									pos:             position{line: 240, col: 15, offset: 6991},
																									val:             "[ \\t\\f]",
																									chars:           []rune{' ', '\t', '\f'},
																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																									ignoreCase:      false,
																									inverted:        false,
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 109, col: 49, offset: 3405},
																								label: "name",
																								expr: &seqExpr{
																									pos: position{line: 109, col: 56, offset: 3412},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 109, col: 56, offset: 3412},
																											val:        "[",
																											ignoreCase: false,
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 109, col: 60, offset: 3416},
																											expr: &charClassMatcher{
																												pos:             position{line: 115, col: 23, offset: 3620},
																												val:             "[_-\\pL\\pN]",
																												chars:           []rune{'_', '-'},
																												classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																												ignoreCase:      false,
																												inverted:        false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 109, col: 80, offset: 3436},
																											val:        "]",
																											ignoreCase: false,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 109, col: 86, offset: 3442},
																								expr: &charClassMatcher{
																									pos:             position{line: 240, col: 15, offset: 6991},
																									val:             "[ \\t\\f]",
																									chars:           []rune{' ', '\t', '\f'},
																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																									ignoreCase:      false,
																									inverted:        false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&stateCodeExpr{
																		pos: position{line: 94, col: 3, offset: 2965},
																		run: (*parser).callonGrammar55,
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 85, col: 35, offset: 2635},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 118, col: 3, offset: 3706},
															run: (*parser).callonGrammar57,
															expr: &seqExpr{
																pos: position{line: 118, col: 3, offset: 3706},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 118, col: 3, offset: 3706},
																		label: "first",
																		expr: &actionExpr{
																			pos: position{line: 218, col: 15, offset: 6467},
																			run: (*parser).callonGrammar60,
																			expr: &seqExpr{
																				pos: position{line: 218, col: 15, offset: 6467},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 218, col: 15, offset: 6467},
																						label: "text",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 218, col: 20, offset: 6472},
																							expr: &seqExpr{
																								pos: position{line: 218, col: 22, offset: 6474},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 218, col: 22, offset: 6474},
																										expr: &choiceExpr{
																											pos: position{line: 237, col: 10, offset: 6929},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 237, col: 10, offset: 6929},
																													val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																													ignoreCase: false,
																												},
																												&charClassMatcher{
																													pos:             position{line: 237, col: 22, offset: 6941},
																													val:             "[\\r\\n]",
																													chars:           []rune{'\r', '\n'},
																													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																													ignoreCase:      false,
																													inverted:        false,
																												},
																											},
																										},
																									},
																									&anyMatcher{
																										line: 218, col: 27, offset: 6479,
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 237, col: 10, offset: 6929},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 237, col: 10, offset: 6929},
																								val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																								ignoreCase: false,
																							},
																							&charClassMatcher{
																								pos:             position{line: 237, col: 22, offset: 6941},
																								val:             "[\\r\\n]",
																								chars:           []rune{'\r', '\n'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 119, col: 3, offset: 3725},
																		label: "rest",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 119, col: 8, offset: 3730},
																			expr: &seqExpr{
																				pos: position{line: 119, col: 10, offset: 3732},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 119, col: 10, offset: 3732},
																						label: "line",
																						expr: &actionExpr{
																							pos: position{line: 224, col: 17, offset: 6586},
																							run: (*parser).callonGrammar77,
																							expr: &seqExpr{
																								pos: position{line: 224, col: 17, offset: 6586},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 232, col: 11, offset: 6842},
																										label: "indent",
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 232, col: 18, offset: 6849},
																											expr: &charClassMatcher{
																												pos:             position{line: 239, col: 16, offset: 6971},
																												val:             "[ \\t]",
																												chars:           []rune{' ', '\t'},
																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																												ignoreCase:      false,
																												inverted:        false,
																											},
																										},
																									},
																									&stateCodeExpr{
																										pos: position{line: 233, col: 3, offset: 6864},
																										run: (*parser).callonGrammar82,
																									},
																									&labeledExpr{
																										pos:   position{line: 224, col: 24, offset: 6593},
																										label: "text",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 224, col: 29, offset: 6598},
																											expr: &seqExpr{
																												pos: position{line: 224, col: 31, offset: 6600},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 224, col: 31, offset: 6600},
																														expr: &choiceExpr{
																															pos: position{line: 237, col: 10, offset: 6929},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 237, col: 10, offset: 6929},
																																	val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																	ignoreCase: false,
																																},
																																&charClassMatcher{
																																	pos:             position{line: 237, col: 22, offset: 6941},
																																	val:             "[\\r\\n]",
																																	chars:           []rune{'\r', '\n'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																														},
																													},
																													&anyMatcher{
																														line: 224, col: 36, offset: 6605,
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 237, col: 10, offset: 6929},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 237, col: 10, offset: 6929},
																												val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																												ignoreCase: false,
																											},
																											&charClassMatcher{
																												pos:             position{line: 237, col: 22, offset: 6941},
																												val:             "[\\r\\n]",
																												chars:           []rune{'\r', '\n'},
																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																												ignoreCase:      false,
																												inverted:        false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 120, col: 10, offset: 3759},
																						run: (*parser).callonGrammar94,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 32, col: 21, offset: 812},
											run: (*parser).callonGrammar95,
											expr: &seqExpr{
												pos: position{line: 32, col: 21, offset: 812},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 32, col: 21, offset: 812},
														label: "header",
														expr: &actionExpr{
															pos: position{line: 39, col: 3, offset: 1008},
															run: (*parser).callonGrammar98,
															expr: &seqExpr{
																pos: position{line: 39, col: 3, offset: 1008},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 242, col: 6, offset: 7033},
																		expr: &seqExpr{
																			pos: position{line: 241, col: 14, offset: 7012},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 241, col: 14, offset: 7012},
																					expr: &charClassMatcher{
																						pos:             position{line: 240, col: 15, offset: 6991},
																						val:             "[ \\t\\f]",
																						chars:           []rune{' ', '\t', '\f'},
																						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																						ignoreCase:      false,
																						inverted:        false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 237, col: 10, offset: 6929},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 237, col: 10, offset: 6929},
																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																							ignoreCase: false,
																						},
																						&charClassMatcher{
																							pos:             position{line: 237, col: 22, offset: 6941},
																							val:             "[\\r\\n]",
																							chars:           []rune{'\r', '\n'},
																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																							ignoreCase:      false,
																							inverted:        false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 39, col: 5, offset: 1010},
																		label: "header",
																		expr: &actionExpr{
																			pos: position{line: 224, col: 17, offset: 6586},
																			run: (*parser).callonGrammar108,
																			expr: &seqExpr{
																				pos: position{line: 224, col: 17, offset: 6586},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 232, col: 11, offset: 6842},
																						label: "indent",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 232, col: 18, offset: 6849},
																							expr: &charClassMatcher{
																								pos:             position{line: 239, col: 16, offset: 6971},
																								val:             "[ \\t]",
																								chars:           []rune{' ', '\t'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 233, col: 3, offset: 6864},
																						run: (*parser).callonGrammar113,
																					},
																					&labeledExpr{
																						pos:   position{line: 224, col: 24, offset: 6593},
																						label: "text",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 224, col: 29, offset: 6598},
																							expr: &seqExpr{
																								pos: position{line: 224, col: 31, offset: 6600},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 224, col: 31, offset: 6600},
																										expr: &choiceExpr{
																											pos: position{line: 237, col: 10, offset: 6929},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 237, col: 10, offset: 6929},
																													val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																													ignoreCase: false,
																												},
																												&charClassMatcher{
																													pos:             position{line: 237, col: 22, offset: 6941},
																													val:             "[\\r\\n]",
																													chars:           []rune{'\r', '\n'},
																													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																													ignoreCase:      false,
																													inverted:        false,
																												},
																											},
																										},
																									},
																									&anyMatcher{
																										line: 224, col: 36, offset: 6605,
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 237, col: 10, offset: 6929},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 237, col: 10, offset: 6929},
																								val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																								ignoreCase: false,
																							},
																							&charClassMatcher{
																								pos:             position{line: 237, col: 22, offset: 6941},
																								val:             "[\\r\\n]",
																								chars:           []rune{'\r', '\n'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 39, col: 25, offset: 1030},
																		label: "underline",
																		expr: &actionExpr{
																			pos: position{line: 52, col: 18, offset: 1365},
																			run: (*parser).callonGrammar126,
																			expr: &seqExpr{
																				pos: position{line: 52, col: 18, offset: 1365},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 232, col: 11, offset: 6842},
																						label: "indent",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 232, col: 18, offset: 6849},
																							expr: &charClassMatcher{
																								pos:             position{line: 239, col: 16, offset: 6971},
																								val:             "[ \\t]",
																								chars:           []rune{' ', '\t'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 233, col: 3, offset: 6864},
																						run: (*parser).callonGrammar131,
																					},
																					&labeledExpr{
																						pos:   position{line: 52, col: 25, offset: 1372},
																						label: "underline",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 52, col: 35, offset: 1382},
																							expr: &litMatcher{
																								pos:        position{line: 52, col: 35, offset: 1382},
																								val:        "-",
																								ignoreCase: false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 237, col: 10, offset: 6929},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 237, col: 10, offset: 6929},
																								val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																								ignoreCase: false,
																							},
																							&charClassMatcher{
																								pos:             position{line: 237, col: 22, offset: 6941},
																								val:             "[\\r\\n]",
																								chars:           []rune{'\r', '\n'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 40, col: 3, offset: 1056},
																		run: (*parser).callonGrammar138,
																	},
																	&stateCodeExpr{
																		pos: position{line: 43, col: 3, offset: 1153},
																		run: (*parser).callonGrammar139,
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 32, col: 44, offset: 835},
														label: "content",
														expr: &choiceExpr{
															pos: position{line: 63, col: 3, offset: 1852},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 63, col: 3, offset: 1852},
																	run: (*parser).callonGrammar142,
																	expr: &seqExpr{
																		pos: position{line: 63, col: 3, offset: 1852},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 63, col: 3, offset: 1852},
																				run: (*parser).callonGrammar144,
																			},
																			&labeledExpr{
																				pos:   position{line: 63, col: 61, offset: 1910},
																				label: "content",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 63, col: 69, offset: 1918},
																					expr: &seqExpr{
																						pos: position{line: 63, col: 71, offset: 1920},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 63, col: 71, offset: 1920},
																								expr: &actionExpr{
																									pos: position{line: 39, col: 3, offset: 1008},
																									run: (*parser).callonGrammar149,
																									expr: &seqExpr{
																										pos: position{line: 39, col: 3, offset: 1008},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 242, col: 6, offset: 7033},
																												expr: &seqExpr{
																													pos: position{line: 241, col: 14, offset: 7012},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 241, col: 14, offset: 7012},
																															expr: &charClassMatcher{
																																pos:             position{line: 240, col: 15, offset: 6991},
																																val:             "[ \\t\\f]",
																																chars:           []rune{' ', '\t', '\f'},
																																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																ignoreCase:      false,
																																inverted:        false,
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 237, col: 10, offset: 6929},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 237, col: 10, offset: 6929},
																																	val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																	ignoreCase: false,
																																},
																																&charClassMatcher{
																																	pos:             position{line: 237, col: 22, offset: 6941},
																																	val:             "[\\r\\n]",
																																	chars:           []rune{'\r', '\n'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 39, col: 5, offset: 1010},
																												label: "header",
																												expr: &actionExpr{
																													pos: position{line: 224, col: 17, offset: 6586},
																													run: (*parser).callonGrammar159,
																													expr: &seqExpr{
																														pos: position{line: 224, col: 17, offset: 6586},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 232, col: 11, offset: 6842},
																																label: "indent",
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 232, col: 18, offset: 6849},
																																	expr: &charClassMatcher{
																																		pos:             position{line: 239, col: 16, offset: 6971},
																																		val:             "[ \\t]",
																																		chars:           []rune{' ', '\t'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																															&stateCodeExpr{
																																pos: position{line: 233, col: 3, offset: 6864},
																																run: (*parser).callonGrammar164,
																															},
																															&labeledExpr{
																																pos:   position{line: 224, col: 24, offset: 6593},
																																label: "text",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 224, col: 29, offset: 6598},
																																	expr: &seqExpr{
																																		pos: position{line: 224, col: 31, offset: 6600},
																																		exprs: []interface{}{
																																			&notExpr{
																																				pos: position{line: 224, col: 31, offset: 6600},
																																				expr: &choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																			&anyMatcher{
																																				line: 224, col: 36, offset: 6605,
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 39, col: 25, offset: 1030},
																												label: "underline",
																												expr: &actionExpr{
																													pos: position{line: 52, col: 18, offset: 1365},
																													run: (*parser).callonGrammar177,
																													expr: &seqExpr{
																														pos: position{line: 52, col: 18, offset: 1365},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 232, col: 11, offset: 6842},
																																label: "indent",
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 232, col: 18, offset: 6849},
																																	expr: &charClassMatcher{
																																		pos:             position{line: 239, col: 16, offset: 6971},
																																		val:             "[ \\t]",
																																		chars:           []rune{' ', '\t'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																															&stateCodeExpr{
																																pos: position{line: 233, col: 3, offset: 6864},
																																run: (*parser).callonGrammar182,
																															},
																															&labeledExpr{
																																pos:   position{line: 52, col: 25, offset: 1372},
																																label: "underline",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 52, col: 35, offset: 1382},
																																	expr: &litMatcher{
																																		pos:        position{line: 52, col: 35, offset: 1382},
																																		val:        "-",
																																		ignoreCase: false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 40, col: 3, offset: 1056},
																												run: (*parser).callonGrammar189,
																											},
																											&stateCodeExpr{
																												pos: position{line: 43, col: 3, offset: 1153},
																												run: (*parser).callonGrammar190,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 161, col: 15, offset: 4824},
																								run: (*parser).callonGrammar191,
																								expr: &seqExpr{
																									pos: position{line: 161, col: 15, offset: 4824},
																									exprs: []interface{}{
																										&zeroOrMoreExpr{
																											pos: position{line: 242, col: 6, offset: 7033},
																											expr: &seqExpr{
																												pos: position{line: 241, col: 14, offset: 7012},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 241, col: 14, offset: 7012},
																														expr: &charClassMatcher{
																															pos:             position{line: 240, col: 15, offset: 6991},
																															val:             "[ \\t\\f]",
																															chars:           []rune{' ', '\t', '\f'},
																															basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																															ignoreCase:      false,
																															inverted:        false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 237, col: 10, offset: 6929},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 237, col: 10, offset: 6929},
																																val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																ignoreCase: false,
																															},
																															&charClassMatcher{
																																pos:             position{line: 237, col: 22, offset: 6941},
																																val:             "[\\r\\n]",
																																chars:           []rune{'\r', '\n'},
																																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																ignoreCase:      false,
																																inverted:        false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 161, col: 17, offset: 4826},
																											label: "first",
																											expr: &actionExpr{
																												pos: position{line: 190, col: 24, offset: 5754},
																												run: (*parser).callonGrammar201,
																												expr: &seqExpr{
																													pos: position{line: 190, col: 24, offset: 5754},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 232, col: 11, offset: 6842},
																															label: "indent",
																															expr: &zeroOrMoreExpr{
																																pos: position{line: 232, col: 18, offset: 6849},
																																expr: &charClassMatcher{
																																	pos:             position{line: 239, col: 16, offset: 6971},
																																	val:             "[ \\t]",
																																	chars:           []rune{' ', '\t'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																														},
																														&stateCodeExpr{
																															pos: position{line: 233, col: 3, offset: 6864},
																															run: (*parser).callonGrammar206,
																														},
																														&labeledExpr{
																															pos:   position{line: 190, col: 31, offset: 5761},
																															label: "subject",
																															expr: &actionExpr{
																																pos: position{line: 204, col: 22, offset: 6165},
																																run: (*parser).callonGrammar208,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 204, col: 22, offset: 6165},
																																	expr: &seqExpr{
																																		pos: position{line: 204, col: 24, offset: 6167},
																																		exprs: []interface{}{
																																			&notExpr{
																																				pos: position{line: 204, col: 24, offset: 6167},
																																				expr: &choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 204, col: 29, offset: 6172},
																																				expr: &seqExpr{
																																					pos: position{line: 210, col: 24, offset: 6283},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 210, col: 24, offset: 6283},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 210, col: 36, offset: 6295},
																																							val:        ":",
																																							ignoreCase: false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 210, col: 40, offset: 6299},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&anyMatcher{
																																				line: 204, col: 50, offset: 6193,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 190, col: 57, offset: 5787},
																															label: "typ",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 190, col: 61, offset: 5791},
																																expr: &actionExpr{
																																	pos: position{line: 212, col: 19, offset: 6330},
																																	run: (*parser).callonGrammar225,
																																	expr: &seqExpr{
																																		pos: position{line: 212, col: 19, offset: 6330},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 210, col: 24, offset: 6283},
																																				expr: &charClassMatcher{
																																					pos:             position{line: 240, col: 15, offset: 6991},
																																					val:             "[ \\t\\f]",
																																					chars:           []rune{' ', '\t', '\f'},
																																					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																					ignoreCase:      false,
																																					inverted:        false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 210, col: 36, offset: 6295},
																																				val:        ":",
																																				ignoreCase: false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 210, col: 40, offset: 6299},
																																				expr: &charClassMatcher{
																																					pos:             position{line: 240, col: 15, offset: 6991},
																																					val:             "[ \\t\\f]",
																																					chars:           []rune{' ', '\t', '\f'},
																																					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																					ignoreCase:      false,
																																					inverted:        false,
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 212, col: 39, offset: 6350},
																																				label: "text",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 212, col: 44, offset: 6355},
																																					expr: &seqExpr{
																																						pos: position{line: 212, col: 46, offset: 6357},
																																						exprs: []interface{}{
																																							&notExpr{
																																								pos: position{line: 212, col: 46, offset: 6357},
																																								expr: &choiceExpr{
																																									pos: position{line: 237, col: 10, offset: 6929},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 237, col: 10, offset: 6929},
																																											val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																											ignoreCase: false,
																																										},
																																										&charClassMatcher{
																																											pos:             position{line: 237, col: 22, offset: 6941},
																																											val:             "[\\r\\n]",
																																											chars:           []rune{'\r', '\n'},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																								},
																																							},
																																							&anyMatcher{
																																								line: 212, col: 51, offset: 6362,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 237, col: 10, offset: 6929},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 237, col: 10, offset: 6929},
																																	val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																	ignoreCase: false,
																																},
																																&charClassMatcher{
																																	pos:             position{line: 237, col: 22, offset: 6941},
																																	val:             "[\\r\\n]",
																																	chars:           []rune{'\r', '\n'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																														},
																														&stateCodeExpr{
																															pos: position{line: 191, col: 3, offset: 5813},
																															run: (*parser).callonGrammar243,
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 161, col: 43, offset: 4852},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 167, col: 22, offset: 5024},
																												run: (*parser).callonGrammar245,
																												expr: &labeledExpr{
																													pos:   position{line: 167, col: 22, offset: 5024},
																													label: "content",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 167, col: 30, offset: 5032},
																														expr: &actionExpr{
																															pos: position{line: 174, col: 3, offset: 5175},
																															run: (*parser).callonGrammar248,
																															expr: &seqExpr{
																																pos: position{line: 174, col: 3, offset: 5175},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 242, col: 6, offset: 7033},
																																		expr: &seqExpr{
																																			pos: position{line: 241, col: 14, offset: 7012},
																																			exprs: []interface{}{
																																				&zeroOrMoreExpr{
																																					pos: position{line: 241, col: 14, offset: 7012},
																																					expr: &charClassMatcher{
																																						pos:             position{line: 240, col: 15, offset: 6991},
																																						val:             "[ \\t\\f]",
																																						chars:           []rune{' ', '\t', '\f'},
																																						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																						ignoreCase:      false,
																																						inverted:        false,
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 174, col: 5, offset: 5177},
																																		label: "lines",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 174, col: 11, offset: 5183},
																																			expr: &seqExpr{
																																				pos: position{line: 175, col: 5, offset: 5189},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 175, col: 5, offset: 5189},
																																						label: "line",
																																						expr: &actionExpr{
																																							pos: position{line: 224, col: 17, offset: 6586},
																																							run: (*parser).callonGrammar261,
																																							expr: &seqExpr{
																																								pos: position{line: 224, col: 17, offset: 6586},
																																								exprs: []interface{}{
																																									&labeledExpr{
																																										pos:   position{line: 232, col: 11, offset: 6842},
																																										label: "indent",
																																										expr: &zeroOrMoreExpr{
																																											pos: position{line: 232, col: 18, offset: 6849},
																																											expr: &charClassMatcher{
																																												pos:             position{line: 239, col: 16, offset: 6971},
																																												val:             "[ \\t]",
																																												chars:           []rune{' ', '\t'},
																																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																												ignoreCase:      false,
																																												inverted:        false,
																																											},
																																										},
																																									},
																																									&stateCodeExpr{
																																										pos: position{line: 233, col: 3, offset: 6864},
																																										run: (*parser).callonGrammar266,
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 224, col: 24, offset: 6593},
																																										label: "text",
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 224, col: 29, offset: 6598},
																																											expr: &seqExpr{
																																												pos: position{line: 224, col: 31, offset: 6600},
																																												exprs: []interface{}{
																																													&notExpr{
																																														pos: position{line: 224, col: 31, offset: 6600},
																																														expr: &choiceExpr{
																																															pos: position{line: 237, col: 10, offset: 6929},
																																															alternatives: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 237, col: 10, offset: 6929},
																																																	val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																																	ignoreCase: false,
																																																},
																																																&charClassMatcher{
																																																	pos:             position{line: 237, col: 22, offset: 6941},
																																																	val:             "[\\r\\n]",
																																																	chars:           []rune{'\r', '\n'},
																																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																																	ignoreCase:      false,
																																																	inverted:        false,
																																																},
																																															},
																																														},
																																													},
																																													&anyMatcher{
																																														line: 224, col: 36, offset: 6605,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&choiceExpr{
																																										pos: position{line: 237, col: 10, offset: 6929},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 237, col: 10, offset: 6929},
																																												val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																												ignoreCase: false,
																																											},
																																											&charClassMatcher{
																																												pos:             position{line: 237, col: 22, offset: 6941},
																																												val:             "[\\r\\n]",
																																												chars:           []rune{'\r', '\n'},
																																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																												ignoreCase:      false,
																																												inverted:        false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 176, col: 5, offset: 5211},
																																						run: (*parser).callonGrammar278,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 69, col: 3, offset: 2060},
																	run: (*parser).callonGrammar279,
																	expr: &seqExpr{
																		pos: position{line: 69, col: 3, offset: 2060},
																		exprs: []interface{}{
																			&notCodeExpr{
																				pos: position{line: 69, col: 3, offset: 2060},
																				run: (*parser).callonGrammar281,
																			},
																			&labeledExpr{
																				pos:   position{line: 69, col: 61, offset: 2118},
																				label: "content",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 69, col: 69, offset: 2126},
																					expr: &seqExpr{
																						pos: position{line: 69, col: 71, offset: 2128},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 69, col: 71, offset: 2128},
																								expr: &actionExpr{
																									pos: position{line: 39, col: 3, offset: 1008},
																									run: (*parser).callonGrammar286,
																									expr: &seqExpr{
																										pos: position{line: 39, col: 3, offset: 1008},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 242, col: 6, offset: 7033},
																												expr: &seqExpr{
																													pos: position{line: 241, col: 14, offset: 7012},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 241, col: 14, offset: 7012},
																															expr: &charClassMatcher{
																																pos:             position{line: 240, col: 15, offset: 6991},
																																val:             "[ \\t\\f]",
																																chars:           []rune{' ', '\t', '\f'},
																																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																ignoreCase:      false,
																																inverted:        false,
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 237, col: 10, offset: 6929},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 237, col: 10, offset: 6929},
																																	val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																	ignoreCase: false,
																																},
																																&charClassMatcher{
																																	pos:             position{line: 237, col: 22, offset: 6941},
																																	val:             "[\\r\\n]",
																																	chars:           []rune{'\r', '\n'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 39, col: 5, offset: 1010},
																												label: "header",
																												expr: &actionExpr{
																													pos: position{line: 224, col: 17, offset: 6586},
																													run: (*parser).callonGrammar296,
																													expr: &seqExpr{
																														pos: position{line: 224, col: 17, offset: 6586},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 232, col: 11, offset: 6842},
																																label: "indent",
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 232, col: 18, offset: 6849},
																																	expr: &charClassMatcher{
																																		pos:             position{line: 239, col: 16, offset: 6971},
																																		val:             "[ \\t]",
																																		chars:           []rune{' ', '\t'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																															&stateCodeExpr{
																																pos: position{line: 233, col: 3, offset: 6864},
																																run: (*parser).callonGrammar301,
																															},
																															&labeledExpr{
																																pos:   position{line: 224, col: 24, offset: 6593},
																																label: "text",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 224, col: 29, offset: 6598},
																																	expr: &seqExpr{
																																		pos: position{line: 224, col: 31, offset: 6600},
																																		exprs: []interface{}{
																																			&notExpr{
																																				pos: position{line: 224, col: 31, offset: 6600},
																																				expr: &choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																			&anyMatcher{
																																				line: 224, col: 36, offset: 6605,
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 39, col: 25, offset: 1030},
																												label: "underline",
																												expr: &actionExpr{
																													pos: position{line: 52, col: 18, offset: 1365},
																													run: (*parser).callonGrammar314,
																													expr: &seqExpr{
																														pos: position{line: 52, col: 18, offset: 1365},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 232, col: 11, offset: 6842},
																																label: "indent",
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 232, col: 18, offset: 6849},
																																	expr: &charClassMatcher{
																																		pos:             position{line: 239, col: 16, offset: 6971},
																																		val:             "[ \\t]",
																																		chars:           []rune{' ', '\t'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																															&stateCodeExpr{
																																pos: position{line: 233, col: 3, offset: 6864},
																																run: (*parser).callonGrammar319,
																															},
																															&labeledExpr{
																																pos:   position{line: 52, col: 25, offset: 1372},
																																label: "underline",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 52, col: 35, offset: 1382},
																																	expr: &litMatcher{
																																		pos:        position{line: 52, col: 35, offset: 1382},
																																		val:        "-",
																																		ignoreCase: false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 40, col: 3, offset: 1056},
																												run: (*parser).callonGrammar326,
																											},
																											&stateCodeExpr{
																												pos: position{line: 43, col: 3, offset: 1153},
																												run: (*parser).callonGrammar327,
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 69, col: 90, offset: 2147},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 130, col: 12, offset: 4065},
																										run: (*parser).callonGrammar329,
																										expr: &seqExpr{
																											pos: position{line: 130, col: 12, offset: 4065},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 130, col: 12, offset: 4065},
																													expr: &seqExpr{
																														pos: position{line: 241, col: 14, offset: 7012},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 241, col: 14, offset: 7012},
																																expr: &charClassMatcher{
																																	pos:             position{line: 240, col: 15, offset: 6991},
																																	val:             "[ \\t\\f]",
																																	chars:           []rune{' ', '\t', '\f'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 130, col: 23, offset: 4076},
																													label: "doctest",
																													expr: &actionExpr{
																														pos: position{line: 137, col: 3, offset: 4177},
																														run: (*parser).callonGrammar339,
																														expr: &seqExpr{
																															pos: position{line: 137, col: 3, offset: 4177},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 137, col: 3, offset: 4177},
																																	label: "first",
																																	expr: &actionExpr{
																																		pos: position{line: 155, col: 21, offset: 4666},
																																		run: (*parser).callonGrammar342,
																																		expr: &seqExpr{
																																			pos: position{line: 155, col: 21, offset: 4666},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 232, col: 11, offset: 6842},
																																					label: "indent",
																																					expr: &zeroOrMoreExpr{
																																						pos: position{line: 232, col: 18, offset: 6849},
																																						expr: &charClassMatcher{
																																							pos:             position{line: 239, col: 16, offset: 6971},
																																							val:             "[ \\t]",
																																							chars:           []rune{' ', '\t'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																				&stateCodeExpr{
																																					pos: position{line: 233, col: 3, offset: 6864},
																																					run: (*parser).callonGrammar347,
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 155, col: 28, offset: 4673},
																																					label: "text",
																																					expr: &seqExpr{
																																						pos: position{line: 155, col: 35, offset: 4680},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 155, col: 35, offset: 4680},
																																								val:        ">>>",
																																								ignoreCase: false,
																																							},
																																							&charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 155, col: 52, offset: 4697},
																																								expr: &seqExpr{
																																									pos: position{line: 155, col: 54, offset: 4699},
																																									exprs: []interface{}{
																																										&notExpr{
																																											pos: position{line: 155, col: 54, offset: 4699},
																																											expr: &choiceExpr{
																																												pos: position{line: 237, col: 10, offset: 6929},
																																												alternatives: []interface{}{
																																													&litMatcher{
																																														pos:        position{line: 237, col: 10, offset: 6929},
																																														val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																														ignoreCase: false,
																																													},
																																													&charClassMatcher{
																																														pos:             position{line: 237, col: 22, offset: 6941},
																																														val:             "[\\r\\n]",
																																														chars:           []rune{'\r', '\n'},
																																														basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																														ignoreCase:      false,
																																														inverted:        false,
																																													},
																																												},
																																											},
																																										},
																																										&anyMatcher{
																																											line: 155, col: 59, offset: 4704,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 138, col: 3, offset: 4202},
																																	run: (*parser).callonGrammar362,
																																},
																																&labeledExpr{
																																	pos:   position{line: 142, col: 3, offset: 4316},
																																	label: "rest",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 142, col: 8, offset: 4321},
																																		expr: &seqExpr{
																																			pos: position{line: 143, col: 5, offset: 4327},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 143, col: 5, offset: 4327},
																																					label: "line",
																																					expr: &actionExpr{
																																						pos: position{line: 224, col: 17, offset: 6586},
																																						run: (*parser).callonGrammar367,
																																						expr: &seqExpr{
																																							pos: position{line: 224, col: 17, offset: 6586},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 232, col: 11, offset: 6842},
																																									label: "indent",
																																									expr: &zeroOrMoreExpr{
																																										pos: position{line: 232, col: 18, offset: 6849},
																																										expr: &charClassMatcher{
																																											pos:             position{line: 239, col: 16, offset: 6971},
																																											val:             "[ \\t]",
																																											chars:           []rune{' ', '\t'},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																								},
																																								&stateCodeExpr{
																																									pos: position{line: 233, col: 3, offset: 6864},
																																									run: (*parser).callonGrammar372,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 224, col: 24, offset: 6593},
																																									label: "text",
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 224, col: 29, offset: 6598},
																																										expr: &seqExpr{
																																											pos: position{line: 224, col: 31, offset: 6600},
																																											exprs: []interface{}{
																																												&notExpr{
																																													pos: position{line: 224, col: 31, offset: 6600},
																																													expr: &choiceExpr{
																																														pos: position{line: 237, col: 10, offset: 6929},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 237, col: 10, offset: 6929},
																																																val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																																ignoreCase: false,
																																															},
																																															&charClassMatcher{
																																																pos:             position{line: 237, col: 22, offset: 6941},
																																																val:             "[\\r\\n]",
																																																chars:           []rune{'\r', '\n'},
																																																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																																ignoreCase:      false,
																																																inverted:        false,
																																															},
																																														},
																																													},
																																												},
																																												&anyMatcher{
																																													line: 224, col: 36, offset: 6605,
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&choiceExpr{
																																									pos: position{line: 237, col: 10, offset: 6929},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 237, col: 10, offset: 6929},
																																											val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																											ignoreCase: false,
																																										},
																																										&charClassMatcher{
																																											pos:             position{line: 237, col: 22, offset: 6941},
																																											val:             "[\\r\\n]",
																																											chars:           []rune{'\r', '\n'},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 144, col: 5, offset: 4349},
																																					run: (*parser).callonGrammar384,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 85, col: 14, offset: 2614},
																										run: (*parser).callonGrammar385,
																										expr: &seqExpr{
																											pos: position{line: 85, col: 14, offset: 2614},
																											exprs: []interface{}{
																												&zeroOrMoreExpr{
																													pos: position{line: 242, col: 6, offset: 7033},
																													expr: &seqExpr{
																														pos: position{line: 241, col: 14, offset: 7012},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 241, col: 14, offset: 7012},
																																expr: &charClassMatcher{
																																	pos:             position{line: 240, col: 15, offset: 6991},
																																	val:             "[ \\t\\f]",
																																	chars:           []rune{' ', '\t', '\f'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 85, col: 16, offset: 2616},
																													label: "lead",
																													expr: &actionExpr{
																														pos: position{line: 93, col: 18, offset: 2908},
																														run: (*parser).callonGrammar395,
																														expr: &seqExpr{
																															pos: position{line: 93, col: 18, offset: 2908},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 93, col: 18, offset: 2908},
																																	label: "lead",
																																	expr: &choiceExpr{
																																		pos: position{line: 93, col: 25, offset: 2915},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 103, col: 27, offset: 3141},
																																				run: (*parser).callonGrammar399,
																																				expr: &seqExpr{
																																					pos: position{line: 103, col: 27, offset: 3141},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 232, col: 11, offset: 6842},
																																							label: "indent",
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 232, col: 18, offset: 6849},
																																								expr: &charClassMatcher{
																																									pos:             position{line: 239, col: 16, offset: 6971},
																																									val:             "[ \\t]",
																																									chars:           []rune{' ', '\t'},
																																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																									ignoreCase:      false,
																																									inverted:        false,
																																								},
																																							},
																																						},
																																						&stateCodeExpr{
																																							pos: position{line: 233, col: 3, offset: 6864},
																																							run: (*parser).callonGrammar404,
																																						},
																																						&litMatcher{
																																							pos:        position{line: 103, col: 34, offset: 3148},
																																							val:        "..",
																																							ignoreCase: false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 103, col: 39, offset: 3153},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 103, col: 51, offset: 3165},
																																							label: "name",
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 103, col: 56, offset: 3170},
																																								expr: &charClassMatcher{
																																									pos:             position{line: 115, col: 23, offset: 3620},
																																									val:             "[_-\\pL\\pN]",
																																									chars:           []rune{'_', '-'},
																																									classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																																									ignoreCase:      false,
																																									inverted:        false,
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 103, col: 76, offset: 3190},
																																							val:        ":",
																																							ignoreCase: false,
																																						},
																																						&zeroOrOneExpr{
																																							pos: position{line: 103, col: 80, offset: 3194},
																																							expr: &litMatcher{
																																								pos:        position{line: 103, col: 80, offset: 3194},
																																								val:        ":",
																																								ignoreCase: false,
																																							},
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 103, col: 85, offset: 3199},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 109, col: 25, offset: 3381},
																																				run: (*parser).callonGrammar416,
																																				expr: &seqExpr{
																																					pos: position{line: 109, col: 25, offset: 3381},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 232, col: 11, offset: 6842},
																																							label: "indent",
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 232, col: 18, offset: 6849},
																																								expr: &charClassMatcher{
																																									pos:             position{line: 239, col: 16, offset: 6971},
																																									val:             "[ \\t]",
																																									chars:           []rune{' ', '\t'},
																																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																									ignoreCase:      false,
																																									inverted:        false,
																																								},
																																							},
																																						},
																																						&stateCodeExpr{
																																							pos: position{line: 233, col: 3, offset: 6864},
																																							run: (*parser).callonGrammar421,
																																						},
																																						&litMatcher{
																																							pos:        position{line: 109, col: 32, offset: 3388},
																																							val:        "..",
																																							ignoreCase: false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 109, col: 37, offset: 3393},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 109, col: 49, offset: 3405},
																																							label: "name",
																																							expr: &seqExpr{
																																								pos: position{line: 109, col: 56, offset: 3412},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 109, col: 56, offset: 3412},
																																										val:        "[",
																																										ignoreCase: false,
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 109, col: 60, offset: 3416},
																																										expr: &charClassMatcher{
																																											pos:             position{line: 115, col: 23, offset: 3620},
																																											val:             "[_-\\pL\\pN]",
																																											chars:           []rune{'_', '-'},
																																											classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 109, col: 80, offset: 3436},
																																										val:        "]",
																																										ignoreCase: false,
																																									},
																																								},
																																							},
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 109, col: 86, offset: 3442},
																																							expr: &charClassMatcher{
																																								pos:             position{line: 240, col: 15, offset: 6991},
																																								val:             "[ \\t\\f]",
																																								chars:           []rune{' ', '\t', '\f'},
																																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																								ignoreCase:      false,
																																								inverted:        false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 94, col: 3, offset: 2965},
																																	run: (*parser).callonGrammar433,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 85, col: 35, offset: 2635},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 118, col: 3, offset: 3706},
																														run: (*parser).callonGrammar435,
																														expr: &seqExpr{
																															pos: position{line: 118, col: 3, offset: 3706},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 118, col: 3, offset: 3706},
																																	label: "first",
																																	expr: &actionExpr{
																																		pos: position{line: 218, col: 15, offset: 6467},
																																		run: (*parser).callonGrammar438,
																																		expr: &seqExpr{
																																			pos: position{line: 218, col: 15, offset: 6467},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 218, col: 15, offset: 6467},
																																					label: "text",
																																					expr: &zeroOrMoreExpr{
																																						pos: position{line: 218, col: 20, offset: 6472},
																																						expr: &seqExpr{
																																							pos: position{line: 218, col: 22, offset: 6474},
																																							exprs: []interface{}{
																																								&notExpr{
																																									pos: position{line: 218, col: 22, offset: 6474},
																																									expr: &choiceExpr{
																																										pos: position{line: 237, col: 10, offset: 6929},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 237, col: 10, offset: 6929},
																																												val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																												ignoreCase: false,
																																											},
																																											&charClassMatcher{
																																												pos:             position{line: 237, col: 22, offset: 6941},
																																												val:             "[\\r\\n]",
																																												chars:           []rune{'\r', '\n'},
																																												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																												ignoreCase:      false,
																																												inverted:        false,
																																											},
																																										},
																																									},
																																								},
																																								&anyMatcher{
																																									line: 218, col: 27, offset: 6479,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 237, col: 10, offset: 6929},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 237, col: 10, offset: 6929},
																																							val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																							ignoreCase: false,
																																						},
																																						&charClassMatcher{
																																							pos:             position{line: 237, col: 22, offset: 6941},
																																							val:             "[\\r\\n]",
																																							chars:           []rune{'\r', '\n'},
																																							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																							ignoreCase:      false,
																																							inverted:        false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 119, col: 3, offset: 3725},
																																	label: "rest",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 119, col: 8, offset: 3730},
																																		expr: &seqExpr{
																																			pos: position{line: 119, col: 10, offset: 3732},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 119, col: 10, offset: 3732},
																																					label: "line",
																																					expr: &actionExpr{
																																						pos: position{line: 224, col: 17, offset: 6586},
																																						run: (*parser).callonGrammar455,
																																						expr: &seqExpr{
																																							pos: position{line: 224, col: 17, offset: 6586},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 232, col: 11, offset: 6842},
																																									label: "indent",
																																									expr: &zeroOrMoreExpr{
																																										pos: position{line: 232, col: 18, offset: 6849},
																																										expr: &charClassMatcher{
																																											pos:             position{line: 239, col: 16, offset: 6971},
																																											val:             "[ \\t]",
																																											chars:           []rune{' ', '\t'},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																								},
																																								&stateCodeExpr{
																																									pos: position{line: 233, col: 3, offset: 6864},
																																									run: (*parser).callonGrammar460,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 224, col: 24, offset: 6593},
																																									label: "text",
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 224, col: 29, offset: 6598},
																																										expr: &seqExpr{
																																											pos: position{line: 224, col: 31, offset: 6600},
																																											exprs: []interface{}{
																																												&notExpr{
																																													pos: position{line: 224, col: 31, offset: 6600},
																																													expr: &choiceExpr{
																																														pos: position{line: 237, col: 10, offset: 6929},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 237, col: 10, offset: 6929},
																																																val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																																ignoreCase: false,
																																															},
																																															&charClassMatcher{
																																																pos:             position{line: 237, col: 22, offset: 6941},
																																																val:             "[\\r\\n]",
																																																chars:           []rune{'\r', '\n'},
																																																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																																ignoreCase:      false,
																																																inverted:        false,
																																															},
																																														},
																																													},
																																												},
																																												&anyMatcher{
																																													line: 224, col: 36, offset: 6605,
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&choiceExpr{
																																									pos: position{line: 237, col: 10, offset: 6929},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 237, col: 10, offset: 6929},
																																											val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																											ignoreCase: false,
																																										},
																																										&charClassMatcher{
																																											pos:             position{line: 237, col: 22, offset: 6941},
																																											val:             "[\\r\\n]",
																																											chars:           []rune{'\r', '\n'},
																																											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																											ignoreCase:      false,
																																											inverted:        false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 120, col: 10, offset: 3759},
																																					run: (*parser).callonGrammar472,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 75, col: 14, offset: 2301},
																										run: (*parser).callonGrammar473,
																										expr: &seqExpr{
																											pos: position{line: 75, col: 14, offset: 2301},
																											exprs: []interface{}{
																												&zeroOrMoreExpr{
																													pos: position{line: 242, col: 6, offset: 7033},
																													expr: &seqExpr{
																														pos: position{line: 241, col: 14, offset: 7012},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 241, col: 14, offset: 7012},
																																expr: &charClassMatcher{
																																	pos:             position{line: 240, col: 15, offset: 6991},
																																	val:             "[ \\t\\f]",
																																	chars:           []rune{' ', '\t', '\f'},
																																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																	ignoreCase:      false,
																																	inverted:        false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 237, col: 10, offset: 6929},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 237, col: 10, offset: 6929},
																																		val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																		ignoreCase: false,
																																	},
																																	&charClassMatcher{
																																		pos:             position{line: 237, col: 22, offset: 6941},
																																		val:             "[\\r\\n]",
																																		chars:           []rune{'\r', '\n'},
																																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																		ignoreCase:      false,
																																		inverted:        false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 75, col: 16, offset: 2303},
																													label: "lines",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 75, col: 22, offset: 2309},
																														expr: &actionExpr{
																															pos: position{line: 224, col: 17, offset: 6586},
																															run: (*parser).callonGrammar484,
																															expr: &seqExpr{
																																pos: position{line: 224, col: 17, offset: 6586},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 232, col: 11, offset: 6842},
																																		label: "indent",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 232, col: 18, offset: 6849},
																																			expr: &charClassMatcher{
																																				pos:             position{line: 239, col: 16, offset: 6971},
																																				val:             "[ \\t]",
																																				chars:           []rune{' ', '\t'},
																																				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																				ignoreCase:      false,
																																				inverted:        false,
																																			},
																																		},
																																	},
																																	&stateCodeExpr{
																																		pos: position{line: 233, col: 3, offset: 6864},
																																		run: (*parser).callonGrammar489,
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 224, col: 24, offset: 6593},
																																		label: "text",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 224, col: 29, offset: 6598},
																																			expr: &seqExpr{
																																				pos: position{line: 224, col: 31, offset: 6600},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 224, col: 31, offset: 6600},
																																						expr: &choiceExpr{
																																							pos: position{line: 237, col: 10, offset: 6929},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 237, col: 10, offset: 6929},
																																									val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																									ignoreCase: false,
																																								},
																																								&charClassMatcher{
																																									pos:             position{line: 237, col: 22, offset: 6941},
																																									val:             "[\\r\\n]",
																																									chars:           []rune{'\r', '\n'},
																																									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																									ignoreCase:      false,
																																									inverted:        false,
																																								},
																																							},
																																						},
																																					},
																																					&anyMatcher{
																																						line: 224, col: 36, offset: 6605,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 237, col: 10, offset: 6929},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 237, col: 10, offset: 6929},
																																				val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																																				ignoreCase: false,
																																			},
																																			&charClassMatcher{
																																				pos:             position{line: 237, col: 22, offset: 6941},
																																				val:             "[\\r\\n]",
																																				chars:           []rune{'\r', '\n'},
																																				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																																				ignoreCase:      false,
																																				inverted:        false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 75, col: 14, offset: 2301},
											run: (*parser).callonGrammar501,
											expr: &seqExpr{
												pos: position{line: 75, col: 14, offset: 2301},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 242, col: 6, offset: 7033},
														expr: &seqExpr{
															pos: position{line: 241, col: 14, offset: 7012},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 241, col: 14, offset: 7012},
																	expr: &charClassMatcher{
																		pos:             position{line: 240, col: 15, offset: 6991},
																		val:             "[ \\t\\f]",
																		chars:           []rune{' ', '\t', '\f'},
																		basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																		ignoreCase:      false,
																		inverted:        false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 237, col: 10, offset: 6929},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 237, col: 10, offset: 6929},
																			val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																			ignoreCase: false,
																		},
																		&charClassMatcher{
																			pos:             position{line: 237, col: 22, offset: 6941},
																			val:             "[\\r\\n]",
																			chars:           []rune{'\r', '\n'},
																			basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																			ignoreCase:      false,
																			inverted:        false,
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 75, col: 16, offset: 2303},
														label: "lines",
														expr: &oneOrMoreExpr{
															pos: position{line: 75, col: 22, offset: 2309},
															expr: &actionExpr{
																pos: position{line: 224, col: 17, offset: 6586},
																run: (*parser).callonGrammar512,
																expr: &seqExpr{
																	pos: position{line: 224, col: 17, offset: 6586},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 232, col: 11, offset: 6842},
																			label: "indent",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 232, col: 18, offset: 6849},
																				expr: &charClassMatcher{
																					pos:             position{line: 239, col: 16, offset: 6971},
																					val:             "[ \\t]",
																					chars:           []rune{' ', '\t'},
																					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																					ignoreCase:      false,
																					inverted:        false,
																				},
																			},
																		},
																		&stateCodeExpr{
																			pos: position{line: 233, col: 3, offset: 6864},
																			run: (*parser).callonGrammar517,
																		},
																		&labeledExpr{
																			pos:   position{line: 224, col: 24, offset: 6593},
																			label: "text",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 224, col: 29, offset: 6598},
																				expr: &seqExpr{
																					pos: position{line: 224, col: 31, offset: 6600},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 224, col: 31, offset: 6600},
																							expr: &choiceExpr{
																								pos: position{line: 237, col: 10, offset: 6929},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 237, col: 10, offset: 6929},
																										val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																										ignoreCase: false,
																									},
																									&charClassMatcher{
																										pos:             position{line: 237, col: 22, offset: 6941},
																										val:             "[\\r\\n]",
																										chars:           []rune{'\r', '\n'},
																										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																										ignoreCase:      false,
																										inverted:        false,
																									},
																								},
																							},
																						},
																						&anyMatcher{
																							line: 224, col: 36, offset: 6605,
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 237, col: 10, offset: 6929},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 237, col: 10, offset: 6929},
																					val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
																					ignoreCase: false,
																				},
																				&charClassMatcher{
																					pos:             position{line: 237, col: 22, offset: 6941},
																					val:             "[\\r\\n]",
																					chars:           []rune{'\r', '\n'},
																					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																					ignoreCase:      false,
																					inverted:        false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 6, offset: 7033},
							expr: &seqExpr{
								pos: position{line: 241, col: 14, offset: 7012},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 241, col: 14, offset: 7012},
										expr: &charClassMatcher{
											pos:             position{line: 240, col: 15, offset: 6991},
											val:             "[ \\t\\f]",
											chars:           []rune{' ', '\t', '\f'},
											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
											ignoreCase:      false,
											inverted:        false,
										},
									},
									&choiceExpr{
										pos: position{line: 237, col: 10, offset: 6929},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 237, col: 10, offset: 6929},
												val:        "\r\n\n\n\n\n\n\n\n\n\n\n",
												ignoreCase: false,
											},
											&charClassMatcher{
												pos:             position{line: 237, col: 22, offset: 6941},
												val:             "[\\r\\n]",
												chars:           []rune{'\r', '\n'},
												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
												ignoreCase:      false,
												inverted:        false,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 24, col: 36, offset: 652},
							expr: &charClassMatcher{
								pos:             position{line: 240, col: 15, offset: 6991},
								val:             "[ \\t\\f]",
								chars:           []rune{' ', '\t', '\f'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&notExpr{
							pos: position{line: 244, col: 8, offset: 7052},
							expr: &anyMatcher{
								line: 244, col: 9, offset: 7053,
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onGrammar3() error {
	return initState(c)

}

func (p *parser) callonGrammar3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar3()
}

func (c *current) onGrammar26(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar26(stack["indent"])
}

func (c *current) onGrammar21(indent, name interface{}) (interface{}, error) {
	return semicolonDirectiveLeadAction(c, toIfaceSlice(name))

}

func (p *parser) callonGrammar21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar21(stack["indent"], stack["name"])
}

func (c *current) onGrammar43(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar43() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar43(stack["indent"])
}

func (c *current) onGrammar38(indent, name interface{}) (interface{}, error) {
	return bracketDirectiveLeadAction(c, toIfaceSlice(name))

}

func (p *parser) callonGrammar38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar38(stack["indent"], stack["name"])
}

func (c *current) onGrammar55(lead interface{}) error {
	// store the current directive's indentation
	return directiveLeadState(c)

}

func (p *parser) callonGrammar55() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar55(stack["lead"])
}

func (c *current) onGrammar17(lead interface{}) (interface{}, error) {
	return lead, nil

}

func (p *parser) callonGrammar17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar17(stack["lead"])
}

func (c *current) onGrammar60(text interface{}) (interface{}, error) {
	return restOfLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar60(stack["text"])
}

func (c *current) onGrammar82(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar82() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar82(stack["indent"])
}

func (c *current) onGrammar77(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar77(stack["indent"], stack["text"])
}

func (c *current) onGrammar94(line interface{}) (bool, error) {
	// matches only if the indentation is bigger than the directive's lead line.
	return directiveContentPredicate(c, line.(indentedText))

}

func (p *parser) callonGrammar94() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar94(stack["line"])
}

func (c *current) onGrammar57(first, rest interface{}) (interface{}, error) {
	return directiveContentAction(c, first.(string), toIfaceSlice(rest))

}

func (p *parser) callonGrammar57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar57(stack["first"], stack["rest"])
}

func (c *current) onGrammar7(lead, content interface{}) (interface{}, error) {
	return directiveAction(c, lead.(*ast.Directive), content.(*ast.Paragraph))

}

func (p *parser) callonGrammar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar7(stack["lead"], stack["content"])
}

func (c *current) onGrammar113(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar113() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar113(stack["indent"])
}

func (c *current) onGrammar108(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar108(stack["indent"], stack["text"])
}

func (c *current) onGrammar131(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar131() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar131(stack["indent"])
}

func (c *current) onGrammar126(indent, underline interface{}) (interface{}, error) {
	return underlineLineAction(c, toIfaceSlice(underline))

}

func (p *parser) callonGrammar126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar126(stack["indent"], stack["underline"])
}

func (c *current) onGrammar138(header, underline interface{}) (bool, error) {
	return underlineHeaderPredicate(c, header.(indentedText), underline.(indentedText))

}

func (p *parser) callonGrammar138() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar138(stack["header"], stack["underline"])
}

func (c *current) onGrammar139(header, underline interface{}) error {
	// store the current section's name in the state.
	return underlineHeaderState(c, header.(indentedText))

}

func (p *parser) callonGrammar139() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar139(stack["header"], stack["underline"])
}

func (c *current) onGrammar98(header, underline interface{}) (interface{}, error) {
	return header.(indentedText), nil

}

func (p *parser) callonGrammar98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar98(stack["header"], stack["underline"])
}

func (c *current) onGrammar144() (bool, error) {
	return underlineSectionContentDefinitionPredicate(c)
}

func (p *parser) callonGrammar144() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar144()
}

func (c *current) onGrammar164(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar164() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar164(stack["indent"])
}

func (c *current) onGrammar159(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar159(stack["indent"], stack["text"])
}

func (c *current) onGrammar182(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar182() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar182(stack["indent"])
}

func (c *current) onGrammar177(indent, underline interface{}) (interface{}, error) {
	return underlineLineAction(c, toIfaceSlice(underline))

}

func (p *parser) callonGrammar177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar177(stack["indent"], stack["underline"])
}

func (c *current) onGrammar189(header, underline interface{}) (bool, error) {
	return underlineHeaderPredicate(c, header.(indentedText), underline.(indentedText))

}

func (p *parser) callonGrammar189() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar189(stack["header"], stack["underline"])
}

func (c *current) onGrammar190(header, underline interface{}) error {
	// store the current section's name in the state.
	return underlineHeaderState(c, header.(indentedText))

}

func (p *parser) callonGrammar190() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar190(stack["header"], stack["underline"])
}

func (c *current) onGrammar149(header, underline interface{}) (interface{}, error) {
	return header.(indentedText), nil

}

func (p *parser) callonGrammar149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar149(stack["header"], stack["underline"])
}

func (c *current) onGrammar206(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar206() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar206(stack["indent"])
}

func (c *current) onGrammar208() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonGrammar208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar208()
}

func (c *current) onGrammar225(text interface{}) (interface{}, error) {
	return definitionTypeAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar225(stack["text"])
}

func (c *current) onGrammar243(indent, subject, typ interface{}) error {
	// store the indent of the lead definition line
	return firstDefinitionLineState(c)

}

func (p *parser) callonGrammar243() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar243(stack["indent"], stack["subject"], stack["typ"])
}

func (c *current) onGrammar201(indent, subject, typ interface{}) (interface{}, error) {
	var typeStr string
	if typ != nil {
		typeStr = typ.(string)
	}
	return firstDefinitionLineAction(c, subject.(string), typeStr)

}

func (p *parser) callonGrammar201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar201(stack["indent"], stack["subject"], stack["typ"])
}

func (c *current) onGrammar266(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar266() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar266(stack["indent"])
}

func (c *current) onGrammar261(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar261(stack["indent"], stack["text"])
}

func (c *current) onGrammar278(line interface{}) (bool, error) {
	return definitionParagraphPredicate(c, line.(indentedText))

}

func (p *parser) callonGrammar278() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar278(stack["line"])
}

func (c *current) onGrammar248(lines interface{}) (interface{}, error) {
	return definitionParagraphAction(c, toIfaceSlice(lines))

}

func (p *parser) callonGrammar248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar248(stack["lines"])
}

func (c *current) onGrammar245(content interface{}) (interface{}, error) {
	return definitionContentAction(c, toIfaceSlice(content))

}

func (p *parser) callonGrammar245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar245(stack["content"])
}

func (c *current) onGrammar191(first, content interface{}) (interface{}, error) {
	return definitionAction(c, first.(*ast.Definition), content.([]ast.Node))

}

func (p *parser) callonGrammar191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar191(stack["first"], stack["content"])
}

func (c *current) onGrammar142(content interface{}) (interface{}, error) {
	return underlineSectionContentAction(c, toIfaceSlice(content))

}

func (p *parser) callonGrammar142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar142(stack["content"])
}

func (c *current) onGrammar281() (bool, error) {
	return underlineSectionContentDefinitionPredicate(c)
}

func (p *parser) callonGrammar281() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar281()
}

func (c *current) onGrammar301(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar301() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar301(stack["indent"])
}

func (c *current) onGrammar296(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar296(stack["indent"], stack["text"])
}

func (c *current) onGrammar319(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar319() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar319(stack["indent"])
}

func (c *current) onGrammar314(indent, underline interface{}) (interface{}, error) {
	return underlineLineAction(c, toIfaceSlice(underline))

}

func (p *parser) callonGrammar314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar314(stack["indent"], stack["underline"])
}

func (c *current) onGrammar326(header, underline interface{}) (bool, error) {
	return underlineHeaderPredicate(c, header.(indentedText), underline.(indentedText))

}

func (p *parser) callonGrammar326() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar326(stack["header"], stack["underline"])
}

func (c *current) onGrammar327(header, underline interface{}) error {
	// store the current section's name in the state.
	return underlineHeaderState(c, header.(indentedText))

}

func (p *parser) callonGrammar327() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar327(stack["header"], stack["underline"])
}

func (c *current) onGrammar286(header, underline interface{}) (interface{}, error) {
	return header.(indentedText), nil

}

func (p *parser) callonGrammar286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar286(stack["header"], stack["underline"])
}

func (c *current) onGrammar347(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar347() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar347(stack["indent"])
}

func (c *current) onGrammar342(indent, text interface{}) (interface{}, error) {
	return firstDoctestLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar342(stack["indent"], stack["text"])
}

func (c *current) onGrammar362(first interface{}) error {
	// store the current doctest's indentation
	return doctestFirstLineState(c, first.(indentedText))

}

func (p *parser) callonGrammar362() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar362(stack["first"])
}

func (c *current) onGrammar372(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar372() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar372(stack["indent"])
}

func (c *current) onGrammar367(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar367(stack["indent"], stack["text"])
}

func (c *current) onGrammar384(line interface{}) (bool, error) {
	// matches only if the indentation of the line is the same as the
	// first line in the doctest.
	return doctestNextLinePredicate(c, line.(indentedText))

}

func (p *parser) callonGrammar384() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar384(stack["line"])
}

func (c *current) onGrammar339(first, rest interface{}) (interface{}, error) {
	return doctestLinesAction(c, first.(indentedText), toIfaceSlice(rest))

}

func (p *parser) callonGrammar339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar339(stack["first"], stack["rest"])
}

func (c *current) onGrammar329(doctest interface{}) (interface{}, error) {
	return doctest, nil

}

func (p *parser) callonGrammar329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar329(stack["doctest"])
}

func (c *current) onGrammar404(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar404() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar404(stack["indent"])
}

func (c *current) onGrammar399(indent, name interface{}) (interface{}, error) {
	return semicolonDirectiveLeadAction(c, toIfaceSlice(name))

}

func (p *parser) callonGrammar399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar399(stack["indent"], stack["name"])
}

func (c *current) onGrammar421(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar421() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar421(stack["indent"])
}

func (c *current) onGrammar416(indent, name interface{}) (interface{}, error) {
	return bracketDirectiveLeadAction(c, toIfaceSlice(name))

}

func (p *parser) callonGrammar416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar416(stack["indent"], stack["name"])
}

func (c *current) onGrammar433(lead interface{}) error {
	// store the current directive's indentation
	return directiveLeadState(c)

}

func (p *parser) callonGrammar433() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar433(stack["lead"])
}

func (c *current) onGrammar395(lead interface{}) (interface{}, error) {
	return lead, nil

}

func (p *parser) callonGrammar395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar395(stack["lead"])
}

func (c *current) onGrammar438(text interface{}) (interface{}, error) {
	return restOfLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar438(stack["text"])
}

func (c *current) onGrammar460(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar460() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar460(stack["indent"])
}

func (c *current) onGrammar455(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar455(stack["indent"], stack["text"])
}

func (c *current) onGrammar472(line interface{}) (bool, error) {
	// matches only if the indentation is bigger than the directive's lead line.
	return directiveContentPredicate(c, line.(indentedText))

}

func (p *parser) callonGrammar472() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar472(stack["line"])
}

func (c *current) onGrammar435(first, rest interface{}) (interface{}, error) {
	return directiveContentAction(c, first.(string), toIfaceSlice(rest))

}

func (p *parser) callonGrammar435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar435(stack["first"], stack["rest"])
}

func (c *current) onGrammar385(lead, content interface{}) (interface{}, error) {
	return directiveAction(c, lead.(*ast.Directive), content.(*ast.Paragraph))

}

func (p *parser) callonGrammar385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar385(stack["lead"], stack["content"])
}

func (c *current) onGrammar489(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar489() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar489(stack["indent"])
}

func (c *current) onGrammar484(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar484(stack["indent"], stack["text"])
}

func (c *current) onGrammar473(lines interface{}) (interface{}, error) {
	return paragraphAction(c, toIfaceSlice(lines))

}

func (p *parser) callonGrammar473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar473(stack["lines"])
}

func (c *current) onGrammar279(content interface{}) (interface{}, error) {
	return underlineSectionContentAction(c, toIfaceSlice(content))

}

func (p *parser) callonGrammar279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar279(stack["content"])
}

func (c *current) onGrammar95(header, content interface{}) (interface{}, error) {
	return underlineSectionAction(c, header.(indentedText), content.([]ast.Node))

}

func (p *parser) callonGrammar95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar95(stack["header"], stack["content"])
}

func (c *current) onGrammar517(indent interface{}) error {
	return indentState(c, toIfaceSlice(indent))

}

func (p *parser) callonGrammar517() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar517(stack["indent"])
}

func (c *current) onGrammar512(indent, text interface{}) (interface{}, error) {
	return nonBlankLineAction(c, toIfaceSlice(text))

}

func (p *parser) callonGrammar512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar512(stack["indent"], stack["text"])
}

func (c *current) onGrammar501(lines interface{}) (interface{}, error) {
	return paragraphAction(c, toIfaceSlice(lines))

}

func (p *parser) callonGrammar501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar501(stack["lines"])
}

func (c *current) onGrammar1(items interface{}) (interface{}, error) {
	return grammarAction(c, toIfaceSlice(items))

}

func (p *parser) callonGrammar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar1(stack["items"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
		emptyState: make(storeDict),
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}

	// emptyState contains an empty storeDict, which is used to optimize cloneState if global "state" store is not used.
	emptyState storeDict
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	if len(p.cur.state) == 0 {
		if len(p.emptyState) > 0 {
			p.emptyState = make(storeDict)
		}
		return p.emptyState
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	if cur < 128 {
		if chr.basicLatinChars[cur] != chr.inverted {
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
