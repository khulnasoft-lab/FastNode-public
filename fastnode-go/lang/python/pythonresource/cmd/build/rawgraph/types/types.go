package types

import (
	"encoding/json"
	"fmt"
	"io"
)

// NodeID is just an identifier used for identifying a node during exploration
type NodeID uint64

// TopLevelName represents a top-level symbol
type TopLevelName string

// ArgDetails represents information about a function argument
type ArgDetails struct {
	Name           string  `json:"name"`
	DefaultType    string  `json:"default_type"`
	DefaultValue   *string `json:"default_value"`
	AnnotationType string  `json:"annotation_type"`
}

// NodeData represents explored data for a single node
type NodeData struct {
	ID              NodeID            `json:"id"`
	CanonicalName   string            `json:"canonical_name"`
	TopLevelName    TopLevelName      `json:"package"`
	Reference       string            `json:"reference"`
	Classification  string            `json:"classification"`
	TypeID          NodeID            `json:"type_id"`
	Bases           []NodeID          `json:"bases"`
	Children        map[string]NodeID `json:"members"`
	Docstring       string            `json:"docstring"`
	Repr            string            `json:"repr"`
	Str             string            `json:"str"`
	Source          []string          `json:"source"`
	SourceBeginLine uint64            `json:"source_begin_line"`
	SourcePath      string            `json:"source_path"`
	ArgSpec         *struct {
		Args   []ArgDetails `json:"args"`
		Kwonly []ArgDetails `json:"kwonly"`
		Vararg string       `json:"vararg"`
		Kwarg  string       `json:"kwarg"`
	} `json:"argspec"`
}

// Graph represents the explored graph for a given top-level
type Graph map[NodeID]*NodeData

// PipMetaData encapsulates a pip distribution (package) and version
type PipMetaData struct {
	PipPackage string `json:"pip-package"`
	PipVersion string `json:"pip-version"`
}

// ExplorationData represents the data generated by fastnode-python/fastnode/pkgexploration/explore.py
type ExplorationData struct {
	PipMetaData
	TopLevels map[TopLevelName]Graph  `json:"shards"`
	RootIDs   map[TopLevelName]NodeID `json:"rootIDs"`
}

// String implements fmt.Stringer
func (d *NodeData) String() string {
	return fmt.Sprintf("%s node %s (%d)", d.Classification, d.CanonicalName, d.ID)
}

// Encode serializes the ExplorationData to an io.Writer
func (e ExplorationData) Encode(w io.Writer) error {
	return json.NewEncoder(w).Encode(e)
}

// Decode deserializes an ExplorationData from an io.Reader
func (e *ExplorationData) Decode(r io.Reader) error {
	return json.NewDecoder(r).Decode(e)
}

// Decode ...
func (p *PipMetaData) Decode(r io.Reader) error {
	return json.NewDecoder(r).Decode(p)
}

// DerivedDefaultValue returns the default value with a special case for the empty string (rep = "\"\"" for it)
// That allows to differentiate an empty string as default value from no default value.
func (a ArgDetails) DerivedDefaultValue() string {
	if a.DefaultValue == nil {
		return ""
	}
	if *a.DefaultValue == "" {
		return "\"\""
	}
	return *a.DefaultValue

}
