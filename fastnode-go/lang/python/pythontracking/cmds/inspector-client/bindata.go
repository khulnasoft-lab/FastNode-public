// Code generated by go-bindata.
// sources:
// templates/event-detail.html
// templates/event.html
// templates/listings-grouped.html
// templates/listings.html
// templates/partials/selector.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEventDetailHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5d\x6f\xdb\x36\x17\xbe\xcf\xaf\xe0\xab\x14\x88\x7d\x21\xa9\x8e\xed\xbc\xa9\x43\xeb\x62\x69\x07\x14\xd8\x8a\x61\x28\x76\x33\xec\x82\x12\x8f\x2d\x26\x14\xc9\x91\x94\x63\x4f\xf0\x7f\x1f\xa8\x2f\x4b\x8a\x95\x36\x58\xb1\x8b\xd5\x37\xe1\xc7\x39\xcf\xf9\x7a\x78\x48\x05\xa7\x36\xe3\xd1\x05\x4e\x81\xd0\xe8\x02\x21\x84\xb0\x49\x34\x53\x16\xd9\x83\x82\xb5\x67\x61\x6f\xc3\x07\xb2\x23\xd5\xaa\x87\x8c\x4e\xd6\x5e\x6a\xad\x32\xab\x30\x4c\x24\x85\xe0\xe1\xcf\x1c\xf4\x21\x48\x64\x16\x56\x43\xff\x3a\x98\x05\x8b\x20\x63\x22\x78\x30\x5e\x84\xc3\x4a\xf7\xf5\xf0\x19\xd9\x27\x54\x04\xb1\x94\xd6\x58\x4d\x94\x9b\x38\x33\xed\x42\x38\x0f\xe6\xc1\x32\x7c\x30\xa7\xa5\x31\xb3\x9c\x89\x47\xa4\x81\xaf\x3d\x63\x0f\x1c\x4c\x0a\x60\xbd\xae\x17\x89\x31\x1e\x4a\x35\x6c\x5e\x6f\x3f\x31\x43\x07\x1c\x58\x84\x43\x67\xb4\x09\xdb\x59\xad\xc6\xee\x17\x24\x52\x58\xc2\x04\x68\x7f\xc3\x73\x46\x51\xd1\x6e\xb9\x5f\x46\xf4\x96\x09\x9f\xc3\xc6\xae\xd0\xfc\xad\xda\xdf\x9d\xdb\xd6\x6c\x9b\x3e\xdb\x3f\x5e\xb4\x43\xa5\x01\x05\x9c\x09\xf0\x45\x9e\xc5\xa0\xcd\xc0\xca\x86\x4b\x62\x57\xc8\x59\xe9\xe3\x53\x66\x14\x27\x87\x15\x8a\xb9\x4c\x1e\xfb\x7b\xb1\xd4\x14\x74\x63\x7b\xa6\xf6\xc8\x48\xce\x28\xba\xa4\x94\xf6\x25\x15\xa1\x94\x89\x6d\x23\xba\x7c\x39\x8a\x67\xdb\xae\x2a\x3e\xe1\x6c\x2b\x56\xa8\x94\xe9\xc6\x38\x1e\x22\x19\x04\x99\x48\x2e\xf5\x0a\x5d\xfe\x7f\xf9\x8e\xc6\xcb\xaf\xc3\x30\x8a\x88\x11\x98\xdb\xdb\xdb\x31\x0c\x77\x1a\x06\x5a\x2f\x25\xf2\x29\x65\x16\x7c\xa3\x48\x02\x2b\xa7\x3f\xea\x9a\x06\x23\xf9\x0e\x86\x1c\x69\x3c\x9a\x6d\xc8\xed\x6c\x33\xaa\x9d\x8b\x2f\xe8\xd3\xf9\x9c\xce\xe9\xa8\xbe\x01\x0e\x89\x7d\xa6\xbd\x91\xc2\xfa\x4f\x50\xd5\x2e\x96\x9c\xde\xa1\x98\x24\x8f\x5b\x2d\x73\x41\xfd\x16\x7b\x06\xd7\x9b\x71\xdf\x92\x5c\x1b\xa9\x07\xc8\x67\x60\x60\xf1\x6e\xf1\x76\x7e\x0e\xc6\x9e\xf5\xcb\xb0\xbf\x60\x85\x66\x8b\x21\xa5\x6a\x46\xae\xd0\x8d\xda\xa3\xff\xb1\x4c\x49\x6d\x89\x38\x4b\x2c\x4b\x03\xa5\xa5\xf2\x05\xc9\x86\x45\x6d\xbc\xba\xb9\xb9\x19\x6a\xe2\xb0\x73\xce\xb1\x65\x96\x43\xf4\x61\x07\xc2\x22\x1f\x15\x45\x50\x0e\x83\x9f\xc1\x18\xb2\x85\x8f\xef\x8f\x47\xe4\x23\x26\x8c\x82\xc4\x4a\x8d\xc3\x4a\xfe\x02\x87\x55\x37\xc6\xb1\xa4\x87\xe8\x02\x53\xb6\x43\x09\x27\xc6\xac\xbd\x41\xd7\xf0\x6a\x43\x1d\x09\x2d\x9f\xbc\x53\x9b\xc1\xe9\x75\x6d\x7f\xd2\x9a\xff\x7c\x50\x70\x3c\x4e\x71\x98\x5e\x47\xbd\xb8\xb0\x25\x31\x87\x06\xa8\x9c\x78\x7d\x89\x4a\xaa\x72\x6b\xb8\x5e\x14\x9a\x88\x2d\xa0\x37\x2e\x6d\x68\xb5\x46\xc1\x2f\x5a\x2a\xd0\x96\x81\x39\x1e\xcf\xc0\xe8\xe7\x18\xd5\x06\x6d\x5c\x68\x0b\xe0\x45\x45\x51\xe2\x06\x9f\x48\x06\xc7\x23\x0e\x2d\x1d\xd5\x6e\x65\x7f\x23\x3c\x1f\x15\xc6\xe1\x39\x07\x8a\x02\x04\xfd\xe7\xde\xfe\xc4\x04\xbc\xec\x23\x26\xf5\x5d\x73\x59\x14\x81\x13\x77\x6c\x70\x61\xd6\x45\x72\x4b\x9f\xca\x6e\xe4\x02\x20\xd1\x6b\x82\xc0\xe1\x99\x12\xe1\xb0\x2c\x68\x4d\x98\x90\xb2\xdd\xd7\x70\xe7\x47\xc6\xc1\xf4\x99\x82\xd3\x45\xf4\x43\xbe\xd9\x80\xee\x72\xda\x09\x8a\xb2\x36\x08\xc7\xb9\xb5\x52\xd4\x77\x6b\x35\xf1\x1a\x13\xb1\x15\x28\xb6\xc2\x57\x9a\x65\x44\x1f\x3c\xc4\xa8\x63\xb5\x3a\xf8\x71\x89\xe9\xc7\x56\x78\xd1\xbd\x54\x07\x1c\x56\xaa\x11\x0e\xd3\xc5\x6b\xdc\xee\x1d\x17\xee\x67\xd4\xbf\x1d\xd0\x18\x2b\x0d\x2e\xd5\x55\x18\x2e\xc1\x6e\xe1\x84\x70\x32\x33\x02\xb8\x18\x02\x7e\xe3\x93\xf3\x61\xaf\xb4\x3b\x3d\xff\x81\x83\xf3\x45\x2e\xb6\x8b\xe9\x22\xfa\xb5\xb9\xa9\x76\xce\x83\xd5\xa9\xf2\x27\x2f\xbf\x69\xa2\x77\x84\x7f\x96\x65\xa2\x51\xcd\x63\x97\xf9\xf7\x60\x09\xe3\x41\xe3\x4c\x9d\x8d\xef\xa2\x10\x6d\x86\x76\x84\x57\x4c\x7c\x31\x2b\xc1\xbd\x14\xc6\x32\x9b\x83\xb0\x43\xae\xe2\x74\x19\x75\xb6\x71\x98\x2e\xff\xad\x5a\x3a\xef\xbf\x9b\x82\xf5\xb5\xbb\x2d\xf2\xab\xba\xa5\x7b\x65\x13\x0d\xa4\x6c\xc4\x9a\x3c\xd5\x7d\xd8\x43\xe5\x43\x66\xed\xb5\x2f\x58\x21\x05\xdc\x75\x6e\xa8\x53\xf3\x6c\x20\xce\xd0\x88\x09\x0a\x7b\xa0\xee\x76\x28\xe9\xf4\xf1\x34\xef\xf3\xc5\x9d\xfe\xa2\xe8\xca\x77\xae\x94\x61\x1f\xa8\xfb\x77\x4f\x7a\xa4\x97\x77\xf3\x53\x27\xa4\xf9\xd3\xfd\x3c\x7c\x33\xd9\xe4\x22\xb1\x4c\x0a\x34\x99\x76\x9e\x7b\x6f\x26\x57\xbf\x53\x62\x89\x6f\xe5\x76\xeb\xd2\x61\xa5\xe4\x96\x29\xef\x8f\xab\x69\x50\x8f\x27\xd3\x52\xfc\x38\xad\x91\xbc\xcb\xe1\x7d\x36\x0d\x12\xce\x92\xc7\xd6\x46\xcf\xc4\x8e\x68\x04\x1c\xad\x11\x95\x49\x9e\xb9\xcc\x26\x1a\x88\x85\x0f\x1c\xdc\x6c\x72\xd5\xa4\xf7\x6a\x7a\x7a\x6d\x02\x0f\xca\x16\x89\xd6\xa5\xc1\x4e\xdd\xa6\x6e\x63\xd2\x11\x6d\x61\x1d\x9b\x02\xa2\x14\x08\x7a\x9f\x32\x4e\x27\xc0\xfb\x88\xd5\x4b\xff\xac\x2e\xec\x21\xb9\x97\x59\x46\x04\x9d\x94\xd7\xb5\x37\x6a\x41\x43\x26\x77\x30\xb0\x70\x9c\xde\x5d\x9c\x3e\xc8\x71\x58\xbf\x6c\xc3\xea\xbf\x0f\x7f\x07\x00\x00\xff\xff\xc1\x5a\xfb\x8a\x85\x10\x00\x00")

func templatesEventDetailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEventDetailHtml,
		"templates/event-detail.html",
	)
}

func templatesEventDetailHtml() (*asset, error) {
	bytes, err := templatesEventDetailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/event-detail.html", size: 4229, mode: os.FileMode(420), modTime: time.Unix(1527870654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEventHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xd1\x72\xe3\x26\x14\x7d\xf7\x57\x50\xa5\x0f\xed\x83\x60\x1d\x27\xa9\x57\x8b\x35\xd3\x76\x3b\xd3\xcc\x6c\x3b\x9d\x9d\x6e\xdf\x11\x5c\x59\x38\x08\x28\x60\xc7\xae\x46\xff\xde\xc1\xb2\x1d\x5b\xb6\xb2\xf1\xac\x5e\x02\xdc\x7b\xcf\x39\x17\x0e\xc4\xb4\x0a\xb5\xca\x47\xb4\x02\x26\xf2\x11\x42\x08\x51\xcf\x9d\xb4\x01\x85\x8d\x85\x59\x12\x60\x1d\xc8\x82\xad\x58\xb7\x9a\x20\xef\xf8\x2c\xa9\x42\xb0\x3e\x23\x84\x1b\x01\x78\xf1\xef\x12\xdc\x06\x73\x53\x93\x6e\x98\xde\xe2\x31\xbe\xc3\xb5\xd4\x78\xe1\x93\x9c\x92\xae\xf6\x7a\xf8\x9a\xad\xb9\xd0\xb8\x30\x26\xf8\xe0\x98\x8d\x93\x48\x73\x58\x20\x13\x3c\xc1\xf7\x64\xe1\x5f\x96\x86\x68\x95\xd4\x4f\xc8\x81\x9a\x25\x3e\x6c\x14\xf8\x0a\x20\x24\xc7\x2a\xb8\xf7\x09\xaa\x1c\x94\xd7\xf3\x73\xdf\x17\x10\xc1\x72\x4a\x22\xe9\xbe\xed\xc8\xda\x8d\xe3\x87\xb9\xd1\x81\x49\x0d\x2e\x2d\xd5\x52\x0a\xd4\x1c\x42\xf1\xab\x99\x9b\x4b\x9d\x2a\x28\x43\x86\x26\xef\xec\xfa\xc3\xa5\xb0\x93\xf3\xea\x2c\xde\x8e\x0e\x43\xeb\x00\x61\x25\x35\xa4\x7a\x59\x17\xe0\x7c\x8f\xa5\x54\x86\x85\x0c\x45\x96\x53\x7c\x21\xbd\x55\x6c\x93\xa1\x42\x19\xfe\x74\x1a\x2b\x8c\x13\xe0\xf6\xdc\x63\xbb\x46\xde\x28\x29\xd0\x8d\x10\xe2\x34\xd3\x32\x21\xa4\x9e\xef\x53\xef\x5f\xef\xe2\x2c\x1c\x4f\x25\x65\x4a\xce\x75\x86\xb6\x39\xc7\x3d\x0e\xb7\xc8\x7a\x4d\x72\xa3\x8c\xcb\xd0\xcd\x4f\xf7\xef\x45\x71\xff\x36\x0c\x6f\x99\x1e\x80\x99\x4e\xa7\x43\x18\xf1\x36\xf4\xaa\x5e\xdb\xc8\xe7\x4a\x06\x48\xbd\x65\x1c\xb2\x58\x3f\x28\xcd\x81\x37\x6a\x05\x7d\x8f\xec\x15\x8d\x4b\x36\x1d\x97\x83\xd5\x4b\xfd\x95\x7a\x31\x99\x88\x89\x18\xac\xf7\xa0\x80\x87\xb3\xea\xd2\xe8\x90\x3e\x43\x77\x76\x85\x51\xe2\x03\x2a\x18\x7f\x9a\x3b\xb3\xd4\x22\x3d\x60\x8f\xe1\xb6\x1c\xd6\xc6\x97\xce\x1b\xd7\x43\xbe\x00\x03\x77\xef\xef\xde\x4d\x2e\xc1\x84\x8b\xba\xbc\xfc\x0f\x32\x34\xbe\xeb\x5b\x6a\xe7\xc8\x0c\x3d\xd8\x35\xfa\x4e\xd6\xd6\xb8\xc0\xf4\x45\x63\x05\x81\xad\x33\x36\xd5\xac\xee\x1f\xea\x5e\xd5\xc3\xc3\x43\xbf\x92\x92\xa3\x7b\x4e\x83\x0c\x0a\xf2\xdf\x56\xa0\x03\x4a\x51\xd3\xe0\x47\x5d\x1a\xfc\x07\x78\xcf\xe6\xf0\xf8\xb1\x6d\x51\x8a\xa4\xf6\x16\x78\x30\x8e\x92\x2e\x7d\x44\x49\xf7\x18\xd3\xc2\x88\x4d\x3e\xa2\x42\xae\x10\x57\xcc\xfb\x59\xd2\x7b\x34\x92\x1d\xcf\x51\x86\x33\xcf\xc9\xcb\x2b\x43\xab\xdb\x1d\xfd\x0f\x7b\xf6\xed\x14\xff\xbd\xb1\xd0\xb6\x3f\x52\x52\xdd\xe6\x27\xbd\xd1\xc0\x0a\x05\x7b\xb4\xed\x24\x39\xcd\xe8\xb2\x3a\x6d\xfd\xf5\xa6\x71\x4c\xcf\x01\x7d\x1f\xb7\x0e\x65\x33\x84\xff\x72\xc6\x82\x0b\x12\x7c\xdb\x5e\x80\x71\xe7\x18\x5d\x40\xec\x25\x1c\x0e\x21\xc9\x9b\x66\x8b\x8b\xff\x64\x35\xb4\x2d\x25\x41\x0c\x56\x1f\x72\xff\x61\x6a\x39\x98\x4c\xc9\x25\x01\x4d\x03\x5a\x7c\xbb\xda\x4f\x52\xc3\xeb\x1a\x29\xdb\xfd\xbf\xb9\x69\x1a\xfc\xeb\xf6\x2a\xfc\xac\x79\x65\x5c\xdb\xc6\x66\x71\x44\x88\xd2\x59\x7e\x8d\xfc\x2b\x65\x7e\x84\xc0\xa4\xf2\x6f\x54\xda\x34\x10\xfd\xd3\x15\x7d\xf9\xfc\x09\x75\xa6\xfa\xf2\xf9\x11\x9d\x99\x3b\xc9\x7f\x07\x07\x57\xcb\x27\x17\xbc\x45\xc9\xd6\x89\x3b\xbb\x13\x21\x57\x5f\x75\xfe\xc9\xad\x51\x69\x2d\xd2\x69\xcf\xc8\xd4\x3a\x88\xdb\xfc\xcb\xb2\x2c\xc1\xc5\x8d\x8e\x0b\x2f\x08\x47\x34\xdd\xf0\xf0\x67\x77\x31\x49\xf7\xdb\xe9\xff\x00\x00\x00\xff\xff\x93\x82\x0b\xc4\x43\x09\x00\x00")

func templatesEventHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEventHtml,
		"templates/event.html",
	)
}

func templatesEventHtml() (*asset, error) {
	bytes, err := templatesEventHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/event.html", size: 2371, mode: os.FileMode(420), modTime: time.Unix(1527870654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesListingsGroupedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xe3\x38\x0c\xbe\xef\x53\x10\x6e\x0f\xbb\x87\x48\x68\xba\xdb\x43\xaa\xf8\xd4\xed\x20\x40\x7b\xe9\xb4\x0f\xa0\x48\x4c\xac\x54\x96\x3c\x12\x1b\x34\x30\xf2\xee\x03\x5b\xf9\x8f\x93\x74\x66\x72\x08\x2c\x92\xdf\x47\x8a\x9f\x28\x89\x82\x4a\x9b\xff\x05\x00\x20\x0a\x94\x3a\x7d\xb6\xcb\xa8\x82\xa9\x08\x68\x51\xe1\x30\x23\xfc\x24\x3e\x93\x73\x99\xac\x19\xc4\xa0\x86\x59\x41\x54\xc5\x01\xe7\xca\x6b\x64\xb3\x1f\x1f\x18\x16\x4c\xf9\x92\xa7\xcf\x5e\x9f\xdd\xb0\x7f\x59\x69\x1c\x9b\xc5\x2c\x17\x3c\x61\x7f\x2f\x45\x29\x3f\x95\x76\x6c\xec\x3d\x45\x0a\xb2\x6a\x16\x4d\xaa\x8d\x81\xdf\xb2\x5b\xf6\x1f\x9f\xc5\xad\xe9\x5c\x6a\x6b\xdc\x3b\x04\xb4\xc3\x2c\xd2\xc2\x62\x2c\x10\x29\xdb\xad\x44\xc5\x98\x41\x11\x70\xf2\xeb\x35\xa8\x78\x58\x44\x43\x96\x0b\xde\x24\xdd\xa9\x81\x0c\x59\xcc\x47\x2e\x56\xa8\xc8\x07\xc1\x93\x21\xa9\xc1\xb7\x72\x88\xb1\xd7\x8b\x1d\x9c\x36\x73\x50\x56\xc6\x38\xcc\x94\x77\x24\x8d\xc3\x90\x6d\xfd\x49\xcc\x9b\x5d\xe2\xe2\x66\xdf\x5d\xd7\xec\x3b\xda\xd6\xb9\x5c\x1e\x78\xe0\xba\x44\x92\x30\x18\x02\x7b\x32\x91\x8c\x9b\x46\xf6\x8c\x24\xb5\x24\x79\x14\x6c\x26\x29\x9c\x3d\x4a\x63\x3f\x02\x1e\x04\xa4\x52\xfa\x79\x5d\xa7\xa8\xd7\x45\x85\xcb\x25\xe0\x1c\x1d\x45\x98\xf8\x00\x6b\xcf\x83\xa4\xc6\xf3\xf7\x24\xf1\x0c\x36\x8e\x0d\xf1\x3f\x82\x17\xfd\xc3\x6d\xa0\x8d\x7f\x9a\xb3\x93\xd6\xe9\x03\x56\x41\x72\x6c\x71\xdd\xf6\xb4\x68\xff\x7b\x91\x82\xa9\x50\xaf\x56\x85\x9f\x1f\x89\x91\xf0\xfb\xe3\xb5\xef\x0b\xdd\x8e\x15\x30\x7f\x8b\x18\x60\xf4\x20\x38\x15\xe7\x03\x9f\xa5\x2a\x8c\xc3\x2f\xc5\x3e\x1a\x8b\x4e\x96\xf8\x85\xc8\x24\xc1\xe9\x40\xc1\xbb\x76\xd0\xc4\x77\xee\x59\xd0\xfe\x81\xde\xfd\xd5\x75\x90\x6e\x8a\x70\x3d\x0d\xfe\xa3\xda\x3f\x85\xdf\x1a\x53\xec\x90\x3b\x91\x06\x68\x47\x79\x98\x8d\xa5\x7a\x6f\xe0\x4e\xf7\x94\xb7\x3e\x0c\xe0\x4a\xe1\x64\xa2\xfb\xf7\x30\xf6\x41\x63\xe8\x8d\x3d\x91\x2f\x07\xd0\xaf\x3e\x21\x7a\x6b\x34\x5c\xdd\xdd\xdd\xdd\x77\xe8\xb6\xa5\xd7\xcd\x89\x6a\xab\x62\x8d\x1e\xa3\x87\xe6\xe8\xd0\x09\x49\x8f\x20\x2b\x65\xbe\x84\x02\xe5\x6d\xac\xa4\x1b\x66\xfd\x6c\xcb\xb0\xd6\xeb\x1c\x41\xb7\x10\x70\xe9\x8c\x6d\x9a\xde\x0e\x49\xd3\xf4\x55\xce\xff\xdb\xa1\x39\xd1\xf1\x8b\xb4\xeb\xed\x1c\xec\x48\xc8\xd5\xbd\x5a\xd7\x6d\xbe\xb7\x97\xa7\x55\x66\xf6\xf6\x32\x5a\x7f\x3e\x63\x8c\x72\xda\x36\xac\x6d\xc2\x91\x55\x70\x99\x9f\x6f\x25\x6c\x45\x48\xe8\x57\x53\x62\x24\x59\x56\x97\x44\x38\x42\x6e\x6e\xa1\x0b\xe2\x9d\xec\x3f\x9c\xb8\x57\x2e\x23\x4f\xa1\x04\xef\x18\x23\xc1\xdb\x6b\x68\xe7\xb1\xe0\xda\xcc\xd7\x4f\x4a\x8a\x17\x3c\x3d\xfa\x3f\x03\x00\x00\xff\xff\xbd\x49\xa1\x96\xfc\x07\x00\x00")

func templatesListingsGroupedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesListingsGroupedHtml,
		"templates/listings-grouped.html",
	)
}

func templatesListingsGroupedHtml() (*asset, error) {
	bytes, err := templatesListingsGroupedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/listings-grouped.html", size: 2044, mode: os.FileMode(420), modTime: time.Unix(1527875359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesListingsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x41\x6f\xdb\x3c\x0c\xbd\x7f\xbf\x42\x30\x7a\xf8\x76\xa8\x84\xa4\xdb\x25\x50\x7c\xca\x06\x04\x68\x77\xe8\x9a\x1f\xc0\xd8\x4c\xac\xcc\x96\x3d\x91\x0d\x1a\x18\xfe\xef\x83\x2d\x3b\x71\x1c\xa7\xcd\xb6\x1e\x0a\x89\xef\x3d\x92\xd2\xa3\x1c\x9d\x70\x96\x86\xff\x09\x21\x84\x4e\x10\x62\xbf\x6c\xb6\x14\x39\x53\xb0\xe0\x43\x81\xf3\x80\xf1\x8d\xd5\x0e\xf6\xe0\xa3\x81\x20\x17\xcd\x83\x84\xb9\xa0\x99\x52\x51\x1e\xa3\xdc\xfd\x7a\x45\x77\x90\x51\x9e\x29\xbf\xbc\x9f\xca\x89\xfc\x2c\x33\x63\xe5\x8e\x82\x50\x2b\xaf\xfd\xbb\x12\x19\xbc\x45\xb1\x95\xeb\x3c\x67\x62\x07\x45\xbd\xa9\x4b\x1d\x03\xea\x41\x3e\xc8\x2f\x6a\x47\xa7\xd0\x7b\xa5\x53\x63\x7f\x0a\x87\xe9\x3c\x20\x3e\xa4\x48\x09\x22\x07\xfd\x4e\x22\xa2\x40\x24\x0e\x37\x7f\xde\x43\x44\xc3\x26\xea\x64\xa1\x56\x75\xd1\x5e\x0f\x6c\x38\xc5\x70\x69\xa9\xc0\x88\x73\xa7\x95\x0f\x78\x37\xd4\xc9\x0e\xbd\xce\xe3\x43\x4f\x17\x9b\xbd\x88\x52\x20\x9a\x07\x51\x6e\x19\x8c\x45\x17\x9c\x70\x6f\xe6\xa4\x9f\x38\x99\x9c\xc3\x65\x29\x7f\x60\xda\x80\x55\x35\x40\xc4\x5d\x86\x0c\x62\x36\x17\xf2\xd1\x10\x1b\xbb\x25\xf9\x84\x0c\x31\x30\x5c\x90\xcd\xc6\xd3\xe5\x37\x30\xe9\xab\xc3\x01\xc1\xb7\x32\x0d\xcb\xd2\xb3\x5e\x0e\x05\x56\x95\xc0\x3d\x5a\x26\xb1\xc9\x9d\xe8\x90\x05\x70\x8d\xfc\xbf\xf1\x79\x66\x47\xe0\x98\xf8\x93\x56\xc9\x74\x78\x0c\x4c\xe9\x5f\x6b\x8e\xa6\xb5\xf1\x20\xab\x66\x58\xa7\xd8\x5d\xbb\xdf\x34\xff\xef\x89\x9d\x29\x30\x6e\x77\x49\xbe\xbf\x30\xc3\xeb\xcf\x9f\xd7\x39\xe6\xc6\x81\x56\x18\x3e\x21\x11\x6c\x51\x2c\x17\x5a\x71\xf2\x3e\x77\x45\xe8\x6e\x22\xbe\x98\x0c\x89\x21\x2b\x3e\xa6\xb6\x1e\x5c\x27\x6a\x35\x76\x84\x9a\x3f\x7a\x68\xcd\xe7\x13\xdd\xff\x2b\x4b\x07\x76\x8b\xe2\xae\x31\xec\x7c\x0c\xbf\x36\x1e\x8e\xf8\x2d\x3e\xbe\xc5\x38\xd4\xd0\xbe\xe7\xb2\x6c\x72\xaf\x9e\x1f\xdb\x2a\x72\xf5\xbc\xec\x96\xed\x5d\x2f\x17\x55\x15\xd4\x33\x74\x11\xd5\x0a\x42\xad\xf8\x8a\x97\x5d\xb1\xa3\xb2\xf6\xc3\xcb\x6e\x96\x1c\x9d\xb9\x4d\xd5\x3e\x99\xef\x90\x75\xb7\x76\x7a\x34\xd7\xf5\xe3\x96\x89\x2b\xe3\xdf\x2a\x2e\x6d\xd3\xaa\x99\xfb\xde\xd7\x49\xc5\x66\xdf\x7d\xc3\x3c\x5f\x2b\xff\x2b\xf3\x3b\x00\x00\xff\xff\xe1\x37\x51\x89\x6d\x06\x00\x00")

func templatesListingsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesListingsHtml,
		"templates/listings.html",
	)
}

func templatesListingsHtml() (*asset, error) {
	bytes, err := templatesListingsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/listings.html", size: 1645, mode: os.FileMode(420), modTime: time.Unix(1527875220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSelectorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcb\x6a\xc3\x30\x10\x45\xf7\xfe\x8a\xc1\x78\x59\x92\x7d\x50\x0c\xa5\xd0\x55\x57\xa5\xfd\x00\xb5\x19\xb9\x02\x21\xb9\x7a\x14\xc2\xa0\x7f\x2f\x7a\xd6\x49\x43\x76\xd6\xf5\xf1\xdc\x33\x32\x0b\x6a\x1e\x88\x60\x32\xc1\xa3\x85\xc3\x11\x76\x10\xe3\x40\x64\xb9\x5e\x10\x26\x7f\x5e\x73\xf8\xf8\xc3\xa5\xe2\x1f\x0a\xdf\xce\x2b\xba\x18\x07\x00\x00\xa6\xe4\x9c\x1f\x88\xa4\x00\xfc\x2e\x78\x19\xb5\x4b\x60\xe5\x32\xeb\xbc\x35\x7a\x99\x89\x12\x14\x23\xdb\xd7\xe0\x8f\x48\x2a\xed\xd0\x05\x04\x97\x2a\x58\x7c\x80\xe9\xd3\x04\xed\x93\x4c\x2d\x78\x2e\x6f\x9e\x52\xec\x36\x4d\x5d\xa6\x7e\x7a\xc5\x6f\xc8\xb6\xc3\xc6\x4d\x34\xa8\xfb\x1d\x80\xa8\x74\xa7\xb0\x6d\x5c\x8a\x50\xb9\x9b\xf3\x38\x7c\x59\x14\xc7\x91\x68\xb1\x26\xac\x78\x7a\x7f\x7d\xa9\x97\xd3\x0b\xc6\xab\x3a\x7e\xbf\x49\x9f\x2e\x56\xbc\x3c\xb3\x7d\xbb\xbb\x7f\x4e\x77\x5c\xc6\xb1\x5a\xd4\x1f\xc2\xfb\x88\x3e\xbc\x68\xb4\x24\xd7\xfc\x06\x00\x00\xff\xff\xcc\xb2\x42\xa0\x32\x02\x00\x00")

func templatesPartialsSelectorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSelectorHtml,
		"templates/partials/selector.html",
	)
}

func templatesPartialsSelectorHtml() (*asset, error) {
	bytes, err := templatesPartialsSelectorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/selector.html", size: 562, mode: os.FileMode(420), modTime: time.Unix(1527875127, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/event-detail.html": templatesEventDetailHtml,
	"templates/event.html": templatesEventHtml,
	"templates/listings-grouped.html": templatesListingsGroupedHtml,
	"templates/listings.html": templatesListingsHtml,
	"templates/partials/selector.html": templatesPartialsSelectorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"event-detail.html": &bintree{templatesEventDetailHtml, map[string]*bintree{}},
		"event.html": &bintree{templatesEventHtml, map[string]*bintree{}},
		"listings-grouped.html": &bintree{templatesListingsGroupedHtml, map[string]*bintree{}},
		"listings.html": &bintree{templatesListingsHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"selector.html": &bintree{templatesPartialsSelectorHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

