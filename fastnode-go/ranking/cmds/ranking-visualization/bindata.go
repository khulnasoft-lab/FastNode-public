// Code generated by go-bindata.
// sources:
// templates/index.html
// static/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x5d\x6f\xe2\x38\x14\x7d\xa6\xbf\xc2\x1b\xd1\xb7\x11\x79\x99\xa7\x51\x88\xc4\x42\xbb\xaa\x34\xda\x76\x4b\x77\x56\xfb\xe8\x49\x2e\xe0\x6d\xea\x44\xb1\xa1\xed\x56\xfd\xef\xe3\xaf\x40\xbe\x4c\x9d\xd0\x88\xa8\x52\x11\xf7\xfa\xf8\x9c\xeb\x1b\xfb\x90\x04\xbf\x2d\x6e\xe7\x0f\xff\xde\x5d\xa1\x0d\x7f\x4a\xc2\x8b\x40\xff\x1b\x05\x1b\xc0\xb1\xf8\x3f\x0a\x38\xe1\x09\x84\xf7\x98\x3e\x12\xba\x46\xf7\xb0\x23\xf0\x8c\xfe\xc9\x71\x96\x41\x1e\xf8\x3a\x7a\x71\x31\x42\xe6\x0a\x12\x42\x1f\x51\x0e\xc9\xd4\x63\xfc\x35\x01\xb6\x01\xe0\x1e\xe2\xaf\x19\x4c\x3d\x0e\x2f\xdc\x8f\x18\xf3\xd0\x26\x87\xd5\xd4\xf3\x19\xc7\x9c\x44\xbe\xca\x9c\xc8\x40\x78\x2a\xd2\x2b\xe5\xf8\x25\x4a\x93\x34\x67\x06\x50\x88\xf1\x8d\x9a\xe0\x67\x1a\xbf\x2a\x55\x31\xd9\xa1\x28\xc1\x8c\x4d\xbd\x0c\xaf\xe1\x41\xca\xf0\x6a\x2a\x03\x5f\x64\xd5\xb3\x9f\xb5\x72\x49\xb4\x1a\x48\x60\xc5\xef\x30\x85\x44\x87\x2a\xb1\x28\xa5\x1c\x28\x37\x11\x51\xdc\xaf\xe1\x5f\x5b\xc8\x09\x30\x41\xed\x6b\xf1\xed\x56\x14\x1e\x75\xb8\xde\xde\x50\x8e\xe9\x1a\xd0\xc4\x80\xa1\xf7\xf7\x8b\xae\x08\x64\x85\x26\x37\x6c\x16\x71\xb2\x03\x39\xbe\xcb\x70\x79\x89\x55\x2a\x54\x62\x05\xe2\x85\x02\x35\xcb\x09\xe5\x2b\xe4\x5d\x32\x95\x74\xb9\xf2\xd0\xe4\x41\x2c\x19\x9a\x2c\xa3\x34\x97\x13\x05\x7e\x42\x3a\xcb\x85\x84\xf5\x23\x89\x4d\x9b\x08\x8c\xc9\xdf\xf7\xdf\x05\x86\x17\x0a\xe6\x2e\x54\x0b\xae\x81\x8f\xbb\xf3\xa5\x71\x57\xba\x87\x51\xba\x29\x7c\xd9\x15\xfa\x93\xe9\xc6\xe2\xd3\x11\x04\xd3\x16\x57\x94\x17\x6d\x51\x6b\xc8\x9c\xac\x37\x0e\xdd\xea\x42\xb8\x3c\x92\xa9\x8a\xd1\x38\x5a\x8b\xf2\xb2\x0c\xd3\x22\x10\x93\xd5\xea\x3b\xfe\x29\xa7\xfb\x73\x31\xff\x03\xa9\xd2\x06\xbe\x4c\x69\x26\xce\xd3\xad\x9c\x5d\xae\x55\x69\x09\x74\xae\x96\x2e\x28\xb7\x2b\x37\xc2\x97\x94\x88\x9b\x94\x33\x25\xfc\x43\xd2\x3a\x59\x15\xa2\x2d\x77\xd4\x50\xc8\xfa\x96\xc6\x5e\x95\x7b\x48\x60\x87\x69\x04\xce\xa5\x51\x03\x9b\xa5\xb1\x92\xa9\x2d\xf2\x07\x7c\xae\x5e\x32\x88\x38\xc4\xc8\x6c\x89\x0e\x84\x8a\x21\x72\x44\x07\x5e\xfd\xea\x75\x97\x43\x4c\x3a\x12\xfc\x1c\x62\xea\xc4\x5b\x1e\x67\x77\x0d\x98\x6f\x73\xb9\xbb\x77\x9d\x49\xf0\x1c\xaf\xcc\x68\xf4\x6d\x8a\x26\x05\x94\xeb\x3e\xb2\xbf\xfb\xc7\x84\xc6\xf0\xf2\x05\x8d\x13\xd5\x28\x25\x2c\x45\xd2\x19\xb0\xc3\xa2\x48\xf2\x7a\xb6\x43\x91\xed\xeb\xa1\xf8\x95\xd4\x6a\xc2\xfd\x16\xc8\x7d\xaf\x75\x04\xad\x6c\x96\xc0\xb6\x49\xdb\x76\xd8\xd8\x2e\x1a\x7d\xa2\x1b\x4f\xb9\x0b\xa5\xab\xd8\xc2\x1b\x48\xa3\xfd\x51\xbc\xbc\x35\xfb\xf5\x47\xf4\x5a\x81\xea\xb8\x06\x76\x79\x7b\x27\x5c\x8e\xf4\x09\x8c\x93\x94\x4e\x96\x9b\xf4\xf9\x66\xe1\x30\x91\x02\x09\xb2\x50\x54\xb8\x38\x28\x6f\x16\xdf\xd0\x65\xec\x35\x41\x6f\x16\xef\xef\xa2\xbe\x99\x0b\xb1\xea\x39\xe7\x90\x6c\x53\x51\xd4\xd6\x05\x46\x5e\x55\x2d\x6a\xb4\x90\xc3\x5a\xe4\xa8\xd8\x70\x8a\xac\x82\xf0\x9a\xf5\x5b\x18\x39\xd2\xa6\x45\x84\x86\x92\x52\x25\xf1\xbb\x70\xd8\x16\x12\x32\xd4\x8d\x84\xad\x46\xf3\x34\xee\xbf\xe6\x72\xb0\x85\xa1\x0c\x9d\xa1\x87\x0b\x4f\xdc\x4f\x8f\x1a\x6d\xb9\x25\x55\xec\x0c\x8a\x7e\xcc\x7b\xcb\xf9\x21\x7e\x79\xa9\x43\xc2\x22\x69\x1f\x3f\x83\xac\x59\x7f\x59\x33\xca\x9e\x21\x3f\x26\xac\x94\x71\x06\x69\xf3\xfe\xd2\xe6\xe9\xd3\x93\xf8\xbd\x70\x4c\x5b\x39\xe5\x0c\xe2\xae\xfb\x8b\xbb\xc6\xbb\x34\x27\x1c\x8e\xa9\xab\xe4\x9c\xa3\x2d\x67\xce\x67\x79\x53\xe0\x2c\x8a\x20\x13\x46\x5a\xb7\x9f\xf5\x70\xaf\xa7\x0d\x21\xf3\xe0\x8f\xac\x69\xc5\x4f\xbc\xf1\xe3\x97\x31\xa6\xda\x22\x1b\xaa\x9a\x59\x71\x76\xba\xd9\xa7\xa3\x59\xc6\x3c\xc9\x79\xaa\x86\xa9\xaf\x63\x52\x48\x95\xd2\x75\xab\x9d\x63\x8f\xec\x09\x97\xbd\xd1\x69\xe6\x48\x41\xd6\x0d\xd1\xa7\x93\xaf\x70\xef\x60\x83\xac\x3e\x48\xd3\xee\xe6\x7d\x46\xdd\x58\xdb\xdc\x8f\x9a\xba\xe6\x78\xba\xae\x5f\xc9\xe6\x9c\xe4\x73\x14\x60\xcd\xdb\x0c\xdb\x79\x65\x47\x73\x9a\xa5\xd1\x90\x35\x1b\x33\x2c\xf9\xbd\x79\x39\xdd\xbd\x28\xcc\x36\xc7\x32\xac\x82\xd9\x09\x0a\x1a\x46\x45\xa1\xb6\x9b\x93\x61\x55\xcc\x4f\x50\xd1\xf4\x24\xe6\x26\x68\xf5\x21\xc3\xea\xb8\x3e\x41\x47\x8b\xfd\x50\xb8\x36\xcb\x31\x70\x5f\xcd\xdc\xcf\xc0\xa6\x96\x76\xa7\xa1\xdb\xcb\xee\x2e\x3e\x51\x91\x93\xbf\x30\x60\xc8\xf6\x98\x46\xbe\x83\xb0\xcc\x55\x7d\xc2\x4a\x28\x95\x77\x4c\x0c\x9e\x7d\x4a\x79\x74\xe5\x10\x06\x91\x48\x0b\xdf\xde\xd4\x7b\x2b\xf2\x3f\x20\xb3\x5b\x07\xbe\x0a\x88\x52\x88\x24\xdb\x94\x47\x1f\x2a\x09\x31\xd6\x87\xe0\x87\xa1\x6d\xd1\xa3\xc1\x03\x70\xb7\x17\x13\xfb\x85\x2a\x06\x05\xbe\x79\x25\x17\xb0\x28\x27\x19\x2f\xbf\xde\xfb\x0f\xef\xb0\xfe\x56\x56\xd0\xf7\xd1\xc3\x86\x30\x24\xfe\x56\x69\x8e\x12\xcc\x21\x97\xe3\x75\x46\x78\x11\xf8\xfa\xd5\xe5\xaf\x00\x00\x00\xff\xff\x05\xcd\x3d\x33\xd2\x1c\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 7378, mode: os.FileMode(420), modTime: time.Unix(1443830270, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x6d\x6f\xa3\x38\x10\xfe\xdc\xfc\x0a\x9f\xaa\xaa\x8d\x14\x10\x10\x48\xd3\xe4\xd3\xf5\x25\xba\x0f\xa7\xd3\x49\xbb\x7f\xc0\x80\x01\x6b\x1d\x1b\x19\xa7\x69\x76\xd5\xff\xbe\x63\xf3\x12\x20\x90\x36\xdb\x4a\x49\x61\x62\x9e\x79\x66\xe6\x99\x19\x32\xb5\x65\x33\x14\x8a\xf8\x80\x7e\x4d\xae\xf6\x34\x56\xd9\x0a\xb9\x8e\x73\xb3\x9e\x5c\x65\x84\xa6\x99\x6a\x6e\xb7\x58\xa6\x94\xaf\x90\x03\xd7\x39\x8e\x63\xca\x53\x73\xf3\x3e\x99\x54\xcf\xeb\xcb\xcc\x9b\xa1\x6c\x0e\x1f\x1f\x3e\x81\x06\x4d\x04\x57\x56\x82\xb7\x94\x1d\x56\xe8\xf6\x1f\xc2\x5e\x89\xa2\x11\x46\xff\x91\x1d\xb9\x9d\xa1\x02\xf3\xc2\x2a\x88\xa4\xc9\xba\x3a\xbb\xaf\xfc\x7a\x8e\x33\xe6\xd6\x75\xf2\x37\xed\xd9\xce\x71\x4a\xbe\x53\xc5\xc8\x38\x7d\xdf\x9c\xbd\x62\x94\x13\xab\x67\x0b\xc5\x9b\x55\xd0\x9f\x06\x32\x14\x32\x26\xd2\x02\xd3\xfa\xcb\x9c\x8d\x09\x80\x09\x90\x79\x30\x9e\x8e\x09\x6b\xb8\x4f\xec\xbd\xc4\x79\x4e\xe4\x38\xf5\x08\xb3\xe8\x4e\xdb\x90\x65\x28\x4f\xe1\xb7\x98\x16\x39\xc3\x40\x2b\x61\xa4\xc4\x99\xd8\x8c\x24\xea\x7f\xcc\x09\x6b\x41\xf9\x06\xe9\x92\x40\x42\x1c\xfd\x48\xa5\xd8\xf1\xd8\x8a\x04\x13\x72\x85\xae\x9f\x83\x17\x7f\xe3\xc2\x6f\xe2\x95\xc8\x84\x89\xfd\x0a\xe1\x9d\x12\x83\x51\xbf\x77\x88\xd8\x11\x1c\x20\x5c\x69\x46\x63\x69\xee\x71\x6f\x1e\xd9\x99\x38\xaa\x94\x59\xfa\x40\x59\x7e\x46\x0b\x48\xab\x3a\x30\x62\xa9\x43\x0e\xc9\xe5\x82\x93\xae\x44\x46\x48\x00\x22\xd6\x98\x8a\xbc\x29\x2b\x26\x91\x90\x58\x51\xc1\x1b\x84\x2a\xde\x90\x41\x0a\xce\x83\x30\xfa\x79\x9c\x8a\x98\xa5\x44\x0e\xa5\xad\xab\x3e\x8c\x5c\xe2\xf6\x04\x3e\x54\x92\x65\xf0\xe8\xbc\x2c\xb5\xaf\x9d\x2c\xb4\x25\x17\x14\x50\x24\x58\x94\x84\x72\xd2\x92\x90\x17\x38\xdb\x02\xf5\x9f\x3f\xcf\x60\x95\xe9\x32\x9b\x8a\x9d\xfa\x7d\xdc\x3c\x2f\x36\xf3\xf3\x00\x36\x8e\x14\x7d\x25\xc3\x08\xfb\x8c\x2a\x52\x3e\x2f\xb5\x6c\xfa\x82\xbd\x37\x82\xed\x0b\xad\x77\xfc\x33\xb2\x3a\x1d\x13\x5d\x08\x1e\x47\xa9\x7e\xbe\xaa\x4e\x28\x94\x12\x5b\x2d\x62\x93\xf2\x6e\x27\x9e\x91\x6e\x89\x63\xc7\x34\x49\xfe\xc5\x61\xb7\xf7\x82\x1b\xf4\x17\xdd\xe6\x42\x2a\xcc\xd5\x70\x1d\xff\xbe\x7f\xf6\x36\x0f\x9d\x63\x5d\xd0\x27\x38\xae\x2e\x04\x5d\xbe\x3c\xf9\x9b\xe0\x04\xb4\x1d\x7d\xc1\x29\x0c\x1d\x35\x90\x80\x6a\x28\xd6\x7d\xd7\x33\x37\xd1\x97\x56\x90\x33\x2a\x04\xa3\x71\xbb\x69\x0a\x68\x08\x32\x43\xb6\xd2\x13\xf9\x9b\xbe\x41\xda\x4f\xb7\x2b\x10\xfc\x5d\x30\x96\xf4\x71\xd3\x6e\x98\xd1\x14\x84\x1d\x91\x52\xed\x8d\x3f\x54\xfe\xab\x6b\xd0\xc0\xd7\xc3\x29\x14\x2c\x2e\x61\x9a\xd1\x49\xb9\xd9\x06\x21\x13\x35\xa1\x63\xd5\x75\xb0\xda\xd2\x88\x28\xa8\x2d\xed\xa9\x3e\xaf\x8d\xa7\x45\x90\x69\x88\xef\xdc\x05\xec\x41\x77\xb9\x9c\x21\xcf\x5d\xc0\xd5\xf4\x94\x70\x5d\xdf\x61\x67\x63\xb8\xcb\x85\x86\x0c\xe0\xcb\xab\x70\x0d\x70\x2b\xe3\x5d\x45\x7e\x1c\x33\x4c\x8a\xda\xe9\x50\x9e\x3f\x99\x8b\x76\x78\x6d\x02\x5f\x2a\x47\x8b\x5a\xbd\x12\xbd\x86\x42\x67\xa1\x1f\xcd\xed\x18\x8c\xee\xbf\x5e\xce\x3b\xcf\x87\x37\x1a\xcf\x77\x75\xea\xef\xa7\xe5\x49\x98\x53\x5a\xb2\xac\xf6\xb5\xa5\x71\xcc\xc8\xba\x9f\x87\xf3\x55\x6e\x93\xd5\x43\xf5\x0c\xb3\x5a\xa1\x7f\x90\x92\x33\x89\x1e\x91\x99\xe7\xfb\x3a\x56\xad\xe1\x60\x5e\xca\xec\xa3\x98\x25\x29\x76\x4c\x55\xbd\x3f\xbc\x01\x74\x2a\x4d\x37\x78\x0e\x7c\x3d\xf8\xd3\xe3\xc6\xac\x96\xc3\xc9\x02\x3c\xa6\xc2\xf5\xf3\x0b\xdf\xcc\x80\x55\x2e\x47\xa8\x5c\x7b\x9e\x77\xea\x7d\x74\xa3\x74\x12\xeb\x06\xf9\xc0\x96\xe9\xbd\x85\x4c\x6c\xca\x39\x91\x4f\x22\x36\x0c\x72\x51\x2f\x66\x49\x18\xd6\x4b\xb2\xbf\x6a\x1a\xdd\x14\xcd\x0b\x46\xaf\x13\xfb\xf3\xba\xde\x6e\xbf\x03\x00\x00\xff\xff\xa7\x8e\x0d\x22\xc4\x0b\x00\x00")

func staticStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleCss,
		"static/style.css",
	)
}

func staticStyleCss() (*asset, error) {
	bytes, err := staticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style.css", size: 3012, mode: os.FileMode(420), modTime: time.Unix(1443732120, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"static/style.css": staticStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{staticStyleCss, map[string]*bintree{
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

