// Code generated by go-bindata.
// sources:
// serve/params.json
// DO NOT EDIT!

package monetizable

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serveParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x4d\x8f\xd3\x30\x10\x86\xef\xfb\x2b\xa2\x9e\xd9\x68\x3e\x3d\x33\xbd\x21\x4e\x9c\x11\xe7\x2a\x34\x81\x1a\x65\xdd\xaa\x4d\xb6\x20\xc4\x7f\x47\xb1\x39\x40\xf7\xfc\x3e\x7e\x66\xfc\xda\xbf\x9e\xba\x6e\x97\xcb\x32\x5d\x8f\xd3\x65\xd9\xed\xbb\x67\xc4\x5e\x55\x09\x59\x19\xc3\xd8\xe2\xdd\x86\xdc\x73\x19\xcf\xf7\xdb\x6e\xdf\x41\x1f\x90\x14\x0c\xd9\x10\xd5\x08\xa5\x02\xe3\x70\xbd\xe7\xb2\xdb\x77\xd8\x0b\x88\x1b\x0b\x09\x78\xa8\x87\xd5\x7c\xce\x65\xfd\x51\x63\x62\x34\x77\x40\x01\x0e\x51\xe5\x1a\x7f\xcb\xcb\xe1\xeb\x79\x2d\x63\x45\x10\x41\x8d\x01\x1d\x53\x12\xd1\x4a\x1c\x2f\xeb\x61\x39\x5d\xa7\x61\x6c\x5b\x00\x6e\x92\x40\x03\x11\x34\xf1\xb6\xc6\x76\x95\x79\xce\xdf\x0f\x97\x21\x37\x97\xbb\x7a\x52\x17\x44\x30\x27\x6c\xb2\x61\x39\xbf\x1c\x72\xb9\x2d\xc3\x3c\x4f\x63\xf5\xa1\x88\x84\x88\x2b\x23\x9b\xab\xfe\xaf\xfb\x97\x7d\x86\x1e\x98\x31\xa9\x29\x25\x22\x10\x4b\x7f\xb5\x97\x9f\xc7\xd3\x70\x7d\x34\x27\x24\x50\x0c\x16\x83\x08\x70\xaa\xe8\x6d\xfd\x32\xe7\x97\x89\x1f\x58\x0d\x05\xa1\x50\x22\xdf\x66\x54\xf4\x35\x3f\x1a\x8d\xc3\xb7\xdc\x85\x21\xa1\xb7\x86\x5f\x6f\xc7\xf3\x38\xbd\xf5\x11\x00\x32\x93\x26\x73\xf6\x4a\x7e\xfe\xf4\xbe\x3d\xa4\xb2\x45\x12\x0f\x45\x24\x6b\xc3\x3e\x9c\x72\x19\xea\x3f\xe8\x99\x30\x81\x86\x26\x37\x54\x80\x76\xf6\x63\x19\xf3\xd0\x4a\xb0\xe0\x88\x04\x11\x64\x8c\x91\xf8\xe9\xf7\x9f\x00\x00\x00\xff\xff\x68\xc2\x3e\x57\x4e\x02\x00\x00")

func serveParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_serveParamsJson,
		"serve/params.json",
	)
}

func serveParamsJson() (*asset, error) {
	bytes, err := serveParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serve/params.json", size: 590, mode: os.FileMode(420), modTime: time.Unix(1608157420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"serve/params.json": serveParamsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"serve": &bintree{nil, map[string]*bintree{
		"params.json": &bintree{serveParamsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
