package decisiontree

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _testdata_model_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x7f\x6f\x14\x49\x0e\xfd\x2a\x28\x7f\x43\xcb\xbf\xaa\x5c\xbe\xaf\x72\x42\x08\x1d\xc3\x81\x84\x96\x15\x04\xe9\x74\x2b\xbe\xfb\x3d\x77\x27\x39\x92\x31\xba\x9a\xa9\xc0\xf5\x4a\x33\xa4\xd3\xdb\xed\xb8\xec\xe7\xf7\xec\xea\xbf\x6e\x6e\xbf\x9c\x4e\x5f\x6f\xfe\xf6\xe2\xef\x7f\xdd\x7c\xfe\x76\xfb\xe7\xb7\xdb\xfd\x87\x57\x1c\xdb\x78\xf9\x22\xbf\xda\xf1\x25\xf4\xe3\xa1\x79\x72\x6c\xf1\xe8\xa4\x1c\x27\xfb\xf1\x75\x77\x09\xbd\x7c\xd1\xf2\x1e\xb2\x91\x77\x73\x6a\x63\x88\x36\x09\xc3\xef\x99\x36\x22\x67\x93\xd1\x8e\x4f\x3c\x92\xfb\xa6\xe3\x87\x23\x70\x1b\xda\xfa\xa3\x07\x11\xe3\xa4\x6c\xdd\xf0\x65\x5b\x93\x47\x07\xce\xe5\x2d\xf2\xe9\x7e\xd8\xe2\x5b\x5e\x8f\x1b\xef\x7f\x4a\xdb\xe2\xf8\xe2\xb3\x5b\xb2\x1d\x97\xe8\x71\x89\x3e\xf9\xa3\xf7\x4b\x64\xd3\x76\x76\x92\x37\x3f\xbf\x92\xab\x27\xd0\x96\x46\x1f\x5e\x1d\xfb\x63\x0e\x4f\xf9\xe6\xaf\x5f\xbe\xb8\x79\x77\xfa\xf3\xf6\x03\x16\x00\xbf\xbe\xf9\xe3\xf3\xbb\xfb\x95\xf9\x74\x7a\x7f\xfb\xe6\x1f\x1f\x3e\x7e\x7a\x87\x9f\x71\x9f\x9b\xf7\xa7\xb7\xb7\xdf\xbe\x9c\xde\x7c\xfc\xe3\xdd\xe9\x5f\x77\xe7\x6e\x3f\x7c\x39\x7d\xfd\xf0\xf9\xb8\x66\xe3\x50\x66\x89\xde\xc9\x87\xa5\x63\x6f\xbe\x7c\xfc\xe7\x87\xdb\x37\x1f\xbf\xbe\xf9\x74\x7a\xfb\x1e\xd7\xbc\x7f\xfb\xe9\xeb\x09\xe7\xf7\x9b\x9f\x9f\x3e\x2e\x7f\x78\x68\xfb\xfe\xf2\xc5\x13\x43\xa4\x30\x84\x9e\x18\x42\x5b\x43\x90\xb4\xd1\x47\x8c\x5c\x65\x5d\x35\x64\x9c\xdb\xa1\x73\x76\x50\xb7\xc6\x5d\xa3\x37\x13\xb1\x55\x3b\x0a\x7f\xd0\xa4\x1d\x88\x2a\xf3\x31\x9c\xc3\xbc\xf3\xbc\x21\xb7\x5f\xbe\x9d\xdb\x61\xe7\x76\x54\x01\x52\xd9\xa1\x3e\x9a\x22\xf1\xba\x58\x44\xe5\x90\xbb\x07\xce\x98\x21\xe7\x66\xf4\x39\x33\xd8\xa8\x03\x0f\x48\x2d\x28\x74\x39\x50\xfd\xfa\xf8\x18\x64\xc1\xdc\x3a\xab\xf7\x51\x05\xea\x05\xfe\x28\x96\xa5\x4d\xfa\x63\xf4\xd6\x04\x01\xa2\x48\xdb\xc5\x55\xe9\xe7\x56\xc4\x84\x15\xbc\x51\xb8\xba\x93\x74\x6d\xda\x79\xc8\x32\x7c\x14\xf1\xc1\x55\xbe\x3c\x05\x32\xda\x22\x0b\x06\xa7\x4f\x9c\x50\x19\x7c\xd9\x14\x3e\x37\xc5\xa7\x96\xc6\xcd\x9c\xc5\xd8\x03\x7e\x21\x5b\x5c\x9b\x02\xc8\x66\xd6\x06\x0e\x41\x90\x46\xd7\x3e\x88\xcd\xa5\x55\x6b\x73\x81\x19\x4c\xc5\xca\xcc\x64\x0c\x6f\x00\x8e\x40\x6d\x11\x8e\xe6\xc8\xdc\xf5\x95\xa9\xb0\x6c\x06\xcc\x18\xf5\xde\xdc\x3a\xbb\x37\x07\xae\x56\x96\x5c\xe2\x92\x2a\x58\x2b\x97\x14\xc1\xea\xc4\x60\x32\x8c\x5a\x67\x2a\xab\x21\x52\x3a\x64\x0e\x56\x43\xa5\x79\x23\x6e\x4d\x9b\x6b\xeb\xab\x6b\x23\x5a\x98\x32\x97\x36\xbd\x75\x00\xbb\x81\x8e\x28\xf2\xb8\x5c\x9c\xcb\x4c\xa9\x22\x76\xcc\x81\xeb\x00\xdd\xe4\x48\x46\x92\x15\xf8\x82\xda\xfb\x93\x88\x8d\xc2\x94\x49\x9c\x6f\xd2\x09\x54\x12\x09\xcc\x6d\x27\x87\x4b\x91\x52\x20\xfd\xec\xf2\x80\x24\x8e\x00\x4d\x44\xbc\x46\xf7\xd5\x90\x2d\x60\x4d\xe6\x08\x09\x2a\xde\x00\x57\xb5\x1e\x22\x3e\x64\x3d\x64\xab\x34\x9e\x83\xd8\x1e\x58\x1e\xc4\x47\x03\xe2\x83\x9c\x2c\xe2\x49\x15\xb0\x93\x3e\x81\x24\x72\x14\x1d\x12\x1d\x1c\xac\xab\x24\xad\xf0\xc8\xce\x84\xff\x37\xc0\xa6\x60\x1b\xa3\x13\x3e\xc3\x53\x94\x2d\xae\x4d\x41\xd3\x64\x26\x71\x20\x6c\x04\xbc\x48\x25\x18\xae\xc1\xc7\x3a\x9c\x14\xa9\x23\x73\x05\x90\x8c\x06\x40\x16\x58\xc2\x16\xde\x16\x17\xa7\x00\xfb\x49\x97\x08\xa1\xde\x04\x53\x8f\x90\xa1\xbe\xc8\x08\x4a\x87\xcc\xe0\x2b\x18\x01\xb1\x8a\x10\x74\x27\x73\xc7\xb1\xbc\x36\x05\xbe\xca\x0c\xac\x81\x11\x24\x91\x36\x45\x02\x03\x4e\x22\x2a\x53\x2e\xf1\x49\x05\x6b\x73\x54\x1a\x7c\xb1\xf5\x46\x36\x84\x93\xc0\xae\xd9\xa1\xf4\xfd\xf5\x0f\x4f\xfd\xfa\xf1\xdf\xa7\x9b\x7b\xf1\xf5\xa8\x7d\xf3\xa4\x75\x71\xf4\x66\xf6\xae\x03\xe5\x27\x6d\x47\x5f\x65\xe4\x3f\x59\x80\xb6\x34\x00\x7a\xc0\x3a\xce\x0a\xf0\x4a\x36\x78\x59\x37\x98\xfe\xa4\xeb\x23\x9b\x66\xa0\x3f\x6d\x78\xe4\xfd\x39\x7b\x3d\xb8\xa7\xf4\x27\x47\x3e\x83\xf8\xfc\x6c\x5a\xe9\x40\x7b\xa5\xbb\x4f\xdf\x9f\x2c\x79\xbd\x3e\xbe\xd8\x77\x3b\x8f\xdb\xdf\xfd\x11\xfb\x5f\x01\x4a\xf1\xf8\xc8\x93\x7e\xd6\x2c\xe2\x6d\xf8\x8f\xc7\xd8\x6f\x71\xb8\x80\xc8\x8f\x5b\xed\xcf\xb5\xe7\xed\xc2\x40\x41\x99\x25\xed\x91\x2e\x4d\xb5\x82\x88\x65\xf1\x52\xb5\x61\x0a\x4b\xd2\x13\x23\xc4\xa8\x35\xef\xb6\xac\xe8\x26\x75\xf6\x39\x45\x86\xe0\x87\x8a\x82\xe6\x1f\xa6\xc8\x87\x65\x97\x14\xb0\x39\xd7\x88\x09\xd4\x77\xa1\x18\xd0\xba\xc6\x60\xec\x8b\xc4\xe7\x5a\xc1\xdf\x3b\xa2\x03\x90\x99\x58\x15\x5d\x96\x1b\x64\x15\x7a\xcf\x31\x52\x88\x27\x58\x10\xb9\x3c\xf8\xd7\x62\x15\x29\xf4\xc2\x0c\xd3\x78\x6e\x95\x5d\xb4\xe9\xe6\x04\xd4\x80\xc0\x56\x71\x88\xdb\x40\xa8\xc6\x05\xf9\xf2\x9c\x6a\x3f\x11\xa4\x61\x35\x76\x99\xd0\x47\xa3\x75\x91\x5d\x90\xd1\xb9\x8a\x9a\x65\x1d\x30\x06\xf0\xb0\xd6\x79\x55\x64\x5f\xef\x10\xa8\x59\x45\xce\x76\xc5\xca\xc0\x94\xc5\xb4\xad\xc4\xe4\x1c\xa2\x72\x3e\x3d\x9a\x76\x57\x03\xcc\xaf\x63\x7b\x25\x26\x27\x89\x68\xc3\xba\x38\x59\x20\x61\xd2\xac\x65\x53\x2a\x39\x39\x97\xbe\x1d\xf5\x14\xec\x0f\x2e\xc9\x3c\x2e\x49\xf1\xf2\xe0\x61\xaa\x29\x94\x1d\xdd\x46\x4a\x22\x02\xa5\x00\xb5\xbd\x0a\xf0\xb3\x5d\xa1\x02\x4b\xc2\x03\x5a\x01\x24\x50\x34\x46\xac\x1a\x52\x75\x85\xaa\x14\x2e\x48\x00\xc0\x95\x03\x96\x40\x52\x22\x8d\xd6\xe3\xa4\xc8\xe2\xb2\xff\x51\x98\x02\x78\x1d\x01\xb5\x6f\xa4\x88\xda\x45\x97\xcc\xb6\x3f\x0a\x3b\x46\x84\xa1\x00\x5b\xb3\x1d\xd8\x16\x0d\xa9\x74\xc2\x4c\x9f\xfb\xd9\x07\x76\x55\xc3\x6e\xb2\xe9\x80\x58\x4d\x32\x32\x28\xe5\x5c\x19\xad\xbf\xab\x0f\x93\x8e\xe8\x9e\x51\xab\x4d\x74\x35\x83\xaf\xee\xc3\x40\xa7\x80\x07\x0c\x8d\x66\xcd\x07\xaf\x2b\xec\xeb\xfb\x30\x26\x00\x32\x23\x82\x9a\x8c\xec\x77\x4f\x1b\xf2\x93\xb5\xa9\xc6\xba\x73\x35\x47\x09\x16\xc0\x27\x9a\xd4\x84\x57\x3d\x62\x73\xba\xb6\x12\x77\xaf\xb2\xfe\xed\x5f\xbb\xfa\x93\x5d\xd5\xf1\x9d\xc6\xad\x84\x30\x6e\xd2\x6a\x9d\x78\x2f\x8e\x1f\xfe\xf9\xea\xb8\xf6\x10\x8b\xbb\x5c\x4e\xc5\xc8\xc4\x8c\x24\xf1\x7e\x7c\xca\xdd\xaf\x52\x94\x3e\xa7\x7c\xc4\xfd\xd4\x11\x71\x64\x5d\x1b\xf4\x79\x39\xea\xf9\x3d\xda\x20\x6b\x46\x1b\xd9\x51\x91\x01\x16\xb8\x8c\x09\xd7\x8b\x36\x62\x90\x2d\xa8\x47\x07\xe7\xe9\x97\x34\x22\x67\x55\xca\x24\x46\xf2\x30\x07\x24\xa0\xa2\x83\x71\xb5\xc5\xf6\x7d\x81\x07\x73\x9d\x3f\x1a\x03\x42\x05\xfc\xa6\xf7\x04\xc9\x55\x38\x28\xd0\x60\x8e\xe1\x3c\xaf\x96\x2e\xa2\x63\xa6\x98\x83\x7c\x6a\x36\xca\xbb\xb2\x33\xa0\xda\x7e\xc9\xac\x78\x6e\xd2\xe4\x10\x06\x58\x1b\x64\x2f\xf8\x56\xb3\xe5\x49\x53\xa1\x0d\xe6\x74\xac\xf7\x08\xea\x9c\xa3\x7c\x6a\xc1\x8b\x2b\x53\x74\x7d\x2a\x7f\x14\x48\x66\x0c\x32\x8e\xd5\x69\x6a\x31\x2e\xe9\x0c\x4f\xcb\xb6\x8a\x52\x54\x86\xa8\x51\x40\x52\x7b\x03\x17\x5e\x1e\x15\x5f\x2b\x1f\x11\xab\x83\x06\x43\xac\x69\xaa\x58\x59\x9f\x63\x4c\x4f\xcf\x0b\x53\xac\xb3\x29\xd2\x16\x75\xcd\x45\x56\xb7\x24\x71\x85\xaa\x33\x75\x06\x15\xdc\xb3\xf3\xa3\x96\x83\xd1\x41\x7d\x75\x6f\x43\x65\xc8\x1c\xb0\x5a\x20\x57\xbc\xa3\xc4\x2b\xe5\xe4\x7a\x79\x75\x66\x15\x75\x15\x28\xd1\x72\x9c\xe2\xd9\x06\xf2\xb2\x87\x7c\x89\x4f\x2a\x3d\x3d\x03\x25\xbb\x4f\x1a\x20\x04\xac\x73\x40\x5a\x2f\xcb\x58\x9f\xa5\x7c\x76\xf0\xb0\x8a\xad\xb1\xb5\x47\xff\xed\x2c\x8c\x1e\xf6\x93\xde\x7d\xbe\xdc\x63\xfc\xe9\xff\x4e\xa0\xb0\x8f\x0f\xbb\xa7\x8e\xf5\xfc\x24\xc7\xb1\xe7\x37\x39\x86\x1e\xf6\xe3\xf3\x78\xaf\xc4\x8f\xa8\xa8\xfc\x9c\x71\x16\x56\xd4\xac\x95\xed\xf1\xd1\x0f\x36\xda\x64\x80\x8b\x0f\x08\xa5\x10\xc3\x0f\xf7\xe3\x1d\xdc\xd9\x0e\x76\xfc\x30\x37\x79\x60\xb0\xc2\xe2\xbd\x45\x03\x69\x48\x1c\x6a\x4b\x63\x8f\xa2\xe8\x28\x38\x5a\xee\x70\xe8\xb9\x23\x67\x3d\x79\x2a\x2d\x3b\x65\x08\x7c\xd2\xf6\x44\x16\x4d\xb6\xbe\x3c\xb7\xbe\x7a\xf7\x29\x38\x9a\x6a\xef\xea\x9a\xe9\xfc\x4b\xba\xfc\x73\x68\x32\x46\x0c\xc0\x49\xf6\xfa\x5b\x08\x2d\xf7\xe7\xae\xde\x07\xdb\x9b\xb6\x24\x8d\x2e\x08\x94\x72\x3f\xee\xda\xf4\x65\x72\xe8\xa1\xea\x28\x38\x8d\x32\x42\xca\x61\xd4\xda\xcc\x63\xae\x09\xc5\x88\x51\x88\x09\xe5\x86\x80\xb5\x0b\xf6\x9e\x2e\x05\x47\x95\x2e\xc8\x15\x93\xdc\x72\x12\xac\xe5\xd0\x63\x6d\xf6\x32\xc3\xd1\x00\x7e\x2a\x4c\x1d\x92\x62\x18\x80\xe4\x19\x8a\xef\xec\xee\xd3\x6a\x27\x50\xca\x1a\x50\x78\x21\x0d\x70\x82\x5f\xa1\x28\x26\xf7\x69\x01\xe5\xe1\x17\x06\x77\x1d\xec\xab\x1b\x1a\xae\xde\x7d\xda\x23\x85\x1e\xa0\x03\xec\x59\x64\x79\x6a\x5a\xf1\xe7\xb9\x1a\xf3\xbc\x7b\xb4\xca\x10\x99\x1c\x58\xa6\xbe\x32\xda\x43\xb6\xfb\xfa\x9b\x16\x85\xc6\x9a\xdc\x53\xe8\x20\x01\x0d\xd0\xce\xc2\xf9\xaa\xc3\x7c\x53\xe2\x02\xce\x3a\xa9\x3a\x87\x65\x83\x5f\x22\x37\xb3\x0f\x99\x07\x92\x0b\x86\x40\x73\x85\xd7\x81\x67\xe4\x86\x38\x09\x67\x2f\x97\x67\x75\xf6\x32\xa3\x80\x73\xdf\x5a\xef\xa1\xad\x37\x73\xd4\xbb\xf5\xc1\x98\x14\x48\x52\xb6\xd5\x8b\x99\x07\xec\x88\x1c\x89\xa1\xd4\xe4\x1b\x20\xcb\xa6\x54\x59\x3c\x3b\x54\xb6\x01\x8e\xc8\x8d\x20\x2e\x96\x57\xa7\x1a\x47\xcd\xb9\x04\xc9\x0b\xe9\x6b\x40\x36\xd4\xc0\x58\x1d\x03\x95\x93\x86\xd9\xa9\x72\x80\x3d\x93\xd0\x10\xe4\xf2\xfa\xd2\x5c\x3b\x06\xca\x9d\x07\xa6\x1c\x4a\x0d\x4c\xe0\x97\x4c\x3c\x66\xf6\x0b\xc1\x21\xee\xae\x90\x74\x02\x80\xcd\xc6\xc0\xa2\x21\x73\x83\x86\xdc\x16\x96\xbb\xa2\x5b\xcb\xa8\x60\xf5\xd0\xbb\xdd\x67\xf6\xdf\x7d\x73\xfb\x87\x3d\x6c\x1e\x7b\x75\x3f\x37\xf8\x99\x5e\xbd\x93\x82\x6d\x79\x9f\xd9\x6f\x68\x57\x54\x01\x3c\x69\x49\xeb\x88\xdc\x01\x72\x40\xcf\xb0\x29\xe2\x4a\xc1\xf5\xfc\x2f\xa7\x14\x15\x68\x72\x62\x97\x22\x5b\xc3\x3a\xa7\x50\x2f\x9b\x6b\x17\x4d\xec\xae\xd3\x5b\xb9\x0f\x35\x77\x87\xc0\x2b\x3e\x50\x88\x56\xf9\x63\x51\x7c\x2a\x66\x50\xe8\x4f\xef\x61\xf9\x5a\x8a\x53\x88\xae\x47\xea\x95\xef\xfb\xc1\x1f\x3e\x18\x01\x92\x63\x54\xf0\x14\x5a\xf4\xc7\xe4\xfb\x7e\x55\x2d\x86\xda\x69\xdd\x2c\x80\x73\xad\xfd\xbf\x5e\xf8\x33\x88\x1c\x6a\xa6\xdd\x20\x2f\xca\x71\xc5\x25\x41\x5a\x4c\x2b\xe6\xe8\x80\x01\x72\x23\x67\x15\xd6\x5d\xca\x57\x40\xd6\x34\xce\x94\xea\xdb\xe1\x74\xb4\xae\xe2\xd4\x11\xa6\x65\x6f\xfe\x92\x5c\xe1\xba\xe6\xbc\xfe\xfe\x9f\x00\x00\x00\xff\xff\x87\xc2\x9b\x9a\x7f\x3f\x00\x00")

func testdata_model_json_bytes() ([]byte, error) {
	return bindata_read(
		_testdata_model_json,
		"testdata/model.json",
	)
}

func testdata_model_json() (*asset, error) {
	bytes, err := testdata_model_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "testdata/model.json", size: 16255, mode: os.FileMode(420), modTime: time.Unix(1430789254, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/model.json": testdata_model_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"testdata": &_bintree_t{nil, map[string]*_bintree_t{
		"model.json": &_bintree_t{testdata_model_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

