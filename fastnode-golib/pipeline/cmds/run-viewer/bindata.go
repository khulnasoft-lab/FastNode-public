// Code generated by go-bindata.
// sources:
// templates/list.html
// templates/run.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x68\xda\xae\xb1\x90\x05\xc9\xb6\x8c\xd6\x65\xdd\x4e\xc3\x56\xb4\xe9\x80\x1d\x15\x8b\xad\x84\xc9\xb2\x21\x31\x5d\x03\xc3\xff\x7d\x50\x6c\xe7\xab\xe9\xaa\x43\x62\xf2\xf1\x91\xd4\x23\x6d\x78\x73\xf5\xf3\xcb\xea\xf7\xf5\x57\x66\xa8\x72\x32\x83\xf4\xc7\x9c\xf2\x0f\x05\x47\xcf\x93\x03\x95\x96\x19\x63\x8c\x41\xa4\xad\xc3\xfe\x39\x9d\x3c\x92\xa2\x4d\x9c\xdc\x5b\x6f\xa3\x41\xcd\xda\x3d\x94\x4e\x59\xbb\x3a\x2c\xd9\xdb\xf7\xfa\xd3\x62\x3e\xfd\xbc\xc7\xba\x67\x09\x30\x84\x3a\xbc\xc0\x5e\x7f\x98\x2e\xa6\x8b\x73\x36\x88\xa3\x5e\xa0\x42\x52\xac\x34\x2a\x44\xa4\x82\xdf\xad\xbe\x4d\x3e\xf2\x01\x72\xd6\xff\x61\x01\x5d\xc1\x77\x84\x68\x10\x89\x33\xda\x36\x58\x70\xc2\x27\x12\x65\x8c\x9c\x99\x80\xf7\x05\x37\x44\x4d\x5c\x0a\x51\xa9\xa7\x52\xfb\x7c\x5d\xd7\x14\x29\xa8\x26\x19\x65\x5d\x89\xbd\x43\xcc\xf2\x59\x3e\x4f\xd4\x83\x2f\xaf\xac\xcf\x53\x32\x09\x22\x15\x1d\xea\x93\x25\x87\xf2\x66\xe3\xd9\x2f\x8b\x7f\x31\x80\xe8\x3d\x19\x88\x5e\x58\x58\xd7\x7a\x2b\xb3\x0c\xb4\x7d\x64\xa5\x53\x31\x16\xbc\xac\x3d\x29\xeb\x31\x8c\xb7\x30\xf3\x94\x22\x32\xeb\x59\xdb\xe6\xb7\xb3\x2b\x1b\xba\x0e\x84\x99\xcb\x6c\x28\xa3\xd6\x0e\x47\x7a\x6f\xec\x7e\x27\x91\x82\x6d\x50\xf3\xc3\xd4\x80\x0e\x13\xed\xed\x20\x4f\x94\x07\x32\x72\x65\x2b\x8c\xa4\xaa\x06\x04\x99\xe7\xf0\xb5\x6d\xd0\x59\x8f\x97\xd1\x1f\xaa\x7a\x01\xb9\xdd\xcd\xfb\x14\x03\x71\xdc\x40\xc2\xce\xda\xeb\x05\x1a\xed\xb6\x0d\xca\x3f\x20\x7b\x17\x36\x9e\x2d\x0b\x96\x27\x61\xba\xee\xac\xd4\xd9\x95\x7a\xa7\x96\xa0\x86\x51\xb7\x6d\xe2\xe7\x77\x37\xdf\xbb\x8e\xcb\xc1\xda\x5f\x3a\x69\xab\x24\x08\xd2\x97\xd3\x0c\xf1\xa3\x0a\x29\xfc\x95\xd0\x24\xc9\xff\xc2\x20\x36\xca\x8f\xf3\x1b\xde\x8a\x81\xda\x6b\x76\xd4\xe6\xe8\x00\x91\x48\x17\xda\x3c\x55\xb4\x6d\xd1\xeb\x23\x81\x40\x1c\x29\x0a\x62\xb7\x26\x69\x1d\xb5\x7d\x4c\x6b\x28\x7a\x10\xc4\xee\x7b\xf0\x2f\x00\x00\xff\xff\xbe\xba\x84\xbb\x1f\x04\x00\x00")

func templatesListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesListHtml,
		"templates/list.html",
	)
}

func templatesListHtml() (*asset, error) {
	bytes, err := templatesListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.html", size: 1055, mode: os.FileMode(436), modTime: time.Unix(1567553507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRunHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xe3\x36\x13\xbe\xeb\x57\x70\x85\x1c\xde\xf7\x10\x11\xd8\xdd\x02\x45\x4a\x0b\xd8\xa6\xfb\x05\x6c\x9b\xc0\x4d\x0a\xf4\x48\x8b\x93\x90\x58\x8a\x12\xc8\x51\xba\xa9\xe0\xff\x5e\xf0\x43\x96\xac\x95\x6b\xb7\x9b\xd4\x87\x38\x7c\xe6\x99\x19\xce\x33\x1c\x12\x66\x2f\x7e\xba\xba\xbc\xf9\xfd\xfa\x2d\x91\x58\xeb\x32\x63\xfe\x8b\x68\x6e\xee\x57\x39\x98\xdc\x03\xc0\x45\x99\x11\x42\x08\xab\x01\x39\xa9\x24\xb7\x0e\x70\x95\xdf\xde\xbc\x3b\xff\x3e\x4f\x26\xad\xcc\x67\x62\x41\xaf\x72\x87\x8f\x1a\x9c\x04\xc0\x9c\xe0\x63\x0b\xab\x1c\xe1\x0b\xd2\xca\xb9\x9c\x48\x0b\x77\xab\x5c\x22\xb6\xee\x82\xd2\x9a\x7f\xa9\x84\x29\x36\x4d\x83\x0e\x2d\x6f\xfd\xa2\x6a\x6a\xba\x03\xe8\xab\xe2\x55\xf1\x9d\x77\x1d\xb1\xa2\x56\xa6\xf0\xc1\x4a\x46\x7d\xd2\x94\x1f\x15\x6a\x28\xfb\xbe\x58\x77\xa6\xb8\x56\x2d\x68\x65\x60\xbb\x25\x09\xb9\xb4\xc0\x11\xc4\x1b\xdc\x6e\x19\x8d\xdc\xe8\x17\x76\x1b\xff\xf7\x1f\xe4\x1b\x0d\xa4\xdf\xad\xfd\xe7\x0f\x25\x50\x5e\x90\xce\x38\x40\xf2\x42\xd5\x6d\x63\x91\x1b\xfc\x61\x47\xda\xc6\x50\x34\xc5\x62\x34\x4a\xc6\x36\x8d\x78\x2c\xb3\x8c\x09\xf5\x40\x2a\xcd\x9d\x5b\xe5\x55\x63\x90\x2b\x03\x36\x2f\xb3\xe8\x25\x5f\x2e\xee\x5a\xdd\x11\x03\x64\x0f\x8f\xab\x5f\x78\xed\x19\xe7\x43\x65\x69\xdd\xf7\x60\x84\x2f\x4e\xbe\x1c\x22\x0b\x3d\x64\x15\xfa\x5c\x36\x56\xfd\xe9\x93\xeb\x7c\xac\x96\x09\x2c\xaf\x39\x4a\x46\x05\x4e\x51\x91\xb6\xe4\x6d\x3e\xa6\x10\xfb\x3e\x49\x4d\xc2\xf1\x90\xe7\xbe\xe0\x73\xff\x5f\x91\x63\xe7\x0e\xfa\x46\xf3\x92\xe3\x5b\x6b\x1b\x7b\xd0\x2f\x58\x0f\xe7\x23\x5d\x2b\xfc\x9e\x8e\xe4\xbd\x8d\xac\xa5\x38\xef\x15\x92\xaa\xa9\x6b\x85\x44\x72\xb7\x28\x9b\xba\x8b\x6d\x7a\xaf\xf0\x32\x30\x3f\x70\x27\xb7\xdb\xbd\x03\xc5\xf8\x6c\x10\xee\x15\xca\x6e\x13\xce\xfe\x67\x85\x50\x35\xc3\x57\x4c\x46\xd3\xfe\x66\x31\xf3\x72\x19\x67\x94\x8f\xbb\xea\x7b\xd0\x0e\x66\x1b\xf8\x9f\x69\x0c\xfc\x7f\xca\x31\x07\xeb\xdd\x58\x6e\xaa\x63\xa5\xfe\x18\x48\xdf\x52\x66\xcb\x2d\x4c\xea\x1c\x02\x4e\x6b\x1c\xb0\x6f\xaf\x8f\x51\xa1\xd3\x94\xc4\x32\xae\xb9\xe5\xb5\x4b\x51\x98\x7c\x5d\x46\x80\x51\xf9\x7a\xb8\x5f\xc2\xc5\x90\xe6\x29\x2e\xc2\xdf\x73\x87\x56\xb5\x20\xa6\x53\x85\x71\xf0\xc7\xf4\x96\x9b\x7b\x20\x67\x2d\xb9\x58\xcd\x72\x8d\x3e\xb6\xdc\x03\x22\xe8\x65\x3e\x6b\xd3\x8c\x33\x8a\xe2\x6f\x48\xbf\x71\xdd\x2d\xb2\x18\x9d\x06\x4f\x62\x64\x13\xeb\xb8\x5d\x46\x43\x51\x65\x36\x65\x4e\x74\x7a\x63\x51\xdd\xf1\x0a\xa7\x52\xed\xb0\x27\x56\x8b\x07\xb5\xe6\x19\x8f\x0a\xb6\x3b\x75\x7d\x7f\xc6\x8b\xdb\xf5\xa7\x78\x88\xce\xf8\x4e\x45\x5e\x3e\xab\x46\x97\x52\x69\xb1\xee\xcc\x54\xa3\x80\x11\x0f\xfe\x5b\x91\xc6\x57\x78\xb1\x7a\x86\xb2\x5c\x83\xe6\xa8\x1e\x80\xc4\x2b\x1d\xe5\xd7\x94\x1b\x55\x83\x43\x5e\xb7\xcb\xe6\xe1\xa5\x59\xb6\x7a\xfd\x96\x2d\xc3\x7d\x3e\xb5\xed\x2b\xea\x6d\xb3\x0a\x0e\xb4\xbd\xb2\xa1\xef\x73\x15\xff\x51\xdf\x2b\x1b\xee\x8c\xb1\xf9\x1e\x48\xea\x0c\x6f\xda\xd2\x29\x20\xe3\x3c\xa5\x10\x3b\xc1\x8e\x8c\x5f\xa2\x8f\x4f\xf8\x29\xec\x13\xc6\x3a\x31\xc7\x17\xf1\x19\x0f\xae\x4f\xb4\x06\xd7\xe9\xbd\xf1\x4e\xc8\x13\x0f\xb7\x05\x17\xda\xfc\x75\xce\xa3\x8d\xee\x7b\xef\x7d\x82\x78\xd8\x7c\xb8\xf9\xf9\x53\xc8\xf5\x9f\x5c\x8e\xef\x00\x84\x6f\xd4\x54\x3d\x8f\x91\x00\x3e\xe3\xe0\xfb\x24\xcb\x83\xf9\xd1\x2c\xe3\x57\x1d\x3e\xcd\xb4\xc6\x2e\xce\x2b\x3f\xa5\x87\x2e\x78\x1d\x39\xfe\x2e\x9c\x7c\x57\x7c\x34\x27\x12\xaf\x3a\x7c\x8e\x2e\x33\x2a\xd4\x43\x99\x65\x19\xa3\x91\xc9\x68\xf8\xb9\xf4\x57\x00\x00\x00\xff\xff\x5c\x8b\x59\x3f\x3e\x0d\x00\x00")

func templatesRunHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRunHtml,
		"templates/run.html",
	)
}

func templatesRunHtml() (*asset, error) {
	bytes, err := templatesRunHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/run.html", size: 3390, mode: os.FileMode(436), modTime: time.Unix(1570149359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/list.html": templatesListHtml,
	"templates/run.html": templatesRunHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"list.html": &bintree{templatesListHtml, map[string]*bintree{}},
		"run.html": &bintree{templatesRunHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

