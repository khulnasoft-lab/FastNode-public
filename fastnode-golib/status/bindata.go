// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package status

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5d\x4f\xe3\x46\x14\x7d\xe7\x57\xdc\x1a\x90\x5a\x89\xd8\x21\x84\x6d\x95\x3a\x96\x96\xc2\x4a\xfb\x52\x55\x4b\xd5\xf7\xb1\x67\x12\x0f\x8c\x67\xcc\xcc\x18\x08\xd9\xfc\xf7\x6a\xfc\x15\xdb\xb1\x9d\x00\x0d\xbb\xd5\xf2\x94\x78\xee\xf5\xb9\xf7\x9e\x73\x66\xe4\x38\xee\x4f\x58\x04\x7a\x11\x13\x08\x75\xc4\xbc\x03\x37\xfb\x00\x00\x70\x43\x82\x70\xf6\x15\xc0\xd5\x54\x33\xe2\x29\x8d\x74\xa2\x5c\x27\xbb\x2a\x62\x11\xd1\x08\x42\xad\xe3\x01\xb9\x4b\xe8\xfd\xd4\x92\x64\x26\x89\x0a\x2d\x08\x04\xd7\x84\xeb\xa9\x75\x36\xb4\xca\x74\x15\x48\x1a\x6b\x30\x55\xa7\x96\x26\x8f\xda\xb9\x41\xf7\x28\x5b\xb5\x40\xc9\x60\x6a\x19\x30\x35\x71\x9c\x40\x60\x62\xdf\xdc\x25\x44\x2e\xec\x40\x44\x4e\xf6\x75\x30\xb2\x4f\xed\xb1\x1d\x51\x6e\xdf\x28\xcb\x73\x9d\xec\xde\x97\x14\x88\xd0\x63\x80\xb9\xed\x0b\xa1\x95\x96\x28\x36\x17\xa6\x50\xb9\xe0\x9c\xd9\x67\xf6\xb9\x73\xa3\xd6\x4b\xdd\x85\x19\xe5\xb7\x20\x09\x9b\x5a\x4a\x2f\x18\x51\x21\x21\xda\xaa\xf6\x11\x28\x65\x41\x28\xc9\xec\xf9\x1d\x04\xaa\xd9\x82\x01\x73\xd6\x43\x9b\x8a\xc5\x95\x2f\xf0\x02\x96\xf9\x05\xc0\x4c\x70\x3d\x98\xa1\x88\xb2\xc5\x04\x3e\x4a\x8a\xd8\x09\x28\xc4\xd5\x40\x11\x49\x67\xbf\x97\x79\x31\xc2\x98\xf2\xf9\x04\x46\xc3\xf8\xb1\x58\x5e\xe5\x9f\x09\xb3\xef\x12\x1a\xdc\x72\x74\xdf\x84\x56\xf4\x89\x4c\xe0\x74\xbc\xbe\x09\x80\x51\xa5\x07\x69\x53\x13\xe0\x82\x93\x26\x1c\xaa\x80\x04\x82\x09\x39\x81\xc3\xb3\x5f\xcf\xaf\x3e\x5e\xac\x31\x82\x44\x2a\x13\x40\x89\x16\xcd\xfb\xc3\xd1\x0e\x00\x95\xee\xaa\x23\x01\xf8\x28\xb8\x9d\x4b\x91\x70\x3c\x81\xc3\xab\xe1\xd5\xc5\xa7\xf3\x16\x1a\x7e\xab\x0f\xc4\xc9\x20\x24\x74\x1e\xea\x09\x9c\xda\xa3\xf3\x46\x99\x87\x3c\xc4\x85\x8c\x10\x5b\x07\x23\x24\xe7\x94\x67\x0d\xc0\xb0\xd1\x07\xa6\x2a\x66\x68\x31\x01\x9f\x89\xe0\x76\x63\xc6\xf1\xf3\x66\x3c\xfd\x50\xc5\xae\x15\x3e\xaf\x46\xca\x01\x87\x1d\x33\xf8\x82\xe1\x66\x33\x1a\xf9\x8c\x54\xfa\xe9\x86\x8f\x28\x1f\x3c\x50\xac\x43\x13\x1c\xd6\x5b\x7a\x2c\x22\xe3\x61\x8b\xc7\x6c\xca\x0d\xcd\x95\x2a\x25\x41\x59\xa4\xbd\x29\x2d\x41\xe3\xc9\x8c\x4a\xa5\x07\x41\x48\x19\xde\x4a\x5b\x71\xbf\xeb\x54\xf6\x8d\xeb\xac\x8f\x3c\xd7\x6c\x21\xaf\x44\x59\x2e\x81\xce\x80\x11\x0e\x47\xf6\x17\xc2\x08\x52\x04\x56\xab\x32\xec\x86\x23\x6f\xb9\x2c\x22\xab\x95\xeb\x84\xa3\xda\xcd\x84\x63\x93\x5f\xb9\x61\xec\x5d\x93\x40\x53\xc1\x95\xeb\x84\xe3\x75\xb2\x9b\x30\x08\x18\x52\x6a\x6a\x15\xdb\xcd\x5a\x47\x73\x38\x89\xf8\x9c\xc0\x11\x47\x11\x39\x81\x23\x95\x01\xc1\x64\x0a\xf6\x75\x7a\x42\xdb\x05\x76\xb5\x49\xc8\x8e\x28\xcf\x45\xf9\x11\x74\xb8\x5c\xa6\x10\xf0\x15\x72\x88\xcf\x97\xab\x95\xe5\xe5\xcb\x66\x0c\xe4\xb9\x0e\xa3\x1b\xf5\xf3\x71\x4a\x54\x27\x61\xde\xc1\xc1\x6b\x1b\x74\xc3\x11\x50\x3c\xb5\xb6\xb7\xd5\x60\xb7\x90\x26\x4f\xb7\xff\x10\x09\xd7\x44\x36\xc0\xc7\x5e\xb1\xde\x60\x3c\x33\x51\x4e\x7a\x7a\x31\x08\x04\xc7\x84\x2b\x82\x33\x87\x0d\x94\x96\x34\x2e\xaf\x7c\x21\x31\x91\x04\x6f\x13\x26\xc8\xea\x99\xb9\x7b\x7b\xcb\xba\x90\x9e\xab\x31\x70\xf1\x20\x51\x5c\x1d\x56\x63\x13\x30\x2b\x39\x9e\xfd\x0f\x62\x49\x19\x72\xb4\xdc\xae\x4f\xda\x77\xaf\x23\x5b\x68\xfc\x82\x34\x15\x1b\x24\x66\xab\x6f\x45\xa1\x34\xd5\x6a\x04\x6e\x76\xb5\x2b\x7d\x29\x56\x46\x1e\x7c\x85\x58\x52\xae\x67\x60\x1d\xdb\xc3\xd1\xcc\x5a\xad\x8e\xf7\x4d\x67\xae\xfc\x25\x35\x4c\xf8\x49\x8b\xfd\x4b\x87\x9a\x63\x6f\x9d\xb4\x27\xae\xdd\xe6\xa4\xd9\x62\xe8\xfd\x45\x64\x40\xb8\xa6\x8c\x98\x47\xbd\x70\x33\x69\xad\x52\x5c\xa6\xd6\x34\xaa\x20\x34\x85\x2a\x8a\x2c\x97\xd5\x9b\x37\xe5\xe8\xac\xdc\x10\x23\x17\x64\x53\xb4\xba\x8f\x10\x6e\xdb\x85\x9d\x5a\xf4\xf0\xd3\xe1\xb1\x1e\x92\xee\x53\xc7\x99\xf2\x08\x67\xf6\xeb\x60\xc5\xb8\xb4\x48\xef\x81\xdd\x95\x81\xff\xf0\x14\xe8\x35\x6d\x9a\xf1\x6e\xd9\x3d\x5b\xb6\x5f\x87\x1e\x76\xde\xc8\xb0\x4d\x3e\xa0\x38\x52\xbf\xbd\x85\x2f\x84\x60\xbd\x0e\x36\x09\xdf\xd4\xc0\x85\x44\x7f\xa2\x88\xb4\xdb\xa8\x92\xf4\xb7\x4c\x08\x1c\x6f\x4d\xfb\x84\x98\x6a\xcd\x7b\xbe\xf7\x7a\x09\xec\x99\x6b\x57\xeb\xd5\x33\x11\xb6\xcd\x88\xf9\x8e\x44\xf3\x8e\xbd\xb6\x0b\x4e\xca\xc1\x33\x81\xf6\x68\xc4\xcb\x24\x7d\x06\xe1\xbd\x66\x2c\x92\xde\x4f\xd4\x3d\x9f\xa8\x5b\xd5\xe8\x21\xe8\xcd\x0e\xd5\x30\x89\x10\xa7\x4f\xa4\x74\xc5\x77\xf3\x60\x70\x8d\xa2\x98\x91\xcf\x5c\x7f\x18\xb7\x3c\x12\x3c\x80\x4a\xe3\xef\xc6\x7d\x91\x44\xbd\xc6\xed\x62\xbe\x87\x97\x1f\xed\xa9\x35\xa3\xa8\xd8\x34\xdd\x67\xec\xbb\x49\x5f\x21\xd5\x0e\x26\x6d\x55\xa0\x87\x9a\x3d\xfb\xf4\x7f\x73\xac\x5e\x2c\x34\xd9\x70\xed\x35\x7d\x22\x85\x63\xe1\x67\xdf\xa4\xfc\xf2\xee\xdc\x97\x48\xb5\x83\x73\x37\x14\xe8\xa1\xe5\xad\x5d\x6b\x8c\xf0\xdd\x18\xf6\x42\x12\x74\x8b\xc5\x43\xcb\xcf\xaa\x32\x52\x77\x69\xab\x08\x7e\x91\x5c\xff\xe5\xd1\x0a\x0e\x1b\x56\xcf\xff\x38\x78\x85\xe3\xa1\xf2\x16\x31\x10\x4c\xc5\x88\x4f\x47\x9e\xeb\x57\x35\xf5\xbd\x8e\x97\x84\xf5\x89\x02\xa4\xc9\x5c\xc8\xc5\x49\x55\xe7\x72\xbe\xfc\x0d\x64\xab\xda\xcd\x97\x98\x05\x52\xfd\x45\x66\xfb\x0f\xee\xee\x57\x98\xbd\xb6\xa8\x4b\xde\x9e\xda\x6e\x84\xea\x92\xeb\x64\x7f\x98\xb8\x4e\xf6\x0f\xf2\xbf\x01\x00\x00\xff\xff\x57\x63\x7b\x4b\x59\x1e\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 7769, mode: os.FileMode(420), modTime: time.Unix(1484793164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

