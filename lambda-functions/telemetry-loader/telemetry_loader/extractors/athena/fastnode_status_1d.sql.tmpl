WITH cpu_metrics AS (
    SELECT userId,
        date_trunc('{{interval}}', from_iso8601_timestamp({{table_name}}.timestamp) AT TIME ZONE '{{tz}}') trunacted_ts,
        approx_percentile(sample, 0.5) cpu_usage_50,
        approx_percentile(sample, 0.75) cpu_usage_75,
        approx_percentile(sample, 0.90) cpu_usage_90,
        approx_percentile(sample, 0.95) cpu_usage_95,
        approx_percentile(sample, 0.99) cpu_usage_99,
        max(sample) cpu_usage_max
        FROM {{table_name}}, unnest(coalesce(properties.cpu_samples_list, IF(LENGTH(properties.cpu_samples) > 0, TRANSFORM(split(properties.cpu_samples, ','), x -> CAST(x AS DOUBLE))))) as t(sample)
        WHERE prefix >= '{{start_prefix}}' AND prefix <= '{{end_prefix}}' AND
            timestamp >= '{{start_timestamp}}' AND timestamp < '{{end_timestamp}}'
    GROUP BY userId, date_trunc('{{interval}}', from_iso8601_timestamp({{table_name}}.timestamp) AT TIME ZONE '{{tz}}') )
SELECT
    regexp_replace({{table_name}}.userId, '\p{Cntrl}') userId,
    to_iso8601(from_iso8601_timestamp(max(timestamp))) end_time,
    to_iso8601(from_iso8601_timestamp(min(timestamp))) start_time,
    {{table_name}}.event event,
    count(*) num_events,
    coalesce(max_by(properties.mac_address, timestamp), arbitrary(properties.mac_address)) mac_address,
    coalesce(max_by(properties.os_version, timestamp), arbitrary(properties.os_version)) os_version,
    coalesce(max_by(properties.client_version, timestamp), arbitrary(properties.client_version)) client_version,
    coalesce(max_by(properties.region, timestamp), arbitrary(properties.region)) region,
    coalesce(max_by(properties.logged_in, timestamp), arbitrary(properties.logged_in)) logged_in ,
    coalesce(max_by(properties.has_proxy, timestamp), arbitrary(properties.has_proxy)) has_proxy,
    coalesce(max_by(properties.ggnn_subtoken_enabled, timestamp), arbitrary(properties.ggnn_subtoken_enabled)) ggnn_subtoken_enabled,
    coalesce(max_by(properties.lexical_enabled, timestamp), arbitrary(properties.lexical_enabled)) lexical_enabled,
    coalesce(max_by(properties.memory_total, timestamp), arbitrary(properties.memory_total)) memory_total, 
    coalesce(max_by(properties.memory_available, timestamp), arbitrary(properties.memory_available)) memory_available, 
    coalesce(max_by(properties.cpu_mhz, timestamp), arbitrary(properties.cpu_mhz)) cpu_mhz, 
    coalesce(max_by(properties.cpu_threads, timestamp), arbitrary(properties.cpu_threads)) cpu_threads, 
    coalesce(max_by(properties.atom_installed, timestamp), arbitrary(properties.atom_installed)) atom_installed, 
    coalesce(max_by(properties.atom_plugin_installed, timestamp), arbitrary(properties.atom_plugin_installed)) atom_plugin_installed, 
    coalesce(max_by(properties.sublime3_installed, timestamp), arbitrary(properties.sublime3_installed)) sublime3_installed, 
    coalesce(max_by(properties.sublime3_plugin_installed, timestamp), arbitrary(properties.sublime3_plugin_installed)) sublime3_plugin_installed, 
    coalesce(max_by(properties.intellij_installed, timestamp), arbitrary(properties.intellij_installed)) intellij_installed, 
    coalesce(max_by(properties.intellij_plugin_installed, timestamp), arbitrary(properties.intellij_plugin_installed)) intellij_plugin_installed, 
    coalesce(max_by(properties.pycharm_installed, timestamp), arbitrary(properties.pycharm_installed)) pycharm_installed, 
    coalesce(max_by(properties.pycharm_plugin_installed, timestamp), arbitrary(properties.pycharm_plugin_installed)) pycharm_plugin_installed, 
    coalesce(max_by(properties.vscode_installed, timestamp), arbitrary(properties.vscode_installed)) vscode_installed, 
    coalesce(max_by(properties.vscode_plugin_installed, timestamp), arbitrary(properties.vscode_plugin_installed)) vscode_plugin_installed, 
    coalesce(max_by(properties.vim_installed, timestamp), arbitrary(properties.vim_installed)) vim_installed, 
    coalesce(max_by(properties.vim_plugin_installed, timestamp), arbitrary(properties.vim_plugin_installed)) vim_plugin_installed, 
    coalesce(max_by(properties.nvim_installed, timestamp), arbitrary(properties.nvim_installed)) nvim_installed, 
    coalesce(max_by(properties.nvim_plugin_installed, timestamp), arbitrary(properties.nvim_plugin_installed)) nvim_plugin_installed, 
    coalesce(max_by(properties.emacs_installed, timestamp), arbitrary(properties.emacs_installed)) emacs_installed, 
    coalesce(max_by(properties.emacs_plugin_installed, timestamp), arbitrary(properties.emacs_plugin_installed)) emacs_plugin_installed, 
    coalesce(max_by(properties.atom_version, timestamp), arbitrary(properties.atom_version)) atom_version, 
    coalesce(max_by(properties.atom_plugin_version, timestamp), arbitrary(properties.atom_plugin_version)) atom_plugin_version, 
    coalesce(max_by(properties.sublime3_version, timestamp), arbitrary(properties.sublime3_version)) sublime3_version, 
    coalesce(max_by(properties.sublime3_plugin_version, timestamp), arbitrary(properties.sublime3_plugin_version)) sublime3_plugin_version, 
    coalesce(max_by(properties.intellij_version, timestamp), arbitrary(properties.intellij_version)) intellij_version, 
    coalesce(max_by(properties.intellij_plugin_version, timestamp), arbitrary(properties.intellij_plugin_version)) intellij_plugin_version, 
    coalesce(max_by(properties.pycharm_version, timestamp), arbitrary(properties.pycharm_version)) pycharm_version, 
    coalesce(max_by(properties.pycharm_plugin_version, timestamp), arbitrary(properties.pycharm_plugin_version)) pycharm_plugin_version, 
    coalesce(max_by(properties.vscode_version, timestamp), arbitrary(properties.vscode_version)) vscode_version, 
    coalesce(max_by(properties.vscode_plugin_version, timestamp), arbitrary(properties.vscode_plugin_version)) vscode_plugin_version, 
    coalesce(max_by(properties.vim_version, timestamp), arbitrary(properties.vim_version)) vim_version, 
    coalesce(max_by(properties.vim_plugin_version, timestamp), arbitrary(properties.vim_plugin_version)) vim_plugin_version, 
    coalesce(max_by(properties.nvim_version, timestamp), arbitrary(properties.nvim_version)) nvim_version, 
    coalesce(max_by(properties.nvim_plugin_version, timestamp), arbitrary(properties.nvim_plugin_version)) nvim_plugin_version,
    sum(properties.atom_events) atom_events,
    sum(properties.sublime3_events) sublime3_events,
    sum(properties.intellij_events) intellij_events,
    sum(properties.pycharm_events) pycharm_events,
    sum(properties.vscode_events) vscode_events,
    sum(properties.vim_events) vim_events,
    sum(properties.nvim_events) nvim_events,
    sum(properties.emacs_events) emacs_events,
    sum(properties.spyder_events) spyder_events,
    cast(count_if(properties.atom_running) as double) / nullif(count(properties.atom_running), 0) atom_running,
    cast(count_if(properties.sublime3_running) as double) / nullif(count(properties.sublime3_running), 0) sublime3_running,
    cast(count_if(properties.intellij_running) as double) / nullif(count(properties.intellij_running), 0) intellij_running,
    cast(count_if(properties.pycharm_running) as double) / nullif(count(properties.pycharm_running), 0) pycharm_running,
    cast(count_if(properties.vscode_running) as double) / nullif(count(properties.vscode_running), 0) vscode_running,
    cast(count_if(properties.vim_running) as double) / nullif(count(properties.vim_running), 0) vim_running,
    cast(count_if(properties.nvim_running) as double) / nullif(count(properties.nvim_running), 0) nvim_running,
    cast(count_if(properties.emacs_running) as double) / nullif(count(properties.emacs_running), 0) emacs_running,
    sum(properties.python_edit) python_edit,
    sum(properties.python_select) python_select,
    sum(properties.python_events) python_events,
    sum(properties.javascript_edit) javascript_edit,
    sum(properties.javascript_select) javascript_select,
    sum(properties.javascript_events) javascript_events,
    sum(properties.go_edit) go_edit,
    sum(properties.go_select) go_select,
    sum(properties.go_events) go_events,
    sum(properties.java_edit) java_edit,
    sum(properties.java_select) java_select,
    sum(properties.java_events) java_events,
    sum(properties.golang_requests) golang_requests,
    sum(properties.completions_requested) completions_requested,
    sum(properties.completions_requested_expected) completions_requested_expected,
    sum(properties.completions_requested_unexpected) completions_requested_unexpected,
    sum(properties.completions_triggered) completions_triggered,
    sum(properties.completions_shown) completions_shown,
    sum(properties.completions_used) completions_used,
    sum(properties.completions_num_selected) completions_num_selected,
    sum(properties.completions_num_completed) completions_num_completed,
    sum(properties.completions_chars_inserted) completions_chars_inserted,
    sum(properties.completions_timeout) completions_timeout,
    sum(properties.signatures_triggered) signatures_triggered,
    sum(properties.signatures_shown) signatures_shown,
    sum(properties.indel_javascript_total_inserts) indel_javascript_total_inserts,
    sum(properties.indel_javascript_total_deletes) indel_javascript_total_deletes,
    sum(properties.indel_javascript_whitespace_inserts) indel_javascript_whitespace_inserts,
    sum(properties.indel_javascript_whitespace_deletes) indel_javascript_whitespace_deletes,
    sum(properties.indel_javascript_multiline_inserts) indel_javascript_multiline_inserts,
    sum(properties.indel_javascript_multiline_deletes) indel_javascript_multiline_deletes,
    sum(properties.indel_javascript_multiline_whitespace_inserts) indel_javascript_multiline_whitespace_inserts,
    sum(properties.indel_javascript_multiline_whitespace_deletes) indel_javascript_multiline_whitespace_deletes,
    sum(properties.indel_javascript_occurences_difftype_none) indel_javascript_occurences_difftype_none,
    sum(properties.indel_javascript_occurences_no_diffs) indel_javascript_occurences_no_diffs,
    sum(properties.indel_vue_total_inserts) indel_vue_total_inserts,
    sum(properties.indel_vue_total_deletes) indel_vue_total_deletes,
    sum(properties.indel_vue_whitespace_inserts) indel_vue_whitespace_inserts,
    sum(properties.indel_vue_whitespace_deletes) indel_vue_whitespace_deletes,
    sum(properties.indel_vue_multiline_inserts) indel_vue_multiline_inserts,
    sum(properties.indel_vue_multiline_deletes) indel_vue_multiline_deletes,
    sum(properties.indel_vue_multiline_whitespace_inserts) indel_vue_multiline_whitespace_inserts,
    sum(properties.indel_vue_multiline_whitespace_deletes) indel_vue_multiline_whitespace_deletes,
    sum(properties.indel_vue_occurences_difftype_none) indel_vue_occurences_difftype_none,
    sum(properties.indel_vue_occurences_no_diffs) indel_vue_occurences_no_diffs,
    sum(properties.indel_go_total_inserts) indel_go_total_inserts,
    sum(properties.indel_go_total_deletes) indel_go_total_deletes,
    sum(properties.indel_go_whitespace_inserts) indel_go_whitespace_inserts,
    sum(properties.indel_go_whitespace_deletes) indel_go_whitespace_deletes,
    sum(properties.indel_go_multiline_inserts) indel_go_multiline_inserts,
    sum(properties.indel_go_multiline_deletes) indel_go_multiline_deletes,
    sum(properties.indel_go_multiline_whitespace_inserts) indel_go_multiline_whitespace_inserts,
    sum(properties.indel_go_multiline_whitespace_deletes) indel_go_multiline_whitespace_deletes,
    sum(properties.indel_go_occurences_difftype_none) indel_go_occurences_difftype_none,
    sum(properties.indel_go_occurences_no_diffs) indel_go_occurences_no_diffs,
    sum(properties.indel_python_total_inserts) indel_python_total_inserts,
    sum(properties.indel_python_total_deletes) indel_python_total_deletes,
    sum(properties.indel_python_whitespace_inserts) indel_python_whitespace_inserts,
    sum(properties.indel_python_whitespace_deletes) indel_python_whitespace_deletes,
    sum(properties.indel_python_multiline_inserts) indel_python_multiline_inserts,
    sum(properties.indel_python_multiline_deletes) indel_python_multiline_deletes,
    sum(properties.indel_python_multiline_whitespace_inserts) indel_python_multiline_whitespace_inserts,
    sum(properties.indel_python_multiline_whitespace_deletes) indel_python_multiline_whitespace_deletes,
    sum(properties.indel_python_occurences_difftype_none) indel_python_occurences_difftype_none,
    sum(properties.indel_python_occurences_no_diffs) indel_python_occurences_no_diffs,
    sum(properties.sidebar_visible_time) sidebar_visible_time,
    sum(properties.sidebar_hidden_time) sidebar_hidden_time,
    sum(properties.focus_total_changes) focus_total_changes,
    sum(properties.focus_away_from_editor) focus_away_from_editor,
    sum(properties.focus_editor_to_browser) focus_editor_to_browser,
    cast(count_if(properties.sidebar_running) as double) / nullif(count(properties.sidebar_running), 0) sidebar_running,
    sum(properties.sidebar_focused) sidebar_focused,
    sum(properties.sidebar_search_query_started) sidebar_search_query_started,
    sum(properties.sidebar_search_result_selected) sidebar_search_result_selected,
    sum(properties.sidebar_new_docs_loaded) sidebar_new_docs_loaded,
    sum(properties.sidebar_autosearch_enabled) sidebar_autosearch_enabled,
    sum(properties.sidebar_autosearch_disabled) sidebar_autosearch_disabled,
    sum(properties.sidebar_settings_home_opened) sidebar_settings_home_opened,
    sum(properties.sidebar_settings_permissions_opened) sidebar_settings_permissions_opened,
    sum(properties.sidebar_settings_plugins_opened) sidebar_settings_plugins_opened,
    sum(properties.uptime) uptime,
    avg(properties.memory_usage) memory_usage,
    cast(count_if(properties.index_loaded) as double) / nullif(count(properties.index_loaded), 0) index_loaded,
    approx_percentile(properties.ping_ms, 0.5) ping_ms,
    coalesce(max_by(properties.menubar_visible, timestamp), arbitrary(properties.menubar_visible)) menubar_visible,
    bool_and(properties.partial) partial,
    sum(properties.events_with_index) events_with_index,
    sum(properties.events_without_index) events_without_index,
    sum(properties.python_events_in_git_repo) python_events_in_git_repo,
    sum(properties.python_events_not_in_git_repo) python_events_not_in_git_repo,
    bool_or(properties.git_found) git_found,
    sum(properties.atom_ksg_opened) atom_ksg_opened,
    sum(properties.atom_ksg_query_started) atom_ksg_query_started,
    sum(properties.atom_ksg_query_searched) atom_ksg_query_searched,
    sum(properties.atom_ksg_snippet_selected) atom_ksg_snippet_selected,
    sum(properties.atom_ksg_so_opened) atom_ksg_so_opened,
    sum(properties.atom_ksg_google_opened) atom_ksg_google_opened,
    if(count(properties.python_edit) + count(properties.python_select) > 0, count_if(properties.python_edit + properties.python_select > 0)) num_events_with_python,
    if(count(properties.python_edit) > 0, count_if(properties.python_edit  > 0)) num_events_with_python_edit,
    if(count(properties.javascript_edit) + count(properties.javascript_select) > 0, count_if(properties.javascript_edit + properties.javascript_select > 0)) num_events_with_javascript,
    if(count(properties.javascript_edit) > 0, count_if(properties.javascript_edit  > 0)) num_events_with_javascript_edit,
    count_if(properties.javascript_completions_requested + properties.jsx_completions_requested + properties.vue_completions_requested  > 0) num_events_with_js_x_vue_completions_requested,
    if(count(properties.go_edit) > 0, count_if(properties.go_edit  > 0)) num_events_with_go_edit,
    if(count(properties.golang_requests) > 0, count_if(properties.golang_requests  > 0)) num_events_with_golang_requests,
    if(count(properties.atom_events) > 0, count_if(properties.atom_events  > 0)) num_events_with_atom,
    if(count(properties.sublime3_events) > 0, count_if(properties.sublime3_events  > 0)) num_events_with_sublime3,
    if(count(properties.intellij_events) > 0, count_if(properties.intellij_events  > 0)) num_events_with_intellij,
    if(count(properties.vscode_events) > 0, count_if(properties.vscode_events  > 0)) num_events_with_vscode,
    if(count(properties.vim_events) > 0, count_if(properties.vim_events  > 0)) num_events_with_vim,
    cast(sum(properties.python_events_in_git_repo) as double) / nullif(sum(properties.python_events_in_git_repo + properties.python_events_not_in_git_repo), 0) percentage_python_events_in_git_repo,
    if(count(properties.python_events_in_git_repo) > 0, count_if(properties.python_events_in_git_repo  > 0)) num_events_with_python_event_in_git_repo,
    if(count(properties.completions_triggered) > 0, count_if(properties.completions_triggered  > 0)) num_events_with_completions_triggered,
    if(count(properties.completions_shown) > 0, count_if(properties.completions_shown  > 0)) num_events_with_completions_shown,
    if(count(properties.completions_used) > 0, count_if(properties.completions_used  > 0)) num_events_with_completions_used,
    if(count(properties.completions_num_selected) > 0, count_if(properties.completions_num_selected  > 0)) num_events_with_completions_num_selected,
    if(count(properties.completions_num_completed) > 0, count_if(properties.completions_num_completed  > 0)) num_events_with_completions_num_completed,
    coalesce(sum(properties.completions_shown_by_source['traditional']), 0) completions_num_traditional_shown,
    coalesce(sum(properties.completions_completed_by_source['traditional']), 0) completions_num_traditional_completed,
    coalesce(sum(properties.completions_selected_by_source['traditional']), 0) completions_num_traditional_selected,
    coalesce(sum(properties.completions_shown_by_source['keyword_model']), 0) completions_num_keyword_shown,
    coalesce(sum(properties.completions_completed_by_source['keyword_model']), 0) completions_num_keyword_completed,
    coalesce(sum(properties.completions_selected_by_source['keyword_model']), 0) completions_num_keyword_selected,
    coalesce(sum(properties.completions_shown_by_source['call_model']), 0) completions_num_call_shown,
    coalesce(sum(properties.completions_completed_by_source['call_model']), 0) completions_num_call_completed,
    coalesce(sum(properties.completions_selected_by_source['call_model']), 0) completions_num_call_selected,
    coalesce(sum(properties.completions_shown_by_source['attribute_model']), 0) completions_num_attribute_shown,
    coalesce(sum(properties.completions_completed_by_source['attribute_model']), 0) completions_num_attribute_completed,
    coalesce(sum(properties.completions_selected_by_source['attribute_model']), 0) completions_num_attribute_selected,
    coalesce(sum(properties.completions_shown_by_source['expr_model']), 0) completions_num_expr_shown,
    coalesce(sum(properties.completions_completed_by_source['expr_model']), 0) completions_num_expr_completed,
    coalesce(sum(properties.completions_selected_by_source['expr_model']), 0) completions_num_expr_selected,
    coalesce(sum(properties.completions_shown_by_source['popular_pattern']), 0) completions_num_popular_pattern_shown,
    coalesce(sum(properties.completions_completed_by_source['popular_pattern']), 0) completions_num_popular_pattern_completed,
    coalesce(sum(properties.completions_selected_by_source['popular_pattern']), 0) completions_num_popular_pattern_selected,
    coalesce(sum(properties.completions_shown_by_source['argspec']), 0) completions_num_argspec_shown,
    coalesce(sum(properties.completions_completed_by_source['argspec']), 0) completions_num_argspec_completed,
    coalesce(sum(properties.completions_selected_by_source['argspec']), 0) completions_num_argspec_selected,
    if(count(properties.signatures_shown) > 0, count_if(properties.signatures_shown > 0)) num_events_with_signatures_shown,
    cast(sum(properties.events_with_index) as double) / nullif(sum(properties.events_with_index + properties.events_without_index), 0) percentage_events_with_index,
    cpu_metrics.cpu_usage_50 cpu_usage_50,
    cpu_metrics.cpu_usage_75 cpu_usage_75,
    cpu_metrics.cpu_usage_90 cpu_usage_90,
    cpu_metrics.cpu_usage_95 cpu_usage_95,
    cpu_metrics.cpu_usage_99 cpu_usage_99,
    cpu_metrics.cpu_usage_max cpu_usage_max
FROM {{table_name}}
JOIN cpu_metrics ON {{table_name}}.userId = cpu_metrics.userId AND date_trunc('{{interval}}', from_iso8601_timestamp({{table_name}}.timestamp) AT TIME ZONE '{{tz}}') = cpu_metrics.trunacted_ts
WHERE prefix >= '{{start_prefix}}' AND prefix <= '{{end_prefix}}' AND
    timestamp >= '{{start_timestamp}}' AND timestamp < '{{end_timestamp}}'
GROUP BY {{table_name}}.userId,
    to_iso8601(date_trunc('{{interval}}', from_iso8601_timestamp({{table_name}}.timestamp) AT TIME ZONE '{{tz}}')),
    {{table_name}}.event,
    cpu_metrics.cpu_usage_50,
    cpu_metrics.cpu_usage_75,
    cpu_metrics.cpu_usage_90,
    cpu_metrics.cpu_usage_95,
    cpu_metrics.cpu_usage_99,
    cpu_metrics.cpu_usage_max;
