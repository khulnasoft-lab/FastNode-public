package utils

import (
	"path/filepath"
	"strings"

	"github.com/khulnasoft-lab/fastnode/fastnode-go/lang"
	"github.com/khulnasoft-lab/fastnode/fastnode-golib/complete/data"
	"github.com/khulnasoft-lab/fastnode/fastnode-golib/lexicalv0/text"
)

// FilterFile returns true if the filename/buffer provided should
// be filtered from source code datasets. This includes vocab generation and training
func FilterFile(fn string, buf []byte) bool {
	// Language agnostic filters

	if filepath.Ext(fn) == "" {
		return true
	}

	// Protocol buffer files (.pb.*), min.js, etc
	if strings.Count(filepath.Base(fn), ".") > 1 {
		return true
	}

	// Node modules (may appear with variety of language extensions)
	if strings.Contains(fn, "/node_modules/") {
		return true
	}

	fileLang := lang.FromFilename(fn)
	switch fileLang {
	case lang.Golang:
		if filepath.Base(fn) == "bindata.go" {
			return true
		}
		if strings.Contains(fn, "/vendor/") || strings.Contains(fn, "/Godeps/") {
			return true
		}
	}

	// Generated by -- doing this last as its a bit more expensive
	bufstr := strings.ToLower(string(buf))
	pos := strings.Index(bufstr, "generated by")
	if pos != -1 {
		sb := data.NewBuffer(bufstr).Select(data.Selection{Begin: pos, End: pos})
		if text.CursorInComment(sb, fileLang) {
			return true
		}
	}

	return false
}
