// Code generated by go-bindata.
// sources:
// templates/input.html
// templates/root.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesInputHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6e\xa3\xb8\x17\xbf\xcf\x53\x1c\x79\xe6\x22\x91\x0a\x74\x66\x32\xa3\xbf\xf2\x07\xa4\xdd\x6a\xb7\x57\xd3\x1d\x69\xf6\x05\x8c\x39\x04\x37\xc6\xf6\xd8\x4e\xda\x2c\xe2\xdd\x57\x86\x10\x08\x25\x95\x5a\x6d\x6e\x62\x8e\xcf\xc7\xef\x7c\x3b\x2e\x5d\x25\xd2\x45\x5c\x22\xcd\xd3\x05\x00\x40\x6c\x99\xe1\xda\x81\x3b\x6a\x4c\x88\xc3\x67\x17\x3d\xd2\x03\xed\xa8\x04\xac\x61\x09\x29\x9d\xd3\x76\x13\x45\x4c\xe5\x18\x3e\xfe\xda\xa3\x39\x86\x4c\x55\x51\x77\x0c\x3e\x87\x9f\xc2\x75\x58\x71\x19\x3e\x5a\x92\xc6\x51\x27\xfb\x76\xf5\x15\x7d\x66\xb9\x0c\x33\xa5\x9c\x75\x86\x6a\xff\xe1\xcd\x9c\x09\xd1\x97\xf0\x4b\xf8\x35\x7a\xb4\x03\xe9\x9a\x59\xc1\xe5\x0e\x0c\x8a\x84\x58\x77\x14\x68\x4b\x44\x47\xc6\x28\x98\xb5\x04\x4a\x83\xc5\xdb\xed\x33\x3b\x05\xe0\x95\xa5\x71\xe4\x8d\xf6\x6e\x7b\xab\xdd\xd9\xff\xbc\x49\x6a\x90\x7e\xf0\x21\x84\xfa\x4c\xf7\xbf\x42\x49\x57\x71\x71\xdc\xc0\x77\x94\x42\xdd\xc0\x77\x25\x29\x53\x37\x70\xa7\xa4\x55\x82\xda\x1b\x20\x77\x6a\x6f\x38\x1a\x78\xc0\x27\x72\x03\x95\x92\xca\x6a\xca\xf0\xff\x67\x45\xcd\x60\x2a\x0f\xb5\x51\x3a\x90\xb4\x9a\x5a\x62\x4a\x28\xb3\x81\x0f\xdf\xbe\x7d\x9b\x95\xa4\x99\x98\x03\x17\x58\xfe\x0f\x6e\xe0\xd3\x5a\x3f\x8f\xc5\xce\x47\x1f\x24\x2d\xd0\x71\x25\x27\xd2\x15\x35\x5b\x2e\x03\x81\x85\xdb\xc0\xe7\xdb\xb1\xfc\x08\x4f\x26\x28\xdb\xcd\x6b\x2e\xb8\x70\x68\x30\x0f\xd4\xde\xcd\x3b\x63\x30\x9f\xfa\x12\x47\xa3\xe8\xc7\x8e\x3b\x81\xe9\xdd\x19\xa2\x05\x2d\xe8\x71\x6b\xd4\x5e\xe6\x71\xd4\xdd\x2e\xe2\xa8\xeb\x88\x38\x53\xf9\x31\x5d\xc4\x39\x3f\x00\x13\xd4\xda\x84\x30\x25\x1d\xe5\x12\x4d\x50\x88\x3d\xcf\x49\xda\xc1\x8b\xcb\x75\x7a\x7f\xff\xf0\x00\x6c\xa4\x19\x9f\xb5\x50\x86\x3a\x65\xe2\xa8\x5c\x9f\x00\x8c\x74\x19\xf5\x44\x86\xa2\xb8\xb4\x22\x82\x2a\x0f\xd6\xa3\xeb\x96\xa5\x50\xa6\x02\xca\xbc\xfa\x84\x10\xa8\xd0\x95\x2a\x4f\x88\x56\xd6\x11\xe0\x79\x42\x3c\x43\x90\xed\x8b\x02\xcd\x44\x76\x6a\xa2\xe5\xf4\x7e\xeb\x19\xc6\x2e\x54\xa7\x2a\xbd\x90\xf0\xfe\x1b\x25\x3a\x6b\xbe\x7c\x09\xf8\xd2\x4a\xc8\xc9\x28\x18\xf5\x64\x13\xf2\xe9\x96\xf8\x94\xd8\x84\xac\x6f\x09\x78\xc9\x09\xb6\xba\x0e\x7f\x6f\x8f\x4d\x13\x47\xbd\xa5\x19\xc4\x51\xce\x0f\xaf\x3b\x72\x19\xc5\x6b\x5c\xa7\x88\x7e\xbd\xc2\xda\xe7\xf0\x2f\x93\xa3\xe1\x72\x3b\x24\x6c\x96\x93\x4b\xbd\xef\xa7\x98\xa1\x39\x57\x7d\x14\xd4\x49\x9e\xc0\x81\x8a\x3d\x26\x84\x0a\x5d\xd2\x0c\x1d\x67\x54\x10\xa8\x6b\xe0\x05\xe0\x2f\x08\x7b\x43\x70\xc9\xd1\x34\xc0\x4a\x64\x3b\xcc\xeb\x1a\x50\xe6\xd0\x34\x29\xfc\x36\xe2\x88\x33\xf3\x9f\xe0\x62\x54\x08\x6d\x54\x36\x8f\xe9\x7c\x3b\x83\x07\x52\xb8\xa3\x42\xfc\x30\x2a\x83\x9f\x4c\x19\xbc\x0a\xe9\x4a\xf2\xde\x93\x9a\xb1\x63\x2d\xa0\x4c\x3d\xf7\xbe\xa1\xf4\x93\x2a\xe8\x86\x43\xeb\xa3\xaf\xcd\x97\xd4\xce\xd1\xf0\x8f\xf6\xe2\xcf\x9e\x0e\x83\x8b\x30\xf2\xf1\x3a\x14\x41\x33\x14\xbe\xa4\x67\x6c\xa4\x9d\x5a\xf0\xf3\xc9\x60\x3e\x9e\x06\x71\xd4\x0a\xbe\x29\x52\xd7\xc8\xd9\xde\x39\x25\x4f\xe1\xb0\xfb\xac\xe2\x8e\xf4\xd1\xcc\x9c\x84\xcc\xc9\x40\x1b\x5e\x51\x73\x24\xe9\x3d\xba\x4b\x1c\x9d\xf4\x64\xb2\x44\xbe\x3b\x27\x34\x9f\x23\x1f\xca\x36\xf8\x36\xd0\x54\xa2\xf0\x8b\xed\x02\xd4\xf4\xf3\x65\x62\xff\xd7\x0f\x8b\x33\x86\x5e\x55\x5d\x3b\xac\xb4\xa0\x0e\xe1\xe2\x3a\x13\x8a\xed\x08\x84\xa3\x31\xed\xc7\xc4\xd9\xd0\xe9\xd8\xff\xbd\xfa\xa8\xe8\x24\x3e\x2e\xc9\x68\x2f\x05\x6d\x2a\xc8\x2a\x64\x82\xb3\xdd\xb2\xd8\xcb\x76\xa4\x2e\xf1\x80\xd2\xad\x86\xc5\xc2\x0b\x58\x7e\xec\xa8\xa1\xa3\x66\x8b\x6e\x15\x6a\x6a\x50\xba\xe5\x2a\x64\x25\x17\xb9\x41\x79\xa9\xb9\xa7\x92\x55\xc8\xed\x92\x6c\x0e\xdc\xf2\x4c\x20\x59\xad\x2e\xf7\xd5\xfb\xd5\x96\x3c\xc7\xe5\x6a\x58\x72\x28\xec\x74\x4d\xbf\x5f\xb9\x2d\xd5\xd3\x58\xf9\xf9\xd4\x29\xb4\x4e\xe9\x1f\x46\x69\xba\xa5\x6d\xc0\x3a\xce\x66\xb5\x58\x0c\x0f\xae\x38\x3a\x6d\xcd\xa8\x7b\x5d\x2e\xea\x3a\xc7\x82\xcb\xd9\x1c\x37\xcd\x8b\xad\x38\x30\x8d\x97\x63\xd7\x75\x2f\x58\xba\x4c\x42\x5d\xfb\xce\xfe\xb9\xe3\x7a\x28\x99\xa6\x81\xf1\x7b\xa1\xae\x51\xe6\x4d\x43\xa0\xdd\xf1\x09\xa9\xeb\xf0\x6f\xa5\x84\xe3\xba\x69\x26\x93\xa7\xae\xc3\xb1\x9a\x51\xa9\x4f\x5a\xb8\x9b\x28\x5b\x07\x4b\x81\x12\xc2\xbb\x53\x1c\x57\x70\xdb\x8c\x9e\x2d\xd7\x1d\x1c\x22\xff\xb2\xc9\xeb\xda\x50\xb9\xc5\x41\xeb\x08\xc8\x25\xdf\xeb\x3d\x34\x23\x76\x0a\xc5\x64\x00\x5c\xb4\xf1\x79\x12\x8e\xfb\xad\x97\x5b\x2c\x16\xff\x06\x00\x00\xff\xff\x90\xc3\x6d\x1e\x3a\x0c\x00\x00")

func templatesInputHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputHtml,
		"templates/input.html",
	)
}

func templatesInputHtml() (*asset, error) {
	bytes, err := templatesInputHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/input.html", size: 3130, mode: os.FileMode(420), modTime: time.Unix(1574202724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x06\x6c\x0f\x36\x10\x51\x4d\x9a\x0d\x16\xaa\xac\x4b\x80\x02\x0b\x6c\x8a\x02\xed\x62\xcf\x34\x39\xb6\x98\x50\xa4\x4a\x52\x6e\xbc\x82\xfe\x7d\x41\x4b\x96\x28\x25\x5d\x6c\x51\x1d\x6c\x6a\xc4\x79\x8f\x7c\xf3\x66\xf2\xd2\x57\xaa\x58\xe5\x25\x32\x51\xac\x00\x00\x72\xc7\xad\xac\x3d\xf8\x53\x8d\x5b\xe2\xf1\xd9\xa7\x8f\xec\xc8\xfa\x28\x01\x67\xf9\x96\x94\xde\xd7\x2e\x4b\x53\x6e\x04\xd2\xc7\x6f\x0d\xda\x13\xe5\xa6\x4a\xfb\x65\x72\x43\xaf\xe9\x2d\xad\xa4\xa6\x8f\x8e\x14\x79\xda\xe7\xfe\x3c\x7c\xc5\x9e\xb9\xd0\x74\x67\x8c\x77\xde\xb2\x3a\xbc\x04\x9a\x31\x90\xbe\xa7\xef\xe9\x6f\xe9\xa3\x9b\x42\x3f\xa2\x55\x52\x3f\x81\x45\xb5\x25\xce\x9f\x14\xba\x12\xd1\x93\xf8\x14\xdc\x39\x02\xa5\xc5\xfd\xcf\xf3\x73\xb7\x3c\x40\x00\x2b\xf2\x34\x90\x5e\xae\x1d\x58\xfb\x75\x78\x02\x25\xb3\xc8\xde\x04\x09\xa1\x1d\xe3\xe1\xd9\x1b\xed\x2b\xa9\x4e\x19\x3c\xa0\x56\xe6\x0a\x1e\x8c\x66\xdc\x5c\xc1\xbd\xd1\xce\x28\xe6\xae\x80\xdc\x9b\xc6\x4a\xb4\xf0\x09\xbf\x93\x2b\xa8\x8c\x36\xae\x66\x1c\x3f\x8c\x40\xdd\x44\x25\x68\x6d\x4d\x9d\x68\x56\x2d\x99\xb8\x51\xc6\x66\xf0\xe6\xee\xee\xee\xd5\x4c\xb6\x53\xaf\x1d\x2e\x71\xf2\x1f\xcc\xe0\xfa\xb6\x7e\x8e\xd3\xc6\x65\x10\xa9\x56\xe8\xa5\xd1\x8b\xec\x8a\xd9\x83\xd4\x89\xc2\xbd\xcf\xe0\xe6\x5d\x9c\x1f\x9d\x67\xa7\x18\x7f\x7a\x1d\xf9\xc8\x94\x14\xc9\x0f\xf1\x77\xc6\x0a\xb4\x19\xdc\xd4\xcf\xe0\x8c\x92\x02\x0e\x16\x51\x7f\x78\x65\x53\x62\x99\x90\x8d\xcb\xe0\xfa\xdd\xfc\x1a\xe7\x72\xa5\x51\xbd\x72\x2f\xbd\xc2\xe2\x7e\x24\x75\x50\x2b\x76\x3a\x58\xd3\x68\x91\xa7\xfd\xd7\x55\x9e\xf6\x3d\x94\xef\x8c\x38\x15\xab\x5c\xc8\x23\x70\xc5\x9c\xdb\x12\x6e\xb4\x67\x52\xa3\x4d\xf6\xaa\x91\x82\x0c\xb0\xe5\x6d\x71\xcf\x94\xfa\x6c\xcd\x0e\x1e\x8c\x40\x05\x5f\x58\xa0\x80\x3f\xb4\xab\x91\x7b\x63\xf3\xb4\xbc\x1d\x36\xcf\xe0\x54\x52\x89\xe4\x77\x02\x52\x6c\x89\x3b\xe7\xb8\xa4\x66\x1a\x15\x29\x7a\xad\xda\xd6\x32\x7d\x40\xa0\x3d\xa2\xeb\xa6\xa2\xb6\xad\xc7\xaa\x56\xcc\x23\x0c\xb9\xc9\x4e\x19\xfe\x44\x80\x46\xbb\xf2\x9d\x4d\x8b\xf3\xcf\xaa\x6d\x51\x8b\x6e\x28\x42\x9e\x0a\x79\x2c\x56\xab\xe1\xff\xbf\xbb\xb9\x3f\xfa\xdb\x35\xa1\xdc\x28\xc5\x6a\x27\x77\x0a\xc9\x86\x72\x25\xf9\xd3\x7a\xdf\x68\x1e\xd4\x5c\xe3\x11\xb5\xdf\x4c\x85\x94\x7b\x58\xbf\xed\xa3\xd4\x33\x7b\x40\xbf\xa1\x35\xb3\xa8\xfd\x7a\x43\x79\x29\x95\xb0\xa8\xe7\xa0\xc9\x25\x4c\x36\x54\xba\x35\xc9\x8e\x72\x20\xdb\xcc\x0d\xf2\x0b\xb8\xa5\x14\xb8\xde\x4c\x46\x41\xe5\x96\xcd\xf1\x0b\xe8\xae\x34\xdf\x63\xf4\x71\xd5\x23\x3a\x6f\xea\xcf\xd6\xd4\xec\xc0\xce\x9a\xf5\x3b\xbb\x4d\xa8\xc4\x65\xce\xe5\xe9\x60\xbd\xb4\x1f\xea\xab\xb6\x15\xb8\x97\x7a\x59\xe8\xa1\xcc\x67\x4b\x4d\x13\x29\xaf\x2d\x46\x0e\x1b\xcb\x55\xcc\x6e\x98\x87\x79\x35\x0f\xf5\xa6\xa2\x5f\x4c\x63\x39\x46\x16\xea\xed\x32\xdf\x9f\xa7\xb5\x8d\x5f\xcf\x26\x8a\x13\xfe\x72\x68\xcf\x6e\x12\x90\x41\xae\xd8\x0e\x55\xd1\xb6\x34\x84\xbf\x86\x68\xd7\xe5\x69\x1f\xed\xcd\x19\xe7\x86\x1e\x8a\xb3\xe4\x1e\xe8\x57\xdb\x68\xce\x7c\x48\x84\x71\x0d\x6d\x1b\x8a\xd7\x75\xf0\xb1\x51\x0a\x38\x53\x0a\x06\x97\x5f\xd0\xa3\x13\xcf\xce\xb8\xe8\xc3\x97\x95\x84\xf3\xe0\xd8\x12\x21\x5d\x18\x12\x99\x36\xfa\x85\x86\x3d\x45\x34\x4f\x5e\xb0\xf6\x9a\xc2\xd0\xc4\xd1\xce\x85\xbe\xb0\x68\xe8\x69\x30\xba\x44\xea\xbd\x99\x37\xf5\x80\x8a\x5a\x40\xdc\xea\xd3\x0d\x87\xe5\xd8\xf1\x93\x81\x5e\x02\xc7\x2e\x1a\x05\x99\xc6\x72\x50\x1f\xbf\x01\xfd\x33\x5c\x0c\xae\xbb\x6e\x39\xb9\x07\x92\x48\x9b\x5e\x97\x97\x60\xc9\x39\x4e\x96\xea\x44\xb2\xcc\x6e\xb3\x2c\x60\xb8\xd2\x47\x64\xbe\xb1\xe8\x20\x8b\xe6\xe0\xa0\xee\xe5\xdb\xd2\xba\xa3\xf9\x3e\xb1\x0a\x27\x67\x40\x16\xb8\xff\x46\x79\x28\x7d\xd7\xc1\xdc\x86\x17\xe5\xfe\x87\xb6\xff\x06\x00\x00\xff\xff\x97\x86\xc2\xf2\x7a\x09\x00\x00")

func templatesRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRootHtml,
		"templates/root.html",
	)
}

func templatesRootHtml() (*asset, error) {
	bytes, err := templatesRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root.html", size: 2426, mode: os.FileMode(420), modTime: time.Unix(1574202724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/input.html": templatesInputHtml,
	"templates/root.html": templatesRootHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"input.html": &bintree{templatesInputHtml, map[string]*bintree{}},
		"root.html": &bintree{templatesRootHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

