// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/source.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x57\xdb\xb8\x16\x7e\xef\xaf\xd0\x78\x1e\x6a\x16\x44\x26\x5c\x42\x69\x13\xd6\xe2\x5a\x28\x05\x5a\x02\xd3\xcb\xcb\x2c\xc5\xde\xb1\x95\xc8\x92\x91\xe4\x40\x38\x33\xff\xfd\x2c\xf9\x92\x04\x47\x36\x30\x3d\xeb\xac\xe9\x0b\xb6\xb4\x2f\xdf\xb7\x2f\xca\x96\xfb\xa6\xfb\x5b\x20\x7c\x3d\x4d\x00\x45\x3a\x66\x7b\x6f\xba\xe5\x1f\x20\xc1\xde\x1b\x84\x10\xea\x32\xca\xc7\x48\x02\xeb\x39\x4a\x4f\x19\xa8\x08\x40\x3b\x28\x92\x30\xec\x39\x91\xd6\x89\x7a\xef\x79\x4a\x13\x7f\x9c\x10\x1d\xe1\x81\x10\x5a\x69\x49\x12\x3f\xe0\xd8\x17\xb1\x37\x5b\xf0\xb6\xf0\x06\x6e\x7b\xbe\x52\xf3\x35\x1c\x53\x8e\x7d\xa5\x1c\x44\xb9\x86\x50\x52\x3d\xed\x39\x2a\x22\x9b\xef\xb6\x5a\x1f\x3f\x3d\xfe\xbc\x3b\xf9\x78\x3f\x68\x7f\xbd\xb9\xb9\xec\xdc\x4f\xb7\x77\x87\xc3\x93\xf6\x41\xfa\xf1\x53\xf2\xb9\x4f\x76\x8f\xc6\xe7\x17\xc9\xfa\x51\x48\x2f\x8e\xe2\x2d\xfa\xe3\x62\xb4\xb3\x1e\xfe\xfc\x76\xfe\x63\x70\xb6\xb3\xde\xd1\xdf\xfa\x0e\xf2\xa5\x50\x4a\x48\x1a\x52\xde\x73\x08\x17\x7c\x1a\x8b\x54\x39\x05\x2f\xe5\x4b\x9a\x68\xa4\xa4\x3f\xe7\xe1\x8b\x00\xf0\xe8\x2e\x05\x39\xcd\xc0\xe7\x8f\xad\x4d\xbc\x89\xdb\x58\x31\x1a\x67\x80\x47\x56\xbc\x77\xef\xa8\xf7\x7d\x75\xb7\xb3\x7d\xf4\x78\xb5\x2e\x6f\x76\xc8\xe0\x7c\xab\xfd\xa9\xaf\xbf\x9e\xed\xdf\xfd\x11\x5e\xff\xf1\x98\x0c\x1e\xc5\xb6\x8a\xbf\x9f\x27\x5b\x3f\x86\xd7\x93\xd3\xd5\x77\x64\xa0\x6f\x8e\xdb\x5f\x68\x67\x44\x1f\x45\x3d\xde\xae\x97\x63\x6d\x02\x1e\xf0\x91\xc2\x3e\x13\x69\x30\x64\x44\x42\x86\x9e\x8c\xc8\x83\xc7\xe8\x40\x79\x89\x48\x12\x90\x78\xa4\xbc\x36\x6e\x6f\xe1\x8e\x97\xc6\x41\xb9\x58\xcf\xe8\xfe\x74\x9f\x9e\x0c\xaf\xd9\xc5\xc9\xb4\x43\xb7\xfb\xd7\xe4\x61\x32\xbc\x3a\xa4\xc3\x83\xdb\xaf\xd3\xf6\xc3\x69\xf0\xc9\x9b\x0a\xba\x73\x72\x7d\xf9\xfd\xe2\xfa\x20\xdd\xfe\x76\x1a\xfc\xfc\x91\xb6\xa3\xfd\xce\xcf\xab\x01\x0b\x53\xfd\x4b\x8c\x5e\x51\x52\xa3\x6a\x45\xd9\xe9\x1c\xac\xdf\x86\x6c\x7a\xbd\x3a\xba\xec\x1c\x8e\x27\x93\xb3\xc3\xab\x83\x8d\x91\x20\xc3\xed\xb3\x2d\xb6\x19\xc6\xbb\x1f\x6f\x3b\xa7\x7e\x5b\x84\x9d\xcf\x6a\x87\x76\x6e\xbd\x78\x3c\x26\x41\x7a\x4e\x0e\x22\xb6\xff\x7d\xb2\x3b\x7e\x2d\x1d\xd3\x56\x3d\x47\xc3\x83\xf6\x46\x64\x42\xf2\x55\xe7\x55\x79\x9b\x50\x65\x38\xb6\xf1\xba\x79\x2c\xb9\x55\xfd\xd9\x3b\x74\xc1\x7d\xd6\x61\x4f\x3b\xf6\xf5\x8e\x8d\x91\xbd\xae\x67\x9c\x95\x3c\x8d\xb7\xaa\x9f\x62\xcf\xcb\x36\x8b\x17\x4d\x35\x83\xbd\x43\xc2\x18\x3a\xe3\x2a\x01\x5f\x0b\xd9\xf5\xf2\xd5\x37\x5d\x2f\x3f\x6c\xba\x03\x11\x4c\x0b\x85\x80\x4e\x90\xcf\x88\x52\x3d\xc7\x17\x5c\x13\xca\x41\xb6\x86\x2c\xa5\x41\x61\xbf\x2a\x25\xc5\xfd\xc2\xce\xb2\x0d\xd6\xda\x34\xe0\x03\x3a\x69\x96\xea\x54\xac\x64\x32\x43\x21\x63\x24\x78\x3f\x1d\xc4\x54\xf7\x1c\x09\x3a\x95\x1c\x0d\x09\x53\xf0\xc1\x41\x84\xd1\x90\xf7\x1c\x1f\xb8\x06\xe9\x94\xc6\x62\xd9\x22\xa9\x16\x16\x73\x99\x49\xca\x93\x54\x23\x1a\xf4\x1c\x05\x44\xfa\xd1\x9f\x26\x7e\x33\x65\xe3\xb0\x65\x88\x4b\xc1\x50\x2c\x5b\x2a\x6e\x6d\x2c\x26\xd4\x41\x09\x23\x3e\x44\x82\x05\x20\x7b\x4e\x3f\x33\x81\xd4\x34\x1e\x08\x86\x4c\xcf\x38\x88\x48\x4a\x5a\x8c\x0c\x4c\x55\xe4\xfb\x75\x50\x06\xa9\xd6\x82\x2f\x60\x99\xc1\x18\x68\x8e\x06\x9a\xb7\x12\x49\x63\x22\xa7\x25\x82\x5c\xc1\xd9\xcb\xcd\x76\xbd\xfc\xdd\x12\x37\xcf\xf0\xa8\xc4\xfb\xf9\x14\x2c\x27\xaa\xfa\xda\x9c\xf7\x68\xab\x26\x25\xc6\x78\x7b\xc3\xc9\x99\x6a\xa2\x4d\xe7\xe6\x7f\x31\xc6\x5d\x2f\xda\xfa\xa7\x1e\x2b\x04\xda\x1b\xb6\x22\x8a\x36\x2b\xb0\xb2\x7e\x50\x5d\x2f\xda\xb4\x48\x27\x12\x32\x9c\xbe\x91\x31\x01\x49\x24\x34\x46\xf2\xff\x82\xf8\x0b\xd1\x1a\x24\xb7\x80\xfe\x1f\xa3\xc9\xb8\x27\x85\xb7\x5f\xac\x87\x7f\xc8\x75\x5f\x86\xa8\x9f\x80\xff\x4c\x82\x88\x0c\xcd\x81\xf6\xef\x49\x91\x48\x52\x46\x24\xea\xd3\x90\x13\x9d\x4a\x78\xae\xc2\xd4\x4c\xf0\x95\x1c\x16\x1f\x1b\x7f\xf1\xe6\xda\xc3\x94\xfb\x9a\x0a\x8e\x7c\x06\x44\x1e\x46\x94\x05\x12\xb8\x0b\x0c\xe2\x15\xf4\x9f\x27\x7e\xef\x23\xca\x00\x65\x5b\x78\x48\xa5\xd2\x99\x74\x55\xca\xfc\xcb\x44\x24\xc4\x62\x02\x99\xcc\x92\xce\x87\x27\x2a\x7f\xbf\x59\x7e\x9a\xe1\x92\xc0\x03\x90\x37\xf0\xa0\x33\x2b\x97\x24\x86\x35\x64\xf8\x54\x1d\x4f\x88\xcc\x1c\xa3\x1e\x0a\x84\x9f\xc6\xc0\x35\xce\x66\xc5\x3e\xb0\xec\xe7\xcd\x75\x7e\x77\x56\x4b\x1b\x15\x08\x16\xf6\x4f\x05\x32\x06\x24\x49\x80\x07\x39\xa5\x99\x0f\x5f\x02\xd1\x60\x00\x5e\x8a\x00\xdc\x0c\xda\x82\x72\x2d\xa5\x63\x29\x85\x74\x25\xa8\xa4\xca\xc4\xac\x61\x63\xc7\x5d\x79\xb2\x8e\x75\x04\xdc\x2d\xcd\xb8\x4b\x11\xc8\x75\x67\xe1\x2a\x4f\xd4\x35\xe4\x9c\x80\xf6\x23\x04\xc6\xe3\x7b\xe4\xa0\xd5\xdc\x45\xbe\x8f\x56\x91\x93\x2f\xea\x6a\x5e\x5e\x42\xa3\x3c\x80\xdc\xf2\x6c\xb0\xe5\xa5\xdc\x3b\x7e\x36\x3f\xf3\x23\xa6\x31\x43\x8b\x06\x2b\x82\xe5\x16\x1e\x0a\x79\x4c\xfc\x68\x1e\xb0\x62\x67\x0d\x51\x1e\xc0\xc3\xca\x72\xf0\x32\xa8\x8b\xf8\xf2\xdc\x1a\x27\xc0\xb5\xeb\x24\x55\x50\x8b\xfe\x8e\xab\x15\x92\x58\x84\x33\x0f\x12\x9a\x7c\x48\xb0\x7a\x91\xf0\xa2\xf2\x2b\xd0\xe0\x80\xaa\x84\x91\xe9\x8a\xcd\xd4\x53\x94\xd2\xf4\x82\x15\xa8\x2f\x18\x23\x89\x6a\x42\x5b\x0c\x1e\x16\x2f\xa5\x32\xce\x4e\x4c\xd3\x72\x68\xb5\x87\x1c\x54\x9d\x60\x1a\x34\x03\xa2\x89\x02\x8d\xb5\x08\x43\x66\x50\x38\xe5\xd6\x8b\xb4\x88\x0c\x41\x1b\xad\xdf\x8b\xa0\x98\x1a\xcf\x52\x8f\xb5\xe8\x6b\x49\x79\xe8\xae\x98\xea\x3f\x2c\x54\x83\x26\xb3\x2f\x09\xbe\x13\x11\x15\x81\x7a\x8f\x9c\xd5\x32\x0f\xf9\x0a\x66\xc0\x43\x1d\x2d\xf8\xb5\x26\xa6\xae\x92\x4a\x10\x75\x89\xca\x9d\x34\xa4\x29\xa0\x13\x5b\x8e\x0a\x70\x95\x0c\xcd\x82\x5c\x27\x4f\x03\x13\xd5\x5f\x08\x6a\x2d\xd1\xdc\x81\x05\xa9\x95\x36\xa3\x4a\x37\x90\x4e\x99\x8d\xb3\x51\xaa\x32\x36\x6b\xad\x50\x8a\x34\xb1\x80\x2d\x48\x2f\xc2\x34\xf2\xf5\xf9\x2b\x73\xbe\x74\xfe\x44\xbe\xed\xc4\x9e\xb3\x69\xe0\xc2\xa8\x8d\x4b\xce\xa7\x9e\x4d\x8b\x6a\x88\x2d\x94\x66\x71\x78\x4a\xaa\xc6\x83\x01\x97\x4a\x86\x7a\x88\xc3\x3d\xba\xbd\xfe\xec\xbe\xf5\x94\x48\xa5\x0f\x6f\xd7\x10\x13\x3e\x31\xe4\x70\x7e\x07\xaf\x31\x91\x4a\x86\xf3\x9b\xcc\xdc\x4a\x7e\x57\xf9\x42\x24\x89\x95\x6b\x0f\x4b\x19\xfe\xf7\x28\xf2\xb1\xd2\x72\xcd\x2a\xf5\x77\x03\x6e\xd2\x10\x53\x52\x17\x52\x82\xcd\xc5\x1c\xf5\x32\xd8\xe6\xb1\x4e\x6c\x7e\xc4\xfc\x39\x60\x84\x8f\x6b\x42\x4d\x5e\x76\x78\x9c\x66\x4c\x4d\x3f\xe5\x6c\x4d\x17\xa1\x43\x91\x72\x3d\x5b\xf5\xcd\xdb\x33\xa7\x08\xca\x8b\x62\xd1\x25\xb1\x88\x55\xa3\xf6\xa2\x1f\x7b\x77\x20\x82\x69\xb5\x88\x7d\xc1\x95\x60\x80\x99\x08\xf3\xfd\x0f\x95\x69\xc6\x36\x91\x84\x42\x9b\x21\x24\x65\x5a\xa1\xa1\x90\xc8\x59\x35\xaa\x38\xbf\x30\x37\x58\xc8\x6f\x5f\x6b\x28\x93\xce\x5e\x1a\x84\x67\xb3\x44\x21\x3f\x1b\x51\xea\x55\xca\xcb\x43\xa1\x51\xbc\x36\x51\x9a\x0f\xeb\x85\xce\x7c\x65\xa5\x29\xa2\x79\x3f\xb8\xcb\xc3\x9f\x2d\x5c\xb9\x30\xe5\x21\xc6\xb8\x5a\xb6\xcb\xfd\xe9\x78\xc5\x67\x83\xe7\xfa\x73\xde\x97\x79\x1f\x62\x05\xda\x75\xee\x9c\xb5\xfa\x11\x6d\xf1\xe3\xc8\x0a\x9e\x10\x96\x56\x67\xe9\xa1\x19\x36\xdd\x54\xb2\xc6\xe9\xd5\x4c\xa0\x82\x2b\xb0\x8c\x61\x74\x88\xdc\xdf\xca\x7d\x2c\xc6\x75\xa7\x66\x75\x8e\xce\xcc\xd9\x1b\x42\x47\x52\xdc\xa3\xa7\xa2\xc5\xfc\x6b\x42\x6d\xeb\x0f\xcb\x68\x9d\x7d\x64\x2a\xd5\x2b\xdd\x63\xe1\x5a\x4a\xa2\xde\xde\x4c\x0b\x8f\x94\xe0\xee\x8a\x4d\xdc\x14\x4f\x2e\x3a\x6f\x35\x6b\x53\xce\x72\x43\x82\xe0\x78\x02\x5c\x7f\xa6\x4a\x03\x07\xe9\xbe\x3d\xba\xba\x38\x14\x5c\x9b\x35\x41\x02\x08\xde\xae\xcd\x0a\x6e\xa9\xd2\x9e\x49\xb1\xb3\x82\x05\xf7\x19\xf5\xc7\xa8\x37\x37\x02\x13\x5b\x36\xca\x5a\xae\x1c\x29\x1f\x5e\xe3\xaf\x2c\x29\xc1\xc7\x30\x4d\x24\x28\xf5\xbc\x5f\x53\xfa\x63\x98\xa2\x1e\x82\x09\xbe\x8f\xa8\x1f\xa1\xbf\xfe\x32\xcf\x63\x98\x1e\x8a\x00\x96\xd3\x6a\x6a\x2b\xd3\xe8\xa1\xf6\x66\x5d\x61\xd9\xe9\xa0\xa5\xaa\x58\x20\x58\x1e\x9f\xf3\xef\xc0\x5d\x2f\xff\x7a\xda\xf5\xf2\xff\xc0\xf9\x6f\x00\x00\x00\xff\xff\x44\x72\x19\x54\xd9\x19\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 6617, mode: os.FileMode(420), modTime: time.Unix(1563585116, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSourceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5b\x93\xb2\x38\x10\x7d\xf7\x57\xb0\xbc\x4e\x99\x88\x17\x1c\xb7\xd0\x2a\x1d\xd7\xeb\xe7\xb8\xe3\xe5\x1b\xf5\x2d\x84\x00\xc1\x40\x30\x09\x28\x7e\x35\xff\x7d\x0b\x2f\x3b\xae\x3b\xb3\x55\xd6\x3e\xd1\x39\xdd\xd5\xe7\x9c\x90\xee\x82\xf5\x9b\xc3\xb1\xca\x62\xa2\xf9\x2a\x64\xad\x82\x75\xfd\x10\xe4\xb4\x0a\x9a\xa6\x69\x16\xa3\xd1\x56\x13\x84\x35\x75\xa9\x32\x46\xa4\x4f\x88\xd2\x35\x5f\x10\xb7\xa9\xfb\x4a\xc5\xf2\x77\x08\xa5\x42\x78\x1b\x23\xe5\x03\x9b\x73\x25\x95\x40\x31\x76\x22\x80\x79\x08\xff\x06\x60\x15\x94\x81\x01\xb1\x94\x9f\x18\x08\x69\x04\xb0\x94\xba\x46\x23\x45\x3c\x41\x55\xd6\xd4\xa5\x8f\x2a\xcf\xd5\x62\x7f\x74\xdc\xec\x7a\xfd\xbd\x6d\xbc\x2d\x16\xaf\xe6\x3e\xab\x35\x5c\xb7\x67\x74\x92\xfe\x28\xfe\x31\x47\x8d\xee\x76\x3c\x89\x4b\x5d\x8f\x4e\xba\x61\x95\xae\x27\x41\xbd\xe4\x6d\xde\xc7\x6b\x7b\x58\x2f\x99\xea\x7d\xae\x6b\x58\x70\x29\xb9\xa0\x1e\x8d\x9a\x3a\x8a\x78\x94\x85\x3c\x91\xfa\xc5\x97\xc4\x82\xc6\x4a\x93\x02\x7f\xfa\xc0\xdc\x21\x20\xd8\x25\x44\x64\x27\xf1\xe7\xb0\x58\x01\x15\x60\x00\xc9\x68\x78\x12\x1c\x7c\xa9\x77\xf7\x4c\xe1\xea\xa9\x61\xd6\xba\xc7\x69\x49\x2c\xea\xc8\x1e\x57\x8d\xd1\x5c\xbd\x0d\xdb\xbb\x9f\xde\xec\xe7\x31\xb6\x8f\xbc\x26\xc3\xd5\x38\xae\xae\xdd\x59\x3a\x78\x7a\x46\xb6\x5a\xfc\x61\xfc\x49\xcd\x80\x1e\xf9\xf7\x7a\x2d\x78\xd6\xfa\x5f\xc2\x9d\x28\x90\x00\x33\x9e\x38\x2e\x43\x82\x9c\xd4\xa3\x00\x1d\x20\xa3\xb6\x84\x31\x8f\x63\x22\x40\x20\xa1\x01\x8c\x2a\x30\x61\x12\x3a\x57\xf0\x7b\x47\xfb\x41\x9b\xf6\xdc\x19\x9b\xf4\x32\x93\xd6\xe6\x33\x74\x48\xdd\xe9\x0b\x75\x3b\xcb\xb7\xcc\x38\x0c\x9c\x11\xcc\x38\xad\xf7\x66\xaf\xab\xc9\xac\x93\xd4\xde\x07\xce\x66\x9d\x18\x7e\xdb\xdc\x4c\x6d\xe6\x25\xea\x7f\x39\x7a\xe0\x49\x05\xf7\x2f\xea\x6b\x3b\x9d\xd2\xd2\x63\xd9\xec\x29\x78\x35\x5f\xb6\x69\x3a\x7c\x99\x76\xca\x01\x47\x6e\x6d\x58\x65\x15\x2f\x6c\xf4\x97\xe6\x00\x1b\xdc\x33\x7f\xc8\x3a\x35\x97\x30\xdc\x6e\x91\x93\x8c\x51\xc7\x67\xed\x55\xda\xd8\x3e\x6a\x27\x1f\xab\xa6\xae\xc8\x41\xc1\x00\xa5\xe8\x8c\xea\x0f\xfd\xb7\x94\xca\xdc\xa3\x01\x4a\x79\x78\xf5\x76\xcf\xf7\xf5\x84\xde\xd0\x9f\x26\xec\x9f\x13\xfb\x38\x71\xde\xa4\x65\xc1\x9c\xec\xea\x33\x67\xbb\xe7\xb9\xe4\xe0\x29\x79\x39\x28\xaa\x18\x69\xfd\xfa\x05\x06\x48\xfa\x1f\x1f\x16\x3c\x03\x05\x0b\x9e\xf7\x8c\x65\x73\x27\xbb\xd4\x3a\x34\xd5\x30\x43\x52\x36\x75\xcc\x23\x85\x68\x44\x44\xd1\x65\x09\x75\x2e\xad\xef\xab\x04\xdf\xdf\x64\xfe\xdd\x83\x15\x8d\xf2\x5d\xc1\xa9\xc8\x2f\x6b\x88\x51\x2f\x6a\xea\x98\x44\x8a\x08\xfd\x56\xa0\x5f\xbe\x6b\x09\x1d\x9a\xde\xf0\xdf\x1d\x1f\x96\x63\xc5\xe2\x74\x21\x73\x9e\x08\x4c\x72\xc6\x1c\xf8\x9e\xe5\x12\x5a\xf0\x7c\x53\x16\x3c\xef\xe9\xbf\x02\x00\x00\xff\xff\x38\x69\x9a\x97\xc0\x05\x00\x00")

func templatesSourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSourceHtml,
		"templates/source.html",
	)
}

func templatesSourceHtml() (*asset, error) {
	bytes, err := templatesSourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/source.html", size: 1472, mode: os.FileMode(420), modTime: time.Unix(1563584889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/source.html": templatesSourceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"source.html": &bintree{templatesSourceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

